# Copyright 2024 - 2025 Block, Inc.
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
#
# frozen_string_literal: true

# Note: this Rakefile is designed to work either when run from within config/release or after being copied to the project root.
# That's why we get the project root from git instead of using `__dir__`.
project_root = `git rev-parse --show-toplevel`.strip

require "bundler"
require "gem/release"
require "#{project_root}/elasticgraph-support/lib/elastic_graph/version"
require "#{project_root}/script/list_eg_gems"

# Load tasks from config/site/Rakefile
load "#{project_root}/config/site/Rakefile"

bump_version = lambda do |version:, message:|
  ::Dir.chdir(project_root) do
    opts = {
      file: "#{project_root}/elasticgraph-support/lib/elastic_graph/version.rb",
      version: version,
      message: message
    }

    ::Gem::Release::Cmds::Runner.new(:bump, ["elasticgraph-support"], opts).run

    # We also want to commit an update to `Gemfile.lock` as part of the version bump.
    ::Bundler.with_unbundled_env do
      sh "bundle install"
      sh "git add Gemfile.lock"
      sh "git commit --amend --no-edit"
    end
  end
end

desc "Bumps the ElasticGraph version to the specified new version number"
task :bump_version, [:version] do |_, args|
  version = args.fetch(:version)
  bump_version.call(version: version, message: "Release v#{version}.")
end

desc "Bumps the ElasticGraph version to the next pre-release version"
task :bump_version_to_next_prerelease do
  *main_parts, last_part = ElasticGraph::VERSION.split(".").filter_map do |part|
    # ignore any pre-release parts.
    Integer(part) unless part.match?(/[A-Za-z]/)
  end

  new_version = [*main_parts, last_part + 1, "pre"].join(".")
  bump_version.call(version: new_version, message: "Bump version to v#{new_version}.")
end

desc "Releases ElasticGraph to rubygems.org and tags the release in git"
task :release do
  ::Dir.chdir(project_root) do
    # `gem release` deletes the built package file as part of its cleanup:
    # https://github.com/svenfuchs/gem-release/blob/v2.2.2/lib/gem/release/cmds/release.rb#L115-L122
    #
    # However, that interferes with the rubygems release GitHub action: it uses `rubygems-await`
    # which expects the pkg file to be at `pkg/*.gem`.
    #
    # To deal with this, this module disables cleanup.
    mkdir_p "#{project_root}/pkg"
    disable_cleanup = Module.new do
      def cleanup
      end
    end
    ::Gem::Release::Cmds::Release.prepend disable_cleanup

    ElasticGraphGems.list.each do |gem|
      ::Gem::Release::Cmds::Runner.new(:release, [gem], {}).run

      unless ENV["GEM_RELEASE_PRETEND"] # If we're dry-running, the gem file won't be there to move.
        mv "#{project_root}/#{gem}/#{gem}-#{ElasticGraph::VERSION}.gem", "pkg"
      end
    end

    sh "bundle exec gem tag elasticgraph-support --push"
  end
end
