# Generated by `rake schema_artifacts:dump`.
# DO NOT EDIT BY HAND. Any edits will be lost the next time the rake task is run.
---
index_templates:
  teams:
    index_patterns:
    - teams_rollover__*
    template:
      aliases: {}
      mappings:
        dynamic: strict
        properties:
          id:
            type: keyword
          league:
            type: keyword
          country_code:
            type: keyword
          formed_on:
            type: date
            format: strict_date
          current_name:
            type: keyword
          past_names:
            type: keyword
          won_championships_at:
            type: date
            format: strict_date_time
          details:
            properties:
              uniform_colors:
                type: keyword
              count:
                type: integer
          stadium_location:
            type: geo_point
          forbes_valuations:
            type: long
          forbes_valuation_moneys_nested:
            properties:
              currency:
                type: keyword
              amount_cents:
                type: integer
            type: nested
          forbes_valuation_moneys_object:
            properties:
              currency:
                type: keyword
              amount_cents:
                type: integer
            type: object
          current_players_nested:
            properties:
              name:
                type: keyword
              nicknames:
                type: keyword
              affiliations:
                properties:
                  sponsorships_nested:
                    properties:
                      sponsor_id:
                        type: keyword
                      annual_total:
                        properties:
                          currency:
                            type: keyword
                          amount_cents:
                            type: integer
                    type: nested
                  sponsorships_object:
                    properties:
                      sponsor_id:
                        type: keyword
                      annual_total:
                        properties:
                          currency:
                            type: keyword
                          amount_cents:
                            type: integer
                    type: object
              seasons_nested:
                properties:
                  year:
                    type: integer
                  games_played:
                    type: integer
                  awards:
                    type: keyword
                  __counts:
                    properties:
                      awards:
                        type: integer
                type: nested
              seasons_object:
                properties:
                  year:
                    type: integer
                  games_played:
                    type: integer
                  awards:
                    type: keyword
                type: object
              __counts:
                properties:
                  nicknames:
                    type: integer
                  affiliations|sponsorships_nested:
                    type: integer
                  affiliations|sponsorships_object:
                    type: integer
                  affiliations|sponsorships_object|sponsor_id:
                    type: integer
                  affiliations|sponsorships_object|annual_total:
                    type: integer
                  affiliations|sponsorships_object|annual_total|currency:
                    type: integer
                  affiliations|sponsorships_object|annual_total|amount_cents:
                    type: integer
                  seasons_nested:
                    type: integer
                  seasons_object:
                    type: integer
                  seasons_object|year:
                    type: integer
                  seasons_object|games_played:
                    type: integer
                  seasons_object|awards:
                    type: integer
            type: nested
          current_players_object:
            properties:
              name:
                type: keyword
              nicknames:
                type: keyword
              affiliations:
                properties:
                  sponsorships_nested:
                    properties:
                      sponsor_id:
                        type: keyword
                      annual_total:
                        properties:
                          currency:
                            type: keyword
                          amount_cents:
                            type: integer
                    type: nested
                  sponsorships_object:
                    properties:
                      sponsor_id:
                        type: keyword
                      annual_total:
                        properties:
                          currency:
                            type: keyword
                          amount_cents:
                            type: integer
                    type: object
              seasons_nested:
                properties:
                  year:
                    type: integer
                  games_played:
                    type: integer
                  awards:
                    type: keyword
                  __counts:
                    properties:
                      awards:
                        type: integer
                type: nested
              seasons_object:
                properties:
                  year:
                    type: integer
                  games_played:
                    type: integer
                  awards:
                    type: keyword
                type: object
            type: object
          seasons_nested:
            properties:
              the_record:
                properties:
                  win_count:
                    type: integer
                  loss_count:
                    type: integer
                  last_win_date:
                    type: date
                    format: strict_date
                  first_win_on:
                    type: date
                    format: strict_date
              year:
                type: integer
              notes:
                type: keyword
              count:
                type: integer
              started_at:
                type: date
                format: strict_date_time
              won_games_at:
                type: date
                format: strict_date_time
              was_shortened:
                type: boolean
              players_nested:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                  __counts:
                    properties:
                      nicknames:
                        type: integer
                      affiliations|sponsorships_nested:
                        type: integer
                      affiliations|sponsorships_object:
                        type: integer
                      affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      affiliations|sponsorships_object|annual_total:
                        type: integer
                      affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      seasons_nested:
                        type: integer
                      seasons_object:
                        type: integer
                      seasons_object|year:
                        type: integer
                      seasons_object|games_played:
                        type: integer
                      seasons_object|awards:
                        type: integer
                type: nested
              players_object:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                type: object
              __counts:
                properties:
                  notes:
                    type: integer
                  won_games_at:
                    type: integer
                  players_nested:
                    type: integer
                  players_object:
                    type: integer
                  players_object|name:
                    type: integer
                  players_object|nicknames:
                    type: integer
                  players_object|affiliations:
                    type: integer
                  players_object|affiliations|sponsorships_nested:
                    type: integer
                  players_object|affiliations|sponsorships_object:
                    type: integer
                  players_object|affiliations|sponsorships_object|sponsor_id:
                    type: integer
                  players_object|affiliations|sponsorships_object|annual_total:
                    type: integer
                  players_object|affiliations|sponsorships_object|annual_total|currency:
                    type: integer
                  players_object|affiliations|sponsorships_object|annual_total|amount_cents:
                    type: integer
                  players_object|seasons_nested:
                    type: integer
                  players_object|seasons_object:
                    type: integer
                  players_object|seasons_object|year:
                    type: integer
                  players_object|seasons_object|games_played:
                    type: integer
                  players_object|seasons_object|awards:
                    type: integer
            type: nested
          seasons_object:
            properties:
              the_record:
                properties:
                  win_count:
                    type: integer
                  loss_count:
                    type: integer
                  last_win_date:
                    type: date
                    format: strict_date
                  first_win_on:
                    type: date
                    format: strict_date
              year:
                type: integer
              notes:
                type: keyword
              count:
                type: integer
              started_at:
                type: date
                format: strict_date_time
              won_games_at:
                type: date
                format: strict_date_time
              was_shortened:
                type: boolean
              players_nested:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                  __counts:
                    properties:
                      nicknames:
                        type: integer
                      affiliations|sponsorships_nested:
                        type: integer
                      affiliations|sponsorships_object:
                        type: integer
                      affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      affiliations|sponsorships_object|annual_total:
                        type: integer
                      affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      seasons_nested:
                        type: integer
                      seasons_object:
                        type: integer
                      seasons_object|year:
                        type: integer
                      seasons_object|games_played:
                        type: integer
                      seasons_object|awards:
                        type: integer
                type: nested
              players_object:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                type: object
            type: object
          the_nested_fields:
            properties:
              forbes_valuation_moneys:
                properties:
                  currency:
                    type: keyword
                  amount_cents:
                    type: integer
                type: nested
              current_players:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                  __counts:
                    properties:
                      nicknames:
                        type: integer
                      affiliations|sponsorships_nested:
                        type: integer
                      affiliations|sponsorships_object:
                        type: integer
                      affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      affiliations|sponsorships_object|annual_total:
                        type: integer
                      affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      seasons_nested:
                        type: integer
                      seasons_object:
                        type: integer
                      seasons_object|year:
                        type: integer
                      seasons_object|games_played:
                        type: integer
                      seasons_object|awards:
                        type: integer
                type: nested
              the_seasons:
                properties:
                  the_record:
                    properties:
                      win_count:
                        type: integer
                      loss_count:
                        type: integer
                      last_win_date:
                        type: date
                        format: strict_date
                      first_win_on:
                        type: date
                        format: strict_date
                  year:
                    type: integer
                  notes:
                    type: keyword
                  count:
                    type: integer
                  started_at:
                    type: date
                    format: strict_date_time
                  won_games_at:
                    type: date
                    format: strict_date_time
                  was_shortened:
                    type: boolean
                  players_nested:
                    properties:
                      name:
                        type: keyword
                      nicknames:
                        type: keyword
                      affiliations:
                        properties:
                          sponsorships_nested:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: nested
                          sponsorships_object:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: object
                      seasons_nested:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                          __counts:
                            properties:
                              awards:
                                type: integer
                        type: nested
                      seasons_object:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                        type: object
                      __counts:
                        properties:
                          nicknames:
                            type: integer
                          affiliations|sponsorships_nested:
                            type: integer
                          affiliations|sponsorships_object:
                            type: integer
                          affiliations|sponsorships_object|sponsor_id:
                            type: integer
                          affiliations|sponsorships_object|annual_total:
                            type: integer
                          affiliations|sponsorships_object|annual_total|currency:
                            type: integer
                          affiliations|sponsorships_object|annual_total|amount_cents:
                            type: integer
                          seasons_nested:
                            type: integer
                          seasons_object:
                            type: integer
                          seasons_object|year:
                            type: integer
                          seasons_object|games_played:
                            type: integer
                          seasons_object|awards:
                            type: integer
                    type: nested
                  players_object:
                    properties:
                      name:
                        type: keyword
                      nicknames:
                        type: keyword
                      affiliations:
                        properties:
                          sponsorships_nested:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: nested
                          sponsorships_object:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: object
                      seasons_nested:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                          __counts:
                            properties:
                              awards:
                                type: integer
                        type: nested
                      seasons_object:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                        type: object
                    type: object
                  __counts:
                    properties:
                      notes:
                        type: integer
                      won_games_at:
                        type: integer
                      players_nested:
                        type: integer
                      players_object:
                        type: integer
                      players_object|name:
                        type: integer
                      players_object|nicknames:
                        type: integer
                      players_object|affiliations:
                        type: integer
                      players_object|affiliations|sponsorships_nested:
                        type: integer
                      players_object|affiliations|sponsorships_object:
                        type: integer
                      players_object|affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      players_object|seasons_nested:
                        type: integer
                      players_object|seasons_object:
                        type: integer
                      players_object|seasons_object|year:
                        type: integer
                      players_object|seasons_object|games_played:
                        type: integer
                      players_object|seasons_object|awards:
                        type: integer
                type: nested
          nested_fields2:
            properties:
              forbes_valuation_moneys:
                properties:
                  currency:
                    type: keyword
                  amount_cents:
                    type: integer
                type: nested
              current_players:
                properties:
                  name:
                    type: keyword
                  nicknames:
                    type: keyword
                  affiliations:
                    properties:
                      sponsorships_nested:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: nested
                      sponsorships_object:
                        properties:
                          sponsor_id:
                            type: keyword
                          annual_total:
                            properties:
                              currency:
                                type: keyword
                              amount_cents:
                                type: integer
                        type: object
                  seasons_nested:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                      __counts:
                        properties:
                          awards:
                            type: integer
                    type: nested
                  seasons_object:
                    properties:
                      year:
                        type: integer
                      games_played:
                        type: integer
                      awards:
                        type: keyword
                    type: object
                  __counts:
                    properties:
                      nicknames:
                        type: integer
                      affiliations|sponsorships_nested:
                        type: integer
                      affiliations|sponsorships_object:
                        type: integer
                      affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      affiliations|sponsorships_object|annual_total:
                        type: integer
                      affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      seasons_nested:
                        type: integer
                      seasons_object:
                        type: integer
                      seasons_object|year:
                        type: integer
                      seasons_object|games_played:
                        type: integer
                      seasons_object|awards:
                        type: integer
                type: nested
              the_seasons:
                properties:
                  the_record:
                    properties:
                      win_count:
                        type: integer
                      loss_count:
                        type: integer
                      last_win_date:
                        type: date
                        format: strict_date
                      first_win_on:
                        type: date
                        format: strict_date
                  year:
                    type: integer
                  notes:
                    type: keyword
                  count:
                    type: integer
                  started_at:
                    type: date
                    format: strict_date_time
                  won_games_at:
                    type: date
                    format: strict_date_time
                  was_shortened:
                    type: boolean
                  players_nested:
                    properties:
                      name:
                        type: keyword
                      nicknames:
                        type: keyword
                      affiliations:
                        properties:
                          sponsorships_nested:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: nested
                          sponsorships_object:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: object
                      seasons_nested:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                          __counts:
                            properties:
                              awards:
                                type: integer
                        type: nested
                      seasons_object:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                        type: object
                      __counts:
                        properties:
                          nicknames:
                            type: integer
                          affiliations|sponsorships_nested:
                            type: integer
                          affiliations|sponsorships_object:
                            type: integer
                          affiliations|sponsorships_object|sponsor_id:
                            type: integer
                          affiliations|sponsorships_object|annual_total:
                            type: integer
                          affiliations|sponsorships_object|annual_total|currency:
                            type: integer
                          affiliations|sponsorships_object|annual_total|amount_cents:
                            type: integer
                          seasons_nested:
                            type: integer
                          seasons_object:
                            type: integer
                          seasons_object|year:
                            type: integer
                          seasons_object|games_played:
                            type: integer
                          seasons_object|awards:
                            type: integer
                    type: nested
                  players_object:
                    properties:
                      name:
                        type: keyword
                      nicknames:
                        type: keyword
                      affiliations:
                        properties:
                          sponsorships_nested:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: nested
                          sponsorships_object:
                            properties:
                              sponsor_id:
                                type: keyword
                              annual_total:
                                properties:
                                  currency:
                                    type: keyword
                                  amount_cents:
                                    type: integer
                            type: object
                      seasons_nested:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                          __counts:
                            properties:
                              awards:
                                type: integer
                        type: nested
                      seasons_object:
                        properties:
                          year:
                            type: integer
                          games_played:
                            type: integer
                          awards:
                            type: keyword
                        type: object
                    type: object
                  __counts:
                    properties:
                      notes:
                        type: integer
                      won_games_at:
                        type: integer
                      players_nested:
                        type: integer
                      players_object:
                        type: integer
                      players_object|name:
                        type: integer
                      players_object|nicknames:
                        type: integer
                      players_object|affiliations:
                        type: integer
                      players_object|affiliations|sponsorships_nested:
                        type: integer
                      players_object|affiliations|sponsorships_object:
                        type: integer
                      players_object|affiliations|sponsorships_object|sponsor_id:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total|currency:
                        type: integer
                      players_object|affiliations|sponsorships_object|annual_total|amount_cents:
                        type: integer
                      players_object|seasons_nested:
                        type: integer
                      players_object|seasons_object:
                        type: integer
                      players_object|seasons_object|year:
                        type: integer
                      players_object|seasons_object|games_played:
                        type: integer
                      players_object|seasons_object|awards:
                        type: integer
                type: nested
          __counts:
            properties:
              past_names:
                type: integer
              won_championships_at:
                type: integer
              details|uniform_colors:
                type: integer
              forbes_valuations:
                type: integer
              forbes_valuation_moneys_nested:
                type: integer
              forbes_valuation_moneys_object:
                type: integer
              forbes_valuation_moneys_object|currency:
                type: integer
              forbes_valuation_moneys_object|amount_cents:
                type: integer
              current_players_nested:
                type: integer
              current_players_object:
                type: integer
              current_players_object|name:
                type: integer
              current_players_object|nicknames:
                type: integer
              current_players_object|affiliations:
                type: integer
              current_players_object|affiliations|sponsorships_nested:
                type: integer
              current_players_object|affiliations|sponsorships_object:
                type: integer
              current_players_object|affiliations|sponsorships_object|sponsor_id:
                type: integer
              current_players_object|affiliations|sponsorships_object|annual_total:
                type: integer
              current_players_object|affiliations|sponsorships_object|annual_total|currency:
                type: integer
              current_players_object|affiliations|sponsorships_object|annual_total|amount_cents:
                type: integer
              current_players_object|seasons_nested:
                type: integer
              current_players_object|seasons_object:
                type: integer
              current_players_object|seasons_object|year:
                type: integer
              current_players_object|seasons_object|games_played:
                type: integer
              current_players_object|seasons_object|awards:
                type: integer
              seasons_nested:
                type: integer
              seasons_object:
                type: integer
              seasons_object|the_record:
                type: integer
              seasons_object|the_record|win_count:
                type: integer
              seasons_object|the_record|loss_count:
                type: integer
              seasons_object|the_record|last_win_date:
                type: integer
              seasons_object|the_record|first_win_on:
                type: integer
              seasons_object|year:
                type: integer
              seasons_object|notes:
                type: integer
              seasons_object|count:
                type: integer
              seasons_object|started_at:
                type: integer
              seasons_object|won_games_at:
                type: integer
              seasons_object|was_shortened:
                type: integer
              seasons_object|players_nested:
                type: integer
              seasons_object|players_object:
                type: integer
              seasons_object|players_object|name:
                type: integer
              seasons_object|players_object|nicknames:
                type: integer
              seasons_object|players_object|affiliations:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_nested:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_object:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_object|sponsor_id:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_object|annual_total:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_object|annual_total|currency:
                type: integer
              seasons_object|players_object|affiliations|sponsorships_object|annual_total|amount_cents:
                type: integer
              seasons_object|players_object|seasons_nested:
                type: integer
              seasons_object|players_object|seasons_object:
                type: integer
              seasons_object|players_object|seasons_object|year:
                type: integer
              seasons_object|players_object|seasons_object|games_played:
                type: integer
              seasons_object|players_object|seasons_object|awards:
                type: integer
              the_nested_fields|forbes_valuation_moneys:
                type: integer
              the_nested_fields|current_players:
                type: integer
              the_nested_fields|the_seasons:
                type: integer
              nested_fields2|forbes_valuation_moneys:
                type: integer
              nested_fields2|current_players:
                type: integer
              nested_fields2|the_seasons:
                type: integer
          __sources:
            type: keyword
          __versions:
            type: object
            dynamic: 'false'
        _routing:
          required: true
        _size:
          enabled: true
      settings:
        index.mapping.ignore_malformed: false
        index.mapping.coerce: false
        index.number_of_replicas: 1
        index.number_of_shards: 1
  widget_currencies:
    index_patterns:
    - widget_currencies_rollover__*
    template:
      aliases: {}
      mappings:
        dynamic: strict
        properties:
          id:
            type: keyword
          name:
            type: keyword
          introduced_on:
            type: date
            format: strict_date
          primary_continent:
            type: keyword
          details:
            properties:
              unit:
                type: keyword
              symbol:
                type: keyword
          widget_names2:
            type: keyword
          widget_tags:
            type: keyword
          widget_fee_currencies:
            type: keyword
          widget_options:
            properties:
              sizes:
                type: keyword
              colors:
                type: keyword
          nested_fields:
            properties:
              max_widget_cost:
                type: integer
          oldest_widget_created_at:
            type: date
            format: strict_date_time
          __counts:
            properties:
              widget_names2:
                type: integer
              widget_tags:
                type: integer
              widget_fee_currencies:
                type: integer
              widget_options|sizes:
                type: integer
              widget_options|colors:
                type: integer
          __sources:
            type: keyword
          __versions:
            type: object
            dynamic: 'false'
        _routing:
          required: true
        _size:
          enabled: true
      settings:
        index.mapping.ignore_malformed: false
        index.mapping.coerce: false
        index.number_of_replicas: 1
        index.number_of_shards: 1
  widgets:
    index_patterns:
    - widgets_rollover__*
    template:
      aliases: {}
      mappings:
        dynamic: strict
        properties:
          id:
            type: keyword
          workspace_id2:
            type: keyword
          amount_cents:
            type: integer
          cost:
            properties:
              currency:
                type: keyword
              amount_cents:
                type: integer
          cost_currency_unit:
            type: keyword
          cost_currency_name:
            type: keyword
          cost_currency_symbol:
            type: keyword
          cost_currency_primary_continent:
            type: keyword
          cost_currency_introduced_on:
            type: date
            format: strict_date
          name:
            type: keyword
          name_text:
            type: text
          created_at:
            type: date
            format: strict_date_time
          created_at_time_of_day:
            type: date
            format: HH:mm:ss||HH:mm:ss.S||HH:mm:ss.SS||HH:mm:ss.SSS
          created_on:
            type: date
            format: strict_date
          release_timestamps:
            type: date
            format: strict_date_time
          release_dates:
            type: date
            format: strict_date
          component_ids:
            type: keyword
          options:
            properties:
              size:
                type: keyword
              the_sighs:
                type: keyword
              color:
                type: keyword
              is_draft:
                type: boolean
          the_opts:
            properties:
              size:
                type: keyword
              the_sighs:
                type: keyword
              color:
                type: keyword
              is_draft:
                type: boolean
          inventor:
            properties:
              name:
                type: keyword
              nationality:
                type: keyword
              stock_ticker:
                type: keyword
              __typename:
                type: keyword
          named_inventor:
            properties:
              name:
                type: keyword
              nationality:
                type: keyword
              stock_ticker:
                type: keyword
              __typename:
                type: keyword
          weight_in_ng_str:
            type: long
          weight_in_ng:
            type: long
          tags:
            type: keyword
          amounts:
            type: integer
            index: false
          fees:
            properties:
              currency:
                type: keyword
              amount_cents:
                type: integer
            type: object
          metadata:
            type: keyword
          workspace_name:
            type: keyword
          __counts:
            properties:
              release_timestamps:
                type: integer
              release_dates:
                type: integer
              component_ids:
                type: integer
              tags:
                type: integer
              amounts:
                type: integer
              fees:
                type: integer
              fees|currency:
                type: integer
              fees|amount_cents:
                type: integer
          __sources:
            type: keyword
          __versions:
            type: object
            dynamic: 'false'
        _routing:
          required: true
        _size:
          enabled: true
      settings:
        index.mapping.ignore_malformed: false
        index.mapping.coerce: false
        index.number_of_replicas: 1
        index.number_of_shards: 3
indices:
  addresses:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        full_address:
          type: keyword
        timestamps:
          properties:
            created_at:
              type: date
              format: strict_date_time
        geo_location:
          type: geo_point
        shapes:
          type: geo_shape
        manufacturer_id:
          type: keyword
        __counts:
          properties:
            shapes:
              type: integer
            shapes|type:
              type: integer
            shapes|coordinates:
              type: integer
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  components:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        created_at:
          type: date
          format: strict_date_time
        position:
          properties:
            x:
              type: double
            "y":
              type: double
        tags:
          type: keyword
        widget_name:
          type: keyword
        widget_tags:
          type: keyword
        widget_workspace_id3:
          type: keyword
        widget_size:
          type: keyword
        widget_cost:
          properties:
            currency:
              type: keyword
            amount_cents:
              type: integer
        part_ids:
          type: keyword
        __counts:
          properties:
            tags:
              type: integer
            widget_tags:
              type: integer
            part_ids:
              type: integer
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  electrical_parts:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        created_at:
          type: date
          format: strict_date_time
        voltage:
          type: integer
        manufacturer_id:
          type: keyword
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  manufacturers:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        created_at:
          type: date
          format: strict_date_time
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  mechanical_parts:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        created_at:
          type: date
          format: strict_date_time
        material:
          type: keyword
        manufacturer_id:
          type: keyword
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  sponsors:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
  widget_workspaces:
    aliases: {}
    mappings:
      dynamic: strict
      properties:
        id:
          type: keyword
        name:
          type: keyword
        widget:
          properties:
            id:
              type: keyword
            created_at:
              type: date
              format: strict_date_time
        __sources:
          type: keyword
        __versions:
          type: object
          dynamic: 'false'
      _size:
        enabled: true
    settings:
      index.mapping.ignore_malformed: false
      index.mapping.coerce: false
      index.number_of_replicas: 1
      index.number_of_shards: 1
scripts:
  update_WidgetCurrency_from_Widget_0f26b3e9ea093af29e5cef02a25e75ca:
    context: update
    script:
      lang: painless
      source: |-
        // Idempotently inserts the given value in the `sortedList`, returning `true` if the list was updated.
        boolean appendOnlySet_idempotentlyInsertValue(def value, List sortedList) {
          // As per https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html#binarySearch(java.util.List,java.lang.Object):
          //
          // > Returns the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1).
          // > The insertion point is defined as the point at which the key would be inserted into the list: the index
          // > of the first element greater than the key, or list.size() if all elements in the list are less than the
          // > specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.
          int binarySearchResult = Collections.binarySearch(sortedList, value);

          if (binarySearchResult < 0) {
            sortedList.add(-binarySearchResult - 1, value);
            return true;
          } else {
            return false;
          }
        }

        // Wrapper around `idempotentlyInsertValue` that handles a list of values.
        // Returns `true` if the list field was updated.
        boolean appendOnlySet_idempotentlyInsertValues(List values, List sortedList) {
          boolean listUpdated = false;

          for (def value : values) {
            listUpdated = appendOnlySet_idempotentlyInsertValue(value, sortedList) || listUpdated;
          }

          return listUpdated;
        }

        boolean immutableValue_idempotentlyUpdateValue(List scriptErrors, List values, def parentObject, String fullPath, String fieldName, boolean nullable, boolean canChangeFromNull) {
          boolean fieldAlreadySet = parentObject.containsKey(fieldName);

          // `values` is always passed to us as a `List` (the indexer normalizes to a list, wrapping single
          // values in a list as needed) but we only ever expect at most 1 element.
          def newValueCandidate = values.isEmpty() ? null : values[0];

          if (fieldAlreadySet) {
            def currentValue = parentObject[fieldName];

            // Usually we do not allow `immutable_value` fields to ever change values. However, we make
            // a special case for `null`, but only when `can_change_from_null: true` has been configured.
            // This can be important when deriving a field that has not always existed on the source events.
            // On early events, the value may be `null`, and, when this is enabled, we do not want that to
            // interfere with our ability to set the value to the correct non-null value based on a different
            // event which has a value for the source field.
            if (canChangeFromNull) {
              if (currentValue == null) {
                parentObject[fieldName] = newValueCandidate;
                return true;
              }

              // When `can_change_from_null: true` is enabled we also need to ignore NEW `null` values that we
              // see _after_ a non-null value. This is necessary because an ElasticGraph invariant is that events
              // can be processed in any order. So we might process an old event (predating the existence of the
              // source field) after we've already set the field to a non-null value. We must always "converge"
              // on the same indexed state regardless, of the order events are seen, so here we just ignore it.
              if (newValueCandidate == null) {
                return false;
              }
            }

            // Otherwise, if the values differ, it means we are attempting to mutate the immutable value field, which we cannot allow.
            if (currentValue != newValueCandidate) {
              if (currentValue == null) {
                scriptErrors.add("Field `" + fullPath + "` cannot be changed (" + currentValue + " => " + newValueCandidate + "). Set `can_change_from_null: true` on the `immutable_value` definition to allow this.");
              } else {
                scriptErrors.add("Field `" + fullPath + "` cannot be changed (" + currentValue + " => " + newValueCandidate + ").");
              }
            }

            return false;
          }

          if (newValueCandidate == null && !nullable) {
            scriptErrors.add("Field `" + fullPath + "` cannot be set to `null`, but the source event contains no value for it. Remove `nullable: false` from the `immutable_value` definition to allow this.");
            return false;
          }

          parentObject[fieldName] = newValueCandidate;
          return true;
        }

        boolean maxValue_idempotentlyUpdateValue(List values, def parentObject, String fieldName) {
          def currentFieldValue = parentObject[fieldName];
          def maxNewValue = values.isEmpty() ? null : Collections.max(values);

          if (currentFieldValue == null || (maxNewValue != null && maxNewValue.compareTo(currentFieldValue) > 0)) {
            parentObject[fieldName] = maxNewValue;
            return true;
          }

          return false;
        }

        boolean minValue_idempotentlyUpdateValue(List values, def parentObject, String fieldName) {
          def currentFieldValue = parentObject[fieldName];
          def minNewValue = values.isEmpty() ? null : Collections.min(values);

          if (currentFieldValue == null || (minNewValue != null && minNewValue.compareTo(currentFieldValue) < 0)) {
            parentObject[fieldName] = minNewValue;
            return true;
          }

          return false;
        }

        Map data = params.data;
        // A variable to accumulate script errors so that we can surface _all_ issues and not just the first.
        List scriptErrors = new ArrayList();
        if (ctx._source.details == null) {
          ctx._source.details = [:];
        }
        if (ctx._source.nested_fields == null) {
          ctx._source.nested_fields = [:];
        }
        if (ctx._source.widget_fee_currencies == null) {
          ctx._source.widget_fee_currencies = [];
        }
        if (ctx._source.widget_names2 == null) {
          ctx._source.widget_names2 = [];
        }
        if (ctx._source.widget_options == null) {
          ctx._source.widget_options = [:];
        }
        if (ctx._source.widget_options.colors == null) {
          ctx._source.widget_options.colors = [];
        }
        if (ctx._source.widget_options.sizes == null) {
          ctx._source.widget_options.sizes = [];
        }
        if (ctx._source.widget_tags == null) {
          ctx._source.widget_tags = [];
        }

        boolean details__symbol_was_noop = !immutableValue_idempotentlyUpdateValue(scriptErrors, data["cost_currency_symbol"], ctx._source.details, "details.symbol", "symbol", true, true);
        boolean details__unit_was_noop = !immutableValue_idempotentlyUpdateValue(scriptErrors, data["cost_currency_unit"], ctx._source.details, "details.unit", "unit", false, false);
        boolean introduced_on_was_noop = !immutableValue_idempotentlyUpdateValue(scriptErrors, data["cost_currency_introduced_on"], ctx._source, "introduced_on", "introduced_on", true, false);
        boolean name_was_noop = !immutableValue_idempotentlyUpdateValue(scriptErrors, data["cost_currency_name"], ctx._source, "name", "name", true, false);
        boolean nested_fields__max_widget_cost_was_noop = !maxValue_idempotentlyUpdateValue(data["cost.amount_cents"], ctx._source.nested_fields, "max_widget_cost");
        boolean oldest_widget_created_at_was_noop = !minValue_idempotentlyUpdateValue(data["created_at"], ctx._source, "oldest_widget_created_at");
        boolean primary_continent_was_noop = !immutableValue_idempotentlyUpdateValue(scriptErrors, data["cost_currency_primary_continent"], ctx._source, "primary_continent", "primary_continent", true, false);
        boolean widget_fee_currencies_was_noop = !appendOnlySet_idempotentlyInsertValues(data["fees.currency"], ctx._source.widget_fee_currencies);
        boolean widget_names2_was_noop = !appendOnlySet_idempotentlyInsertValues(data["name"], ctx._source.widget_names2);
        boolean widget_options__colors_was_noop = !appendOnlySet_idempotentlyInsertValues(data["options.color"], ctx._source.widget_options.colors);
        boolean widget_options__sizes_was_noop = !appendOnlySet_idempotentlyInsertValues(data["options.size"], ctx._source.widget_options.sizes);
        boolean widget_tags_was_noop = !appendOnlySet_idempotentlyInsertValues(data["tags"], ctx._source.widget_tags);

        if (!scriptErrors.isEmpty()) {
          throw new IllegalArgumentException("Derived index update failed due to bad input data: " + scriptErrors.join(" "));
        }

        // For records with no new values to index, only skip the update if the document itself doesn't already exist.
        // Otherwise create an (empty) document to reflect the fact that the id has been seen.
        if (ctx._source.id != null && details__symbol_was_noop && details__unit_was_noop && introduced_on_was_noop && name_was_noop && nested_fields__max_widget_cost_was_noop && oldest_widget_created_at_was_noop && primary_continent_was_noop && widget_fee_currencies_was_noop && widget_names2_was_noop && widget_options__colors_was_noop && widget_options__sizes_was_noop && widget_tags_was_noop) {
          ctx.op = 'none';
        } else {
          // Here we set `_source.id` because if we don't, it'll never be set, making these docs subtly
          // different from docs indexed the normal way.
          //
          // Note also that we MUST use `params.id` instead of `ctx._id`. The latter works on an update
          // of an existing document, but is unavailable when we are inserting the document for the first time.
          ctx._source.id = params.id;
        }
  field_as_day_of_week_f2b5c7d9e8f75bf2457b52412bfb6537:
    context: field
    script:
      lang: painless
      source: |-
        // Check if required params are missing
        if (params.offset_ms == null) {
          throw new IllegalArgumentException("Missing required parameter: offset_ms");
        }
        if (params.time_zone == null) {
          throw new IllegalArgumentException("Missing required parameter: time_zone");
        }

        // Set variables used in the loop
        ZoneId zoneId = ZoneId.of(params.time_zone);
        List results = new ArrayList();

        for (ZonedDateTime timestamp : doc[params.field]) {
          // Convert the timestamp to the specified time zone
          ZonedDateTime zonedTimestamp = timestamp.withZoneSameInstant(zoneId);

          // Adjust the timestamp based on the offset_ms parameter
          ZonedDateTime adjustedTimestamp = zonedTimestamp.plus(params.offset_ms, ChronoUnit.MILLIS);

          // Format and add the result to the list
          results.add(adjustedTimestamp.getDayOfWeek().name());
        }

        return results;
  field_as_time_of_day_ed82aba44fc66bff5635bec4305c1c66:
    context: field
    script:
      lang: painless
      source: |-
        // Check if required params are missing
        if (params.offset_ms == null) {
          throw new IllegalArgumentException("Missing required parameter: offset_ms");
        }
        if (params.time_zone == null) {
          throw new IllegalArgumentException("Missing required parameter: time_zone");
        }
        if (params.interval == null) {
          throw new IllegalArgumentException("Missing required parameter: interval");
        }

        // Set variables used in the loop
        ZoneId zoneId = ZoneId.of(params.time_zone);
        ChronoUnit intervalUnit;
        if (params.interval == "hour") {
          intervalUnit = ChronoUnit.HOURS;
        } else if (params.interval == "minute") {
          intervalUnit = ChronoUnit.MINUTES;
        } else if (params.interval == "second") {
          intervalUnit = ChronoUnit.SECONDS;
        } else {
          throw new IllegalArgumentException("Invalid interval value: " + params.interval);
        }
        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_TIME;
        List results = new ArrayList();

        for (ZonedDateTime timestamp : doc[params.field]) {
          // Convert the timestamp to the specified time zone
          ZonedDateTime zonedTimestamp = timestamp.withZoneSameInstant(zoneId);

          // Adjust the timestamp based on the offset_ms parameter
          ZonedDateTime adjustedTimestamp = zonedTimestamp.plus(params.offset_ms, ChronoUnit.MILLIS);

          // Truncate the timestamp to the specified interval
          adjustedTimestamp = adjustedTimestamp.truncatedTo(intervalUnit);

          // Format and add the result to the list
          results.add(adjustedTimestamp.format(formatter));
        }

        return results;
  filter_by_time_of_day_ea12d0561b24961789ab68ed38435612:
    context: filter
    script:
      lang: painless
      source: |-
        ZoneId zoneId = ZoneId.of(params.time_zone);

        for (ZonedDateTime timestamp : doc[params.field]) {
          long docValue = timestamp
            .withZoneSameInstant(zoneId)
            .toLocalTime()
            .toNanoOfDay();

          // Perform comparisons based on whichever params are set.
          // ElasticGraph takes care of passing us param values as nano-of-day so that we
          // can directly and efficiently compare against `docValue`.
          if ((params.gte == null || docValue >= params.gte) &&
              (params.gt == null || docValue > params.gt) &&
              (params.lte == null || docValue <= params.lte) &&
              (params.lt == null || docValue < params.lt) &&
              (params.equal_to_any_of == null || params.equal_to_any_of.contains(docValue))) {
            return true;
          }
        }

        // No timestamp values matched the params, so return `false`.
        return false;
  update_index_data_38ea36e5b48fc1566d4142e9fc44b12e:
    context: update
    script:
      lang: painless
      source: |-
        Map source = ctx._source;
        String sourceId = params.sourceId;
        String relationship = params.relationship;

        // Numbers in JSON appear to be parsed as doubles, but we want the version stored as a long, so we need to cast it here.
        long eventVersion = (long) params.version;

        if (source.__sources == null) {
          source.__sources = [];
        }

        if (source.__versions == null) {
          source.__versions = [:];
        }

        if (source.__versions[relationship] == null) {
          source.__versions[relationship] = [:];
        }

        Map relationshipVersionsMap = source.__versions.get(relationship);
        List previousSourceIdsForRelationship = relationshipVersionsMap.keySet().stream().filter(id -> id != sourceId).collect(Collectors.toList());

        if (previousSourceIdsForRelationship.size() > 0) {
          String previousIdDescription = previousSourceIdsForRelationship.size() == 1 ? previousSourceIdsForRelationship.get(0) : previousSourceIdsForRelationship.toString();
          throw new IllegalArgumentException(
            "Cannot update document " + params.id + " " +
            "with data from related " + relationship + " " + sourceId + " " +
            "because the related " + relationship + " has apparently changed (was: " + previousSourceIdsForRelationship + "), " +
            "but mutations of relationships used with `sourced_from` are not supported because " +
            "allowing it could break ElasticGraph's out-of-order processing guarantees."
         );
        }

        // While the version in `__versions` is going to be used for the doc version in the future, for now
        // we need to continue getting it from `__sourceVersions`. Both our old version and this versions of this
        // script keep the value in `__sourceVersions` up-to-date, whereas the old script only writes it to
        // `__sourceVersions`. Until we have completely migrated off of the old script for all ElasticGraph
        // clusters, we need to keep using it.
        //
        // Later, after the old script is no longer used by any clusters, we'll stop using `__sourceVersions`.
        Number _versionForSourceType = source.get("__sourceVersions")?.get(params.sourceType)?.get(sourceId);
        Number _versionForRelationship = relationshipVersionsMap.get(sourceId);

        // Our JSON schema requires event versions to be non-negative, so we can safely use Long.MIN_VALUE as a stand-in when the value is null.
        long versionForSourceType = _versionForSourceType == null ? Long.MIN_VALUE : _versionForSourceType.longValue();
        long versionForRelationship = _versionForRelationship == null ? Long.MIN_VALUE : _versionForRelationship.longValue();

        // Pick the larger of the two versions as our doc version. Note that `Math.max` didn't work for me here for
        // reasons I don't understand, but a simple ternary works fine.
        //
        // In theory, we could just use `versionForSourceType` as the `docVersion` (and not even check `__versions` at all)
        // since both the old version and this version maintain the doc version in `__sourceVersions`. However, that would
        // prevent this version of the script from being forward-compatible with the planned next version of this script.
        // In the next version, we plan to stop writing to `__sourceVersions`, and as we can't deploy that change atomically,
        // this version of the script will continue to run after that has begun to be used. So this version of the script
        // must consider which version is greater here, and not simply trust either version value.
        long docVersion = versionForSourceType > versionForRelationship ? versionForSourceType : versionForRelationship;

        if (docVersion >= eventVersion) {
          throw new IllegalArgumentException("ElasticGraph update was a no-op: [" +
            params.id + "]: version conflict, current version [" +
            docVersion + "] is higher or equal to the one provided [" +
            eventVersion + "]");
        } else {
          source.putAll(params.data);
          Map __counts = params.__counts;

          if (__counts != null) {
            if (source.__counts == null) {
              source.__counts = [:];
            }

            source.__counts.putAll(__counts);
          }

          source.id = params.id;
          source.__versions[relationship][sourceId] = eventVersion;

          // Record the relationship in `__sources` if it's not already there. We maintain it as an append-only set using a sorted list.
          // This ensures deterministic ordering of its elements regardless of event ingestion order, and lets us check membership in O(log N) time.
          //
          // As per https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html#binarySearch(java.util.List,java.lang.Object):
          //
          // > Returns the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1).
          // > The insertion point is defined as the point at which the key would be inserted into the list: the index
          // > of the first element greater than the key, or list.size() if all elements in the list are less than the
          // > specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.
          int sourceBinarySearchResult = Collections.binarySearch(source.__sources, relationship);
          if (sourceBinarySearchResult < 0) {
            source.__sources.add(-sourceBinarySearchResult - 1, relationship);
          }
        }
