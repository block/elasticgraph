# Generated by `rake schema_artifacts:dump`.
# DO NOT EDIT BY HAND. Any edits will be lost the next time the rake task is run.

extend schema
  @link(import: ["@authenticated", "@composeDirective", "@extends", "@external", "@inaccessible", "@interfaceObject", "@key", "@override", "@policy", "@provides", "@requires", "@requiresScopes", "@shareable", "@tag", "FieldSet"], url: "https://specs.apollo.dev/federation/v2.6")

directive @authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR

directive @composeDirective(name: String!) repeatable on SCHEMA

"""
Indicates an upper bound on how quickly a query must respond to meet the service-level objective.
ElasticGraph will log a "good event" message if the query latency is less than or equal to this value,
and a "bad event" message if the query latency is greater than this value. These messages can be used
to drive an SLO dashboard.

Note that the latency compared against this only contains processing time within ElasticGraph itself.
Any time spent on sending the request or response over the network is not included in the comparison.
"""
directive @eg_latency_slo(ms: Int!) on QUERY

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @interfaceObject on OBJECT

directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(as: String, for: link__Purpose, import: [link__Import], url: String!) repeatable on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @policy(policies: [[federation__Policy!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR

directive @provides(fields: FieldSet!) on FIELD_DEFINITION

directive @requires(fields: FieldSet!) on FIELD_DEFINITION

directive @requiresScopes(scopes: [[federation__Scope!]!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

type Address {
  full_address: String!
  geo_location: GeoLocation
  manufacturer: Manufacturer
  shapes: [GeoShape!]!
  timestamps: AddressTimestamps
}

"""
Type used to perform aggregation computations on `Address` fields.
"""
type AddressAggregatedValues {
  """
  Computed aggregate values for the `full_address` field.
  """
  full_address: NonNumericAggregatedValues

  """
  Computed aggregate values for the `geo_location` field.
  """
  geo_location: NonNumericAggregatedValues

  """
  Computed aggregate values for the `shapes` field.
  """
  shapes: NonNumericAggregatedValues

  """
  Computed aggregate values for the `timestamps` field.
  """
  timestamps: AddressTimestampsAggregatedValues
}

"""
Return type representing a bucket of `Address` documents for an aggregations query.
"""
type AddressAggregation {
  """
  Provides computed aggregated values over all `Address` documents in an aggregation bucket.
  """
  aggregated_values: AddressAggregatedValues

  """
  The count of `Address` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Address` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: AddressGroupedBy
}

"""
Represents a paginated collection of `AddressAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type AddressAggregationConnection {
  """
  Wraps a specific `AddressAggregation` to pair it with its pagination cursor.
  """
  edges: [AddressAggregationEdge!]!

  """
  The list of `AddressAggregation` results.
  """
  nodes: [AddressAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `AddressAggregation` in the context of a `AddressAggregationConnection`,
providing access to both the `AddressAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type AddressAggregationEdge {
  """
  The `Cursor` of this `AddressAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `AddressAggregation`.
  """
  cursor: Cursor

  """
  The `AddressAggregation` of this edge.
  """
  node: AddressAggregation
}

"""
Represents a paginated collection of `Address` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type AddressConnection {
  """
  Wraps a specific `Address` to pair it with its pagination cursor.
  """
  edges: [AddressEdge!]!

  """
  The list of `Address` results.
  """
  nodes: [Address!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `Address` in the context of a `AddressConnection`,
providing access to both the `Address` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type AddressEdge {
  """
  The `Cursor` of this `Address`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Address`.
  """
  cursor: Cursor

  """
  The `Address` of this edge.
  """
  node: Address
}

"""
Input type used to specify filters on `Address` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input AddressFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AddressFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [AddressFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [AddressFilterInput!]

  """
  Used to filter on the `full_address` field.

  When `null` or an empty object is passed, matches all documents.
  """
  full_address: StringFilterInput

  """
  Used to filter on the `geo_location` field.

  When `null` or an empty object is passed, matches all documents.
  """
  geo_location: GeoLocationFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: AddressFilterInput

  """
  Used to filter on the `timestamps` field.

  When `null` or an empty object is passed, matches all documents.
  """
  timestamps: AddressTimestampsFilterInput
}

"""
Type used to specify the `Address` fields to group by for aggregations.
"""
type AddressGroupedBy {
  """
  The `full_address` field value for this group.
  """
  full_address: String

  """
  The `timestamps` field value for this group.
  """
  timestamps: AddressTimestampsGroupedBy
}

"""
Enumerates the ways `Address`s can be sorted.
"""
enum AddressSortOrderInput {
  """
  Sorts ascending by the `full_address` field.
  """
  full_address_ASC

  """
  Sorts descending by the `full_address` field.
  """
  full_address_DESC

  """
  Sorts ascending by the `timestamps.created_at` field.
  """
  timestamps_created_at_ASC

  """
  Sorts descending by the `timestamps.created_at` field.
  """
  timestamps_created_at_DESC
}

type AddressTimestamps {
  created_at: DateTime
}

"""
Type used to perform aggregation computations on `AddressTimestamps` fields.
"""
type AddressTimestampsAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues
}

"""
Input type used to specify filters on `AddressTimestamps` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input AddressTimestampsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AddressTimestampsFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [AddressTimestampsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [AddressTimestampsFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: AddressTimestampsFilterInput
}

"""
Type used to specify the `AddressTimestamps` fields to group by for aggregations.
"""
type AddressTimestampsGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy
}

type Affiliations {
  sponsorships_nested: [Sponsorship!]!
  sponsorships_object: [Sponsorship!]!
}

"""
Type used to perform aggregation computations on `Affiliations` fields.
"""
type AffiliationsAggregatedValues {
  """
  Computed aggregate values for the `sponsorships_object` field.
  """
  sponsorships_object: SponsorshipAggregatedValues
}

"""
Input type used to specify filters on a `Affiliations` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input AffiliationsFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AffiliationsFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [AffiliationsFieldsListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [AffiliationsFieldsListFilterInput!]

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: AffiliationsFieldsListFilterInput

  """
  Used to filter on the `sponsorships_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsorships_nested: SponsorshipListFilterInput

  """
  Used to filter on the `sponsorships_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsorships_object: SponsorshipFieldsListFilterInput
}

"""
Input type used to specify filters on `Affiliations` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input AffiliationsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AffiliationsFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [AffiliationsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [AffiliationsFilterInput!]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: AffiliationsFilterInput

  """
  Used to filter on the `sponsorships_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsorships_nested: SponsorshipListFilterInput

  """
  Used to filter on the `sponsorships_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsorships_object: SponsorshipFieldsListFilterInput
}

"""
Type used to specify the `Affiliations` fields to group by for aggregations.
"""
type AffiliationsGroupedBy {
  """
  The `sponsorships_object` field value for this group.

  Note: `sponsorships_object` is a collection field, but selecting this field
  will group on individual values of the selected subfields of
  `sponsorships_object`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `sponsorships_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `sponsorships_object` multiple times for a single document, that document will only be included in the group
  once.
  """
  sponsorships_object: SponsorshipGroupedBy
}

"""
Provides detail about an aggregation `count`.
"""
type AggregationCountDetail @shareable {
  """
  The (approximate) count of documents in this aggregation bucket.

  When documents in an aggregation bucket are sourced from multiple shards, the count may be only
  approximate. The `upper_bound` indicates the maximum value of the true count, but usually
  the true count is much closer to this approximate value (which also provides a lower bound on the
  true count).

  When this approximation is known to be exact, the same value will be available from `exact_value`
  and `upper_bound`.
  """
  approximate_value: JsonSafeLong!

  """
  The exact count of documents in this aggregation bucket, if an exact value can be determined.

  When documents in an aggregation bucket are sourced from multiple shards, it may not be possible to
  efficiently determine an exact value. When no exact value can be determined, this field will be `null`.
  The `approximate_value` field--which will never be `null`--can be used to get an approximation
  for the count.
  """
  exact_value: JsonSafeLong

  """
  An upper bound on how large the true count of documents in this aggregation bucket could be.

  When documents in an aggregation bucket are sourced from multiple shards, it may not be possible to
  efficiently determine an exact value. The `approximate_value` field provides an approximation,
  and this field puts an upper bound on the true count.
  """
  upper_bound: JsonSafeLong!
}

"""
Input type used to specify filters on `Boolean` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input BooleanFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `BooleanFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [BooleanFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [BooleanFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Boolean]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: BooleanFilterInput
}

"""
Input type used to specify filters on elements of a `[Boolean]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input BooleanListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `BooleanListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [BooleanListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [BooleanListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Boolean!]
}

"""
Input type used to specify filters on `[Boolean]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input BooleanListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `BooleanListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [BooleanListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [BooleanListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: BooleanListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: BooleanListFilterInput
}

enum Color {
  BLUE
  GREEN
  RED
}

"""
Input type used to specify filters on `Color` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input ColorFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ColorFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ColorFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ColorFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [ColorInput]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: ColorFilterInput
}

enum ColorInput {
  BLUE
  GREEN
  RED
}

"""
Input type used to specify filters on elements of a `[Color]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input ColorListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ColorListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ColorListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ColorListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [ColorInput!]
}

"""
Input type used to specify filters on `[Color]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input ColorListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ColorListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ColorListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ColorListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: ColorListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: ColorListFilterInput
}

type Company implements NamedInventor {
  name: String
  stock_ticker: String
}

type Component implements NamedEntity @key(fields: "id") {
  created_at: DateTime!
  dollar_widget: Widget
  id: ID!
  name: String

  """
  Aggregations over the `parts` data.
  """
  part_aggregations(
    """
    Used to forward-paginate through the `part_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `part_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Part` documents that get aggregated over based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `part_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `part_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `part_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `part_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): PartAggregationConnection
  parts(
    """
    Used to forward-paginate through the `parts`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `parts`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `parts` based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `parts`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `parts`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `parts`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `parts`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `parts` should be sorted.
    """
    order_by: [PartSortOrderInput!]
  ): PartConnection
  position: Position!
  tags: [String!]!
  widget: Widget

  """
  Aggregations over the `widgets` data.
  """
  widget_aggregations(
    """
    Used to forward-paginate through the `widget_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Widget` documents that get aggregated over based on the provided criteria.
    """
    filter: WidgetFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): WidgetAggregationConnection
  widget_cost: Money
  widget_name: String
  widget_size: Size
  widget_tags: [String!]
  widget_workspace_id: ID
  widgets(
    """
    Used to forward-paginate through the `widgets`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widgets`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `widgets` based on the provided criteria.
    """
    filter: WidgetFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widgets`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widgets`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widgets`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widgets`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `widgets` should be sorted.
    """
    order_by: [WidgetSortOrderInput!]
  ): WidgetConnection
}

"""
Type used to perform aggregation computations on `Component` fields.
"""
type ComponentAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `position` field.
  """
  position: PositionAggregatedValues

  """
  Computed aggregate values for the `tags` field.
  """
  tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_cost` field.
  """
  widget_cost: MoneyAggregatedValues

  """
  Computed aggregate values for the `widget_name` field.
  """
  widget_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_size` field.
  """
  widget_size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_tags` field.
  """
  widget_tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_workspace_id` field.
  """
  widget_workspace_id: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Component` documents for an aggregations query.
"""
type ComponentAggregation {
  """
  Provides computed aggregated values over all `Component` documents in an aggregation bucket.
  """
  aggregated_values: ComponentAggregatedValues

  """
  The count of `Component` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Component` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: ComponentGroupedBy
}

"""
Represents a paginated collection of `ComponentAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ComponentAggregationConnection {
  """
  Wraps a specific `ComponentAggregation` to pair it with its pagination cursor.
  """
  edges: [ComponentAggregationEdge!]!

  """
  The list of `ComponentAggregation` results.
  """
  nodes: [ComponentAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `ComponentAggregation` in the context of a `ComponentAggregationConnection`,
providing access to both the `ComponentAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ComponentAggregationEdge {
  """
  The `Cursor` of this `ComponentAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `ComponentAggregation`.
  """
  cursor: Cursor

  """
  The `ComponentAggregation` of this edge.
  """
  node: ComponentAggregation
}

"""
Represents a paginated collection of `Component` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ComponentConnection {
  """
  Wraps a specific `Component` to pair it with its pagination cursor.
  """
  edges: [ComponentEdge!]!

  """
  The list of `Component` results.
  """
  nodes: [Component!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `Component` in the context of a `ComponentConnection`,
providing access to both the `Component` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ComponentEdge {
  """
  The `Cursor` of this `Component`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Component`.
  """
  cursor: Cursor

  """
  The `Component` of this edge.
  """
  node: Component
}

"""
Input type used to specify filters on `Component` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input ComponentFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ComponentFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ComponentFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ComponentFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: ComponentFilterInput

  """
  Used to filter on the `position` field.

  When `null` or an empty object is passed, matches all documents.
  """
  position: PositionFilterInput

  """
  Used to filter on the `tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  tags: StringListFilterInput

  """
  Used to filter on the `widget_cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_cost: MoneyFilterInput

  """
  Used to filter on the `widget_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_name: StringFilterInput

  """
  Used to filter on the `widget_size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_size: SizeFilterInput

  """
  Used to filter on the `widget_tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_tags: StringListFilterInput

  """
  Used to filter on the `widget_workspace_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_workspace_id: IDFilterInput
}

"""
Type used to specify the `Component` fields to group by for aggregations.
"""
type ComponentGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `position` field value for this group.
  """
  position: PositionGroupedBy

  """
  The `widget_cost` field value for this group.
  """
  widget_cost: MoneyGroupedBy

  """
  The `widget_name` field value for this group.
  """
  widget_name: String

  """
  The `widget_size` field value for this group.
  """
  widget_size: Size

  """
  The `widget_workspace_id` field value for this group.
  """
  widget_workspace_id: ID
}

"""
Enumerates the ways `Component`s can be sorted.
"""
enum ComponentSortOrderInput {
  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `position.x` field.
  """
  position_x_ASC

  """
  Sorts descending by the `position.x` field.
  """
  position_x_DESC

  """
  Sorts ascending by the `position.y` field.
  """
  position_y_ASC

  """
  Sorts descending by the `position.y` field.
  """
  position_y_DESC

  """
  Sorts ascending by the `widget_cost.amount_cents` field.
  """
  widget_cost_amount_cents_ASC

  """
  Sorts descending by the `widget_cost.amount_cents` field.
  """
  widget_cost_amount_cents_DESC

  """
  Sorts ascending by the `widget_cost.currency` field.
  """
  widget_cost_currency_ASC

  """
  Sorts descending by the `widget_cost.currency` field.
  """
  widget_cost_currency_DESC

  """
  Sorts ascending by the `widget_name` field.
  """
  widget_name_ASC

  """
  Sorts descending by the `widget_name` field.
  """
  widget_name_DESC

  """
  Sorts ascending by the `widget_size` field.
  """
  widget_size_ASC

  """
  Sorts descending by the `widget_size` field.
  """
  widget_size_DESC

  """
  Sorts ascending by the `widget_workspace_id` field.
  """
  widget_workspace_id_ASC

  """
  Sorts descending by the `widget_workspace_id` field.
  """
  widget_workspace_id_DESC
}

type Country @key(fields: "id") {
  currency: String @external
  id: ID!
  names(
    """
    Used to forward-paginate through the `names`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `names`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used in conjunction with the `after` argument to forward-paginate through the `names`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `names`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `names`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `names`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): StringConnection @external

  """
  Aggregations over the `teams` data.
  """
  team_aggregations(
    """
    Used to forward-paginate through the `team_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `team_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Team` documents that get aggregated over based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `team_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `team_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `team_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `team_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): TeamAggregationConnection
  teams(
    """
    Used to forward-paginate through the `teams`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `teams`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `teams` based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `teams`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `teams`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `teams`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `teams`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `teams` should be sorted.
    """
    order_by: [TeamSortOrderInput!]
  ): TeamConnection
}

type CurrencyDetails {
  symbol: String
  unit: String
}

"""
Type used to perform aggregation computations on `CurrencyDetails` fields.
"""
type CurrencyDetailsAggregatedValues {
  """
  Computed aggregate values for the `symbol` field.
  """
  symbol: NonNumericAggregatedValues

  """
  Computed aggregate values for the `unit` field.
  """
  unit: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `CurrencyDetails` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input CurrencyDetailsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `CurrencyDetailsFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [CurrencyDetailsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [CurrencyDetailsFilterInput!]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: CurrencyDetailsFilterInput

  """
  Used to filter on the `symbol` field.

  When `null` or an empty object is passed, matches all documents.
  """
  symbol: StringFilterInput

  """
  Used to filter on the `unit` field.

  When `null` or an empty object is passed, matches all documents.
  """
  unit: StringFilterInput
}

"""
Type used to specify the `CurrencyDetails` fields to group by for aggregations.
"""
type CurrencyDetailsGroupedBy {
  """
  The `symbol` field value for this group.
  """
  symbol: String

  """
  The `unit` field value for this group.
  """
  unit: String
}

"""
An opaque string value representing a specific location in a paginated connection type.
Returned cursors can be passed back in the next query via the `before` or `after`
arguments to continue paginating from that point.
"""
scalar Cursor

"""
A date, represented as an [ISO 8601 date string](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
A return type used from aggregations to provided aggregated values over `Date` fields.
"""
type DateAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.
  The returned value will be rounded to the nearest `Date` value.
  """
  approximate_avg: Date

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_max: Date

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_min: Date
}

"""
Input type used to specify filters on `Date` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Date]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: Date

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: Date

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: Date

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: Date

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: DateFilterInput
}

"""
Allows for grouping `Date` values based on the desired return type.
"""
type DateGroupedBy @shareable {
  """
  Used when grouping on the full `Date` value.
  """
  as_date(
    """
    Amount of offset (positive or negative) to shift the `Date` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateGroupingOffsetInput

    """
    Determines the grouping truncation unit for this field.
    """
    truncation_unit: DateGroupingTruncationUnitInput!
  ): Date

  """
  An alternative to `as_date` for when grouping on the day-of-week is desired.
  """
  as_day_of_week(
    """
    Amount of offset (positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

    For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
    when they fall between midnight and 2 AM.
    """
    offset: DayOfWeekGroupingOffsetInput
  ): DayOfWeek
}

"""
Input type offered when grouping on `Date` fields, representing the amount of offset
(positive or negative) to shift the `Date` boundaries of each grouping bucket.

For example, when grouping by `WEEK`, you can shift by 1 day to change
what day-of-week weeks are considered to start on.
"""
input DateGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `Date` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `Date` groupings.
  """
  unit: DateUnitInput!
}

"""
Enumerates the supported truncation units of a `Date`.
"""
enum DateGroupingTruncationUnitInput {
  """
  The exact day of a `Date`.
  """
  DAY

  """
  The month a `Date` falls in.
  """
  MONTH

  """
  The quarter a `Date` falls in.
  """
  QUARTER

  """
  The week, beginning on Monday, a `Date` falls in.
  """
  WEEK

  """
  The year a `Date` falls in.
  """
  YEAR
}

"""
Input type used to specify filters on elements of a `[Date]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Date!]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: Date

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: Date

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: Date

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: Date
}

"""
Input type used to specify filters on `[Date]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: DateListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: DateListFilterInput
}

"""
A timestamp, represented as an [ISO 8601 time string](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
A return type used from aggregations to provided aggregated values over `DateTime` fields.
"""
type DateTimeAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.
  The returned value will be rounded to the nearest `DateTime` value.
  """
  approximate_avg: DateTime

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_max: DateTime

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_min: DateTime
}

"""
Input type used to specify filters on `DateTime` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateTimeFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateTimeFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateTimeFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateTimeFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [DateTime]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: DateTime

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: DateTime

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: DateTime

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: DateTime

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: DateTimeFilterInput

  """
  Matches records based on the time-of-day of the `DateTime` values.

  When `null` is passed, matches all documents.
  """
  time_of_day: DateTimeTimeOfDayFilterInput
}

"""
Allows for grouping `DateTime` values based on the desired return type.
"""
type DateTimeGroupedBy @shareable {
  """
  An alternative to `as_date_time` for when grouping on just the date is desired.
  """
  as_date(
    """
    Amount of offset (positive or negative) to shift the `Date` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `Date` value falls in.
    """
    time_zone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncation_unit: DateGroupingTruncationUnitInput!
  ): Date

  """
  Used when grouping on the full `DateTime` value.
  """
  as_date_time(
    """
    Amount of offset (positive or negative) to shift the `DateTime` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateTimeGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `DateTime` value falls in.
    """
    time_zone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncation_unit: DateTimeGroupingTruncationUnitInput!
  ): DateTime

  """
  An alternative to `as_date_time` for when grouping on the day-of-week is desired.
  """
  as_day_of_week(
    """
    Amount of offset (positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

    For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
    when they fall between midnight and 2 AM.
    """
    offset: DayOfWeekGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `DayOfWeek` value falls in.
    """
    time_zone: TimeZone! = "UTC"
  ): DayOfWeek

  """
  An alternative to `as_date_time` for when grouping on just the time-of-day is desired.
  """
  as_time_of_day(
    """
    Amount of offset (positive or negative) to shift the `LocalTime` boundaries of each grouping bucket.

    For example, when grouping by `HOUR`, you can apply an offset of -5 minutes to shift `LocalTime`
    values to the prior hour when they fall between the the top of an hour and 5 after.
    """
    offset: LocalTimeGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `LocalTime` value falls in.
    """
    time_zone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncation_unit: LocalTimeGroupingTruncationUnitInput!
  ): LocalTime
}

"""
Input type offered when grouping on `DateTime` fields, representing the amount of offset
(positive or negative) to shift the `DateTime` boundaries of each grouping bucket.

For example, when grouping by `WEEK`, you can shift by 1 day to change
what day-of-week weeks are considered to start on.
"""
input DateTimeGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `DateTime` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `DateTime` groupings.
  """
  unit: DateTimeUnitInput!
}

"""
Enumerates the supported truncation units of a `DateTime`.
"""
enum DateTimeGroupingTruncationUnitInput {
  """
  The day a `DateTime` falls in.
  """
  DAY

  """
  The hour a `DateTime` falls in.
  """
  HOUR

  """
  The minute a `DateTime` falls in.
  """
  MINUTE

  """
  The month a `DateTime` falls in.
  """
  MONTH

  """
  The quarter a `DateTime` falls in.
  """
  QUARTER

  """
  The second a `DateTime` falls in.
  """
  SECOND

  """
  The week, beginning on Monday, a `DateTime` falls in.
  """
  WEEK

  """
  The year a `DateTime` falls in.
  """
  YEAR
}

"""
Input type used to specify filters on elements of a `[DateTime]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateTimeListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateTimeListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateTimeListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateTimeListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [DateTime!]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: DateTime

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: DateTime

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: DateTime

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: DateTime

  """
  Matches records based on the time-of-day of the `DateTime` values.

  When `null` is passed, matches all documents.
  """
  time_of_day: DateTimeTimeOfDayFilterInput
}

"""
Input type used to specify filters on `[DateTime]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateTimeListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `DateTimeListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [DateTimeListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [DateTimeListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: DateTimeListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: DateTimeListFilterInput
}

"""
Input type used to specify filters on the time-of-day of `DateTime` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input DateTimeTimeOfDayFilterInput {
  """
  Matches records where the time of day of the `DateTime` field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [LocalTime!]

  """
  Matches records where the time of day of the `DateTime` field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: LocalTime

  """
  TimeZone to use when comparing the `DateTime` values against the provided `LocalTime` values.
  """
  time_zone: TimeZone! = "UTC"
}

"""
Enumeration of `DateTime` units.
"""
enum DateTimeUnitInput {
  """
  The time period of a full rotation of the Earth with respect to the Sun.
  """
  DAY

  """
  1/24th of a day.
  """
  HOUR

  """
  1/1000th of a second.
  """
  MILLISECOND

  """
  1/60th of an hour.
  """
  MINUTE

  """
  1/60th of a minute.
  """
  SECOND
}

"""
Enumeration of `Date` units.
"""
enum DateUnitInput {
  """
  The time period of a full rotation of the Earth with respect to the Sun.
  """
  DAY
}

"""
Indicates the specific day of the week.
"""
enum DayOfWeek {
  """
  Friday.
  """
  FRIDAY

  """
  Monday.
  """
  MONDAY

  """
  Saturday.
  """
  SATURDAY

  """
  Sunday.
  """
  SUNDAY

  """
  Thursday.
  """
  THURSDAY

  """
  Tuesday.
  """
  TUESDAY

  """
  Wednesday.
  """
  WEDNESDAY
}

"""
Input type offered when grouping on `DayOfWeek` fields, representing the amount of offset
(positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
when they fall between midnight and 2 AM.
"""
input DayOfWeekGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `DayOfWeek` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `DayOfWeek` groupings.
  """
  unit: DateTimeUnitInput!
}

"""
Enumerates the supported distance units.
"""
enum DistanceUnitInput {
  """
  A metric system unit equal to 1/100th of a meter.
  """
  CENTIMETER

  """
  A United States customary unit of 12 inches.
  """
  FOOT

  """
  A United States customary unit equal to 1/12th of a foot.
  """
  INCH

  """
  A metric system unit equal to 1,000 meters.
  """
  KILOMETER

  """
  The base unit of length in the metric system.
  """
  METER

  """
  A United States customary unit of 5,280 feet.
  """
  MILE

  """
  A metric system unit equal to 1/1,000th of a meter.
  """
  MILLIMETER

  """
  An international unit of length used for air, marine, and space navigation. Equivalent to 1,852 meters.
  """
  NAUTICAL_MILE

  """
  A United States customary unit of 3 feet.
  """
  YARD
}

type ElectricalPart implements NamedEntity @key(fields: "id") {
  """
  Aggregations over the `components` data.
  """
  component_aggregations(
    """
    Used to forward-paginate through the `component_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `component_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Component` documents that get aggregated over based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `component_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `component_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ComponentAggregationConnection
  components(
    """
    Used to forward-paginate through the `components`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `components`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `components` based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `components`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `components`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `components`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `components`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `components` should be sorted.
    """
    order_by: [ComponentSortOrderInput!]
  ): ComponentConnection
  created_at: DateTime!
  id: ID!
  manufacturer: Manufacturer
  name: String
  voltage: Int!
}

"""
Type used to perform aggregation computations on `ElectricalPart` fields.
"""
type ElectricalPartAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `voltage` field.
  """
  voltage: IntAggregatedValues
}

"""
Return type representing a bucket of `ElectricalPart` documents for an aggregations query.
"""
type ElectricalPartAggregation {
  """
  Provides computed aggregated values over all `ElectricalPart` documents in an aggregation bucket.
  """
  aggregated_values: ElectricalPartAggregatedValues

  """
  The count of `ElectricalPart` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `ElectricalPart` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: ElectricalPartGroupedBy
}

"""
Represents a paginated collection of `ElectricalPartAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ElectricalPartAggregationConnection {
  """
  Wraps a specific `ElectricalPartAggregation` to pair it with its pagination cursor.
  """
  edges: [ElectricalPartAggregationEdge!]!

  """
  The list of `ElectricalPartAggregation` results.
  """
  nodes: [ElectricalPartAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `ElectricalPartAggregation` in the context of a `ElectricalPartAggregationConnection`,
providing access to both the `ElectricalPartAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ElectricalPartAggregationEdge {
  """
  The `Cursor` of this `ElectricalPartAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `ElectricalPartAggregation`.
  """
  cursor: Cursor

  """
  The `ElectricalPartAggregation` of this edge.
  """
  node: ElectricalPartAggregation
}

"""
Represents a paginated collection of `ElectricalPart` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ElectricalPartConnection {
  """
  Wraps a specific `ElectricalPart` to pair it with its pagination cursor.
  """
  edges: [ElectricalPartEdge!]!

  """
  The list of `ElectricalPart` results.
  """
  nodes: [ElectricalPart!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `ElectricalPart` in the context of a `ElectricalPartConnection`,
providing access to both the `ElectricalPart` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ElectricalPartEdge {
  """
  The `Cursor` of this `ElectricalPart`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `ElectricalPart`.
  """
  cursor: Cursor

  """
  The `ElectricalPart` of this edge.
  """
  node: ElectricalPart
}

"""
Input type used to specify filters on `ElectricalPart` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input ElectricalPartFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ElectricalPartFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ElectricalPartFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ElectricalPartFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: ElectricalPartFilterInput

  """
  Used to filter on the `voltage` field.

  When `null` or an empty object is passed, matches all documents.
  """
  voltage: IntFilterInput
}

"""
Type used to specify the `ElectricalPart` fields to group by for aggregations.
"""
type ElectricalPartGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `voltage` field value for this group.
  """
  voltage: Int
}

"""
Enumerates the ways `ElectricalPart`s can be sorted.
"""
enum ElectricalPartSortOrderInput {
  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `voltage` field.
  """
  voltage_ASC

  """
  Sorts descending by the `voltage` field.
  """
  voltage_DESC
}

"""
A custom scalar type required by the [Apollo Federation subgraph
spec](https://www.apollographql.com/docs/federation/subgraph-spec/#scalar-fieldset):

> This string-serialized scalar represents a set of fields that's passed to a federated directive,
> such as `@key`, `@requires`, or `@provides`.
>
> Grammatically, a `FieldSet` is a [selection set](http://spec.graphql.org/draft/#sec-Selection-Sets)
> minus the outermost curly braces. It can represent a single field (`"upc"`), multiple fields
> (`"id countryCode"`), and even nested selection sets (`"id organization { id }"`).

Not intended for use by clients other than Apollo.
"""
scalar FieldSet

"""
A return type used from aggregations to provided aggregated values over `Float` fields.
"""
type FloatAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.

  The computation of this value may introduce additional imprecision (on top of the
  natural imprecision of floats) when it deals with intermediary values that are
  outside the `JsonSafeLong` range (-9,007,199,254,740,991 to 9,007,199,254,740,991).
  """
  approximate_avg: Float

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The sum of the field values within this grouping.

  As with all double-precision `Float` values, operations are subject to floating-point loss
  of precision, so the value may be approximate.
  """
  approximate_sum: Float!

  """
  The maximum of the field values within this grouping.

  The value will be "exact" in that the aggregation computation will return
  the exact value of the largest float that has been indexed, without
  introducing any new imprecision. However, floats by their nature are
  naturally imprecise since they cannot precisely represent all real numbers.
  """
  exact_max: Float

  """
  The minimum of the field values within this grouping.

  The value will be "exact" in that the aggregation computation will return
  the exact value of the smallest float that has been indexed, without
  introducing any new imprecision. However, floats by their nature are
  naturally imprecise since they cannot precisely represent all real numbers.
  """
  exact_min: Float
}

"""
Input type used to specify filters on `Float` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input FloatFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `FloatFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [FloatFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [FloatFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Float]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: Float

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: Float

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: Float

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: Float

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: FloatFilterInput
}

"""
Geographic coordinates representing a location on the Earth's surface.
"""
type GeoLocation @shareable {
  """
  Angular distance north or south of the Earth's equator, measured in degrees from -90 to +90.
  """
  latitude: Float

  """
  Angular distance east or west of the Prime Meridian at Greenwich, UK, measured in degrees from -180 to +180.
  """
  longitude: Float
}

"""
Input type used to specify distance filtering parameters on `GeoLocation` fields.
"""
input GeoLocationDistanceFilterInput {
  """
  Angular distance north or south of the Earth's equator, measured in degrees from -90 to +90.
  """
  latitude: Float!

  """
  Angular distance east or west of the Prime Meridian at Greenwich, UK, measured in degrees from -180 to +180.
  """
  longitude: Float!

  """
  Maximum distance (of the provided `unit`) to consider "near" the location identified
  by `latitude` and `longitude`.
  """
  max_distance: Float!

  """
  Determines the unit of the specified `max_distance`.
  """
  unit: DistanceUnitInput!
}

"""
Input type used to specify filters on `GeoLocation` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input GeoLocationFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `GeoLocationFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [GeoLocationFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [GeoLocationFilterInput!]

  """
  Matches records where the field's geographic location is within a specified distance from the
  location identified by `latitude` and `longitude`.

  When `null` or an empty object is passed, matches all documents.
  """
  near: GeoLocationDistanceFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: GeoLocationFilterInput
}

type GeoShape {
  coordinates: [Float!]!
  type: String
}

"""
Input type used to specify filters on `ID` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input IDFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IDFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IDFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IDFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [ID]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: IDFilterInput
}

"""
Input type used to specify filters on elements of a `[ID]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input IDListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IDListElementFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IDListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IDListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [ID!]
}

"""
Input type used to specify filters on `[ID]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input IDListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IDListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IDListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IDListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: IDListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: IDListFilterInput
}

"""
A return type used from aggregations to provided aggregated values over `Int` fields.
"""
type IntAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.

  Note that the returned value is approximate. Imprecision can be introduced by the computation if
  any intermediary values fall outside the `JsonSafeLong` range (-9,007,199,254,740,991
  to 9,007,199,254,740,991).
  """
  approximate_avg: Float

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The (approximate) sum of the field values within this grouping.

  Sums of large `Int` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong` return value. This field, as a double-precision `Float`, can
  represent larger sums, but the value may only be approximate.
  """
  approximate_sum: Float!

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_max: Int

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_min: Int

  """
  The exact sum of the field values within this grouping, if it fits in a `JsonSafeLong`.

  Sums of large `Int` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong`. In that case, `null` will be returned, and `approximate_sum`
  can be used to get an approximate value.
  """
  exact_sum: JsonSafeLong
}

"""
Input type used to specify filters on `Int` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input IntFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IntFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IntFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IntFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Int]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: Int

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: Int

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: Int

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: Int

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: IntFilterInput
}

"""
Input type used to specify filters on elements of a `[Int]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input IntListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IntListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IntListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IntListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Int!]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: Int

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: Int

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: Int

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: Int
}

"""
Input type used to specify filters on `[Int]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input IntListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `IntListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [IntListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [IntListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: IntListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: IntListFilterInput
}

union Inventor = Company | Person

"""
Type used to perform aggregation computations on `Inventor` fields.
"""
type InventorAggregatedValues {
  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `nationality` field.
  """
  nationality: NonNumericAggregatedValues

  """
  Computed aggregate values for the `stock_ticker` field.
  """
  stock_ticker: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `Inventor` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input InventorFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `InventorFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [InventorFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [InventorFilterInput!]

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `nationality` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nationality: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: InventorFilterInput

  """
  Used to filter on the `stock_ticker` field.

  When `null` or an empty object is passed, matches all documents.
  """
  stock_ticker: StringFilterInput
}

"""
Type used to specify the `Inventor` fields to group by for aggregations.
"""
type InventorGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String

  """
  The `nationality` field value for this group.
  """
  nationality: String

  """
  The `stock_ticker` field value for this group.
  """
  stock_ticker: String
}

"""
A numeric type for large integer values that can serialize safely as JSON.

While JSON itself has no hard limit on the size of integers, the RFC-7159 spec
mentions that values outside of the range -9,007,199,254,740,991 (-(2^53) + 1)
to 9,007,199,254,740,991 (2^53 - 1) may not be interopable with all JSON
implementations. As it turns out, the number implementation used by JavaScript
has this issue. When you parse a JSON string that contains a numeric value like
`4693522397653681111`, the parsed result will contain a rounded value like
`4693522397653681000`.

While this is entirely a client-side problem, we want to preserve maximum compatibility
with common client languages. Given the ubiquity of GraphiQL as a GraphQL client,
we want to avoid this problem.

Our solution is to support two separate types:

- This type (`JsonSafeLong`) is serialized as a number, but limits values to the safely
  serializable range.
- The `LongString` type supports long values that use all 64 bits, but serializes as a
  string rather than a number, avoiding the JavaScript compatibility problems.

For more background, see the [JavaScript `Number.MAX_SAFE_INTEGER`
docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER).
"""
scalar JsonSafeLong

"""
A return type used from aggregations to provided aggregated values over `JsonSafeLong` fields.
"""
type JsonSafeLongAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.

  Note that the returned value is approximate. Imprecision can be introduced by the computation if
  any intermediary values fall outside the `JsonSafeLong` range (-9,007,199,254,740,991
  to 9,007,199,254,740,991).
  """
  approximate_avg: Float

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The (approximate) sum of the field values within this grouping.

  Sums of large `JsonSafeLong` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong` return value. This field, as a double-precision `Float`, can
  represent larger sums, but the value may only be approximate.
  """
  approximate_sum: Float!

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_max: JsonSafeLong

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_min: JsonSafeLong

  """
  The exact sum of the field values within this grouping, if it fits in a `JsonSafeLong`.

  Sums of large `JsonSafeLong` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong`. In that case, `null` will be returned, and `approximate_sum`
  can be used to get an approximate value.
  """
  exact_sum: JsonSafeLong
}

"""
Input type used to specify filters on `JsonSafeLong` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input JsonSafeLongFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `JsonSafeLongFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [JsonSafeLongFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [JsonSafeLongFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [JsonSafeLong]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: JsonSafeLong

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: JsonSafeLong

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: JsonSafeLong

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: JsonSafeLong

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: JsonSafeLongFilterInput
}

"""
Input type used to specify filters on elements of a `[JsonSafeLong]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input JsonSafeLongListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `JsonSafeLongListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [JsonSafeLongListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [JsonSafeLongListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [JsonSafeLong!]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: JsonSafeLong

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: JsonSafeLong

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: JsonSafeLong

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: JsonSafeLong
}

"""
Input type used to specify filters on `[JsonSafeLong]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input JsonSafeLongListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `JsonSafeLongListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [JsonSafeLongListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [JsonSafeLongListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: JsonSafeLongListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: JsonSafeLongListFilterInput
}

"""
A local time such as `"23:59:33"` or `"07:20:47.454"` without a time zone or offset, formatted based on the
[partial-time portion of RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
"""
scalar LocalTime

"""
A return type used from aggregations to provided aggregated values over `LocalTime` fields.
"""
type LocalTimeAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.
  The returned value will be rounded to the nearest `LocalTime` value.
  """
  approximate_avg: LocalTime

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_max: LocalTime

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exact_min: LocalTime
}

"""
Input type used to specify filters on `LocalTime` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input LocalTimeFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `LocalTimeFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [LocalTimeFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [LocalTimeFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [LocalTime]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: LocalTime

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: LocalTime

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: LocalTime

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: LocalTime

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: LocalTimeFilterInput
}

"""
Input type offered when grouping on `LocalTime` fields, representing the amount of offset
(positive or negative) to shift the `LocalTime` boundaries of each grouping bucket.

For example, when grouping by `HOUR`, you can shift by 30 minutes to change
what minute-of-hour hours are considered to start on.
"""
input LocalTimeGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `LocalTime` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `LocalTime` groupings.
  """
  unit: LocalTimeUnitInput!
}

"""
Enumerates the supported truncation units of a `LocalTime`.
"""
enum LocalTimeGroupingTruncationUnitInput {
  """
  The hour a `LocalTime` falls in.
  """
  HOUR

  """
  The minute a `LocalTime` falls in.
  """
  MINUTE

  """
  The second a `LocalTime` falls in.
  """
  SECOND
}

"""
Enumeration of `LocalTime` units.
"""
enum LocalTimeUnitInput {
  """
  1/24th of a day.
  """
  HOUR

  """
  1/1000th of a second.
  """
  MILLISECOND

  """
  1/60th of an hour.
  """
  MINUTE

  """
  1/60th of a minute.
  """
  SECOND
}

"""
A numeric type for large integer values in the inclusive range -2^63
(-9,223,372,036,854,775,808) to (2^63 - 1) (9,223,372,036,854,775,807).

Note that `LongString` values are serialized as strings within JSON, to avoid
interopability problems with JavaScript. If you want a large integer type that
serializes within JSON as a number, use `JsonSafeLong`.
"""
scalar LongString

"""
A return type used from aggregations to provided aggregated values over `LongString` fields.
"""
type LongStringAggregatedValues @shareable {
  """
  The average (mean) of the field values within this grouping.

  Note that the returned value is approximate. Imprecision can be introduced by the computation if
  any intermediary values fall outside the `JsonSafeLong` range (-9,007,199,254,740,991
  to 9,007,199,254,740,991).
  """
  approximate_avg: Float

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  The aggregation computation performed to identify the largest value is not able
  to maintain exact precision when dealing with values that are outside the `JsonSafeLong`
  range (-9,007,199,254,740,991 to 9,007,199,254,740,991).
  In that case, the `exact_max` field will return `null`, but this field will provide
  a value which may be approximate.
  """
  approximate_max: LongString

  """
  The minimum of the field values within this grouping.

  The aggregation computation performed to identify the smallest value is not able
  to maintain exact precision when dealing with values that are outside the `JsonSafeLong`
  range (-9,007,199,254,740,991 to 9,007,199,254,740,991).
  In that case, the `exact_min` field will return `null`, but this field will provide
  a value which may be approximate.
  """
  approximate_min: LongString

  """
  The (approximate) sum of the field values within this grouping.

  Sums of large `LongString` values can result in overflow, where the exact sum cannot
  fit in a `LongString` return value. This field, as a double-precision `Float`, can
  represent larger sums, but the value may only be approximate.
  """
  approximate_sum: Float!

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value, and no values exceed the
  `JsonSafeLong` range in the underlying indexed field, this will return an exact non-null value.

  If no non-null values are available, or if the maximum value is outside the `JsonSafeLong`
  range, `null` will be returned. `approximate_max` can be used to differentiate between these
  cases and to get an approximate value.
  """
  exact_max: JsonSafeLong

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value, and no values exceed the
  `JsonSafeLong` range in the underlying indexed field, this will return an exact non-null value.

  If no non-null values are available, or if the minimum value is outside the `JsonSafeLong`
  range, `null` will be returned. `approximate_min` can be used to differentiate between these
  cases and to get an approximate value.
  """
  exact_min: JsonSafeLong

  """
  The exact sum of the field values within this grouping, if it fits in a `JsonSafeLong`.

  Sums of large `LongString` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong`. In that case, `null` will be returned, and `approximate_sum`
  can be used to get an approximate value.
  """
  exact_sum: JsonSafeLong
}

"""
Input type used to specify filters on `LongString` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input LongStringFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `LongStringFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [LongStringFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [LongStringFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [LongString]

  """
  Matches records where the field value is greater than (>) the provided value.

  When `null` is passed, matches all documents.
  """
  gt: LongString

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  When `null` is passed, matches all documents.
  """
  gte: LongString

  """
  Matches records where the field value is less than (<) the provided value.

  When `null` is passed, matches all documents.
  """
  lt: LongString

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  When `null` is passed, matches all documents.
  """
  lte: LongString

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: LongStringFilterInput
}

type Manufacturer implements NamedEntity @key(fields: "id") {
  address: Address
  created_at: DateTime!
  id: ID!

  """
  Aggregations over the `manufactured_parts` data.
  """
  manufactured_part_aggregations(
    """
    Used to forward-paginate through the `manufactured_part_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `manufactured_part_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Part` documents that get aggregated over based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `manufactured_part_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `manufactured_part_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `manufactured_part_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `manufactured_part_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): PartAggregationConnection
  manufactured_parts(
    """
    Used to forward-paginate through the `manufactured_parts`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `manufactured_parts`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `manufactured_parts` based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `manufactured_parts`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `manufactured_parts`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `manufactured_parts`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `manufactured_parts`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `manufactured_parts` should be sorted.
    """
    order_by: [PartSortOrderInput!]
  ): PartConnection
  name: String
}

"""
Type used to perform aggregation computations on `Manufacturer` fields.
"""
type ManufacturerAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Manufacturer` documents for an aggregations query.
"""
type ManufacturerAggregation {
  """
  Provides computed aggregated values over all `Manufacturer` documents in an aggregation bucket.
  """
  aggregated_values: ManufacturerAggregatedValues

  """
  The count of `Manufacturer` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Manufacturer` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: ManufacturerGroupedBy
}

"""
Represents a paginated collection of `ManufacturerAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ManufacturerAggregationConnection {
  """
  Wraps a specific `ManufacturerAggregation` to pair it with its pagination cursor.
  """
  edges: [ManufacturerAggregationEdge!]!

  """
  The list of `ManufacturerAggregation` results.
  """
  nodes: [ManufacturerAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `ManufacturerAggregation` in the context of a `ManufacturerAggregationConnection`,
providing access to both the `ManufacturerAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ManufacturerAggregationEdge {
  """
  The `Cursor` of this `ManufacturerAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `ManufacturerAggregation`.
  """
  cursor: Cursor

  """
  The `ManufacturerAggregation` of this edge.
  """
  node: ManufacturerAggregation
}

"""
Represents a paginated collection of `Manufacturer` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ManufacturerConnection {
  """
  Wraps a specific `Manufacturer` to pair it with its pagination cursor.
  """
  edges: [ManufacturerEdge!]!

  """
  The list of `Manufacturer` results.
  """
  nodes: [Manufacturer!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `Manufacturer` in the context of a `ManufacturerConnection`,
providing access to both the `Manufacturer` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ManufacturerEdge {
  """
  The `Cursor` of this `Manufacturer`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Manufacturer`.
  """
  cursor: Cursor

  """
  The `Manufacturer` of this edge.
  """
  node: Manufacturer
}

"""
Input type used to specify filters on `Manufacturer` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input ManufacturerFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ManufacturerFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [ManufacturerFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [ManufacturerFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: ManufacturerFilterInput
}

"""
Type used to specify the `Manufacturer` fields to group by for aggregations.
"""
type ManufacturerGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `name` field value for this group.
  """
  name: String
}

"""
Enumerates the ways `Manufacturer`s can be sorted.
"""
enum ManufacturerSortOrderInput {
  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC
}

"""
Input type used to specify parameters for the `matches_phrase` filtering operator.

When `null` is passed, matches all documents.
"""
input MatchesPhraseFilterInput {
  """
  The input phrase to search for.
  """
  phrase: String!
}

"""
Enumeration of allowed values for the `matches_query: {allowed_edits_per_term: ...}` filter option.
"""
enum MatchesQueryAllowedEditsPerTermInput {
  """
  Allowed edits per term is dynamically chosen based on the length of the term.
  """
  DYNAMIC

  """
  No allowed edits per term.
  """
  NONE

  """
  One allowed edit per term.
  """
  ONE

  """
  Two allowed edits per term.
  """
  TWO
}

"""
Input type used to specify parameters for the `matches_query` filtering operator.

When `null` is passed, matches all documents.
"""
input MatchesQueryFilterInput {
  """
  Number of allowed modifications per term to arrive at a match. For example, if set to 'ONE', the input
  term 'glue' would match 'blue' but not 'clued', since the latter requires two modifications.
  """
  allowed_edits_per_term: MatchesQueryAllowedEditsPerTermInput! = DYNAMIC

  """
  The input query to search for.
  """
  query: String!

  """
  Set to `true` to match only if all terms in `query` are found, or
  `false` to only require one term to be found.
  """
  require_all_terms: Boolean! = false
}

enum Material {
  ALLOY
  CARBON_FIBER
}

"""
Input type used to specify filters on `Material` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input MaterialFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `MaterialFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [MaterialFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [MaterialFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [MaterialInput]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: MaterialFilterInput
}

enum MaterialInput {
  ALLOY
  CARBON_FIBER
}

type MechanicalPart implements NamedEntity @key(fields: "id") {
  """
  Aggregations over the `components` data.
  """
  component_aggregations(
    """
    Used to forward-paginate through the `component_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `component_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Component` documents that get aggregated over based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `component_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `component_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ComponentAggregationConnection
  components(
    """
    Used to forward-paginate through the `components`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `components`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `components` based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `components`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `components`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `components`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `components`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `components` should be sorted.
    """
    order_by: [ComponentSortOrderInput!]
  ): ComponentConnection
  created_at: DateTime!
  id: ID!
  manufacturer: Manufacturer
  material: Material
  name: String
}

"""
Type used to perform aggregation computations on `MechanicalPart` fields.
"""
type MechanicalPartAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `material` field.
  """
  material: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `MechanicalPart` documents for an aggregations query.
"""
type MechanicalPartAggregation {
  """
  Provides computed aggregated values over all `MechanicalPart` documents in an aggregation bucket.
  """
  aggregated_values: MechanicalPartAggregatedValues

  """
  The count of `MechanicalPart` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `MechanicalPart` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: MechanicalPartGroupedBy
}

"""
Represents a paginated collection of `MechanicalPartAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type MechanicalPartAggregationConnection {
  """
  Wraps a specific `MechanicalPartAggregation` to pair it with its pagination cursor.
  """
  edges: [MechanicalPartAggregationEdge!]!

  """
  The list of `MechanicalPartAggregation` results.
  """
  nodes: [MechanicalPartAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `MechanicalPartAggregation` in the context of a `MechanicalPartAggregationConnection`,
providing access to both the `MechanicalPartAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type MechanicalPartAggregationEdge {
  """
  The `Cursor` of this `MechanicalPartAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `MechanicalPartAggregation`.
  """
  cursor: Cursor

  """
  The `MechanicalPartAggregation` of this edge.
  """
  node: MechanicalPartAggregation
}

"""
Represents a paginated collection of `MechanicalPart` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type MechanicalPartConnection {
  """
  Wraps a specific `MechanicalPart` to pair it with its pagination cursor.
  """
  edges: [MechanicalPartEdge!]!

  """
  The list of `MechanicalPart` results.
  """
  nodes: [MechanicalPart!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `MechanicalPart` in the context of a `MechanicalPartConnection`,
providing access to both the `MechanicalPart` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type MechanicalPartEdge {
  """
  The `Cursor` of this `MechanicalPart`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `MechanicalPart`.
  """
  cursor: Cursor

  """
  The `MechanicalPart` of this edge.
  """
  node: MechanicalPart
}

"""
Input type used to specify filters on `MechanicalPart` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input MechanicalPartFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `MechanicalPartFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [MechanicalPartFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [MechanicalPartFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `material` field.

  When `null` or an empty object is passed, matches all documents.
  """
  material: MaterialFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: MechanicalPartFilterInput
}

"""
Type used to specify the `MechanicalPart` fields to group by for aggregations.
"""
type MechanicalPartGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `material` field value for this group.
  """
  material: Material

  """
  The `name` field value for this group.
  """
  name: String
}

"""
Enumerates the ways `MechanicalPart`s can be sorted.
"""
enum MechanicalPartSortOrderInput {
  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `material` field.
  """
  material_ASC

  """
  Sorts descending by the `material` field.
  """
  material_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC
}

type Money {
  amount_cents: Int
  currency: String!
}

"""
Type used to perform aggregation computations on `Money` fields.
"""
type MoneyAggregatedValues {
  """
  Computed aggregate values for the `amount_cents` field.
  """
  amount_cents: IntAggregatedValues

  """
  Computed aggregate values for the `currency` field.
  """
  currency: NonNumericAggregatedValues
}

"""
Input type used to specify filters on a `Money` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input MoneyFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `MoneyFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [MoneyFieldsListFilterInput!]

  """
  Used to filter on the `amount_cents` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents: IntListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [MoneyFieldsListFilterInput!]

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Used to filter on the `currency` field.

  When `null` or an empty object is passed, matches all documents.
  """
  currency: StringListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: MoneyFieldsListFilterInput
}

"""
Input type used to specify filters on `Money` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input MoneyFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `MoneyFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [MoneyFilterInput!]

  """
  Used to filter on the `amount_cents` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents: IntFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [MoneyFilterInput!]

  """
  Used to filter on the `currency` field.

  When `null` or an empty object is passed, matches all documents.
  """
  currency: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: MoneyFilterInput
}

"""
Type used to specify the `Money` fields to group by for aggregations.
"""
type MoneyGroupedBy {
  """
  The `amount_cents` field value for this group.
  """
  amount_cents: Int

  """
  The `currency` field value for this group.
  """
  currency: String
}

"""
Input type used to specify filters on `[Money]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input MoneyListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `MoneyListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [MoneyListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [MoneyListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: MoneyFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: MoneyListFilterInput
}

interface NamedEntity {
  id: ID!
  name: String
}

"""
Type used to perform aggregation computations on `NamedEntity` fields.
"""
type NamedEntityAggregatedValues {
  """
  Computed aggregate values for the `amount_cents` field.
  """
  amount_cents: IntAggregatedValues

  """
  Computed aggregate values for the `amount_cents2` field.
  """
  amount_cents2: IntAggregatedValues

  """
  Computed aggregate values for the `amounts` field.
  """
  amounts: IntAggregatedValues

  """
  Computed aggregate values for the `cost` field.
  """
  cost: MoneyAggregatedValues

  """
  Computed aggregate values for the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on: DateAggregatedValues

  """
  Computed aggregate values for the `cost_currency_name` field.
  """
  cost_currency_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_symbol` field.
  """
  cost_currency_symbol: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_unit` field.
  """
  cost_currency_unit: NonNumericAggregatedValues

  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at2` field.
  """
  created_at2: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at_time_of_day` field.
  """
  created_at_time_of_day: LocalTimeAggregatedValues

  """
  Computed aggregate values for the `created_on` field.
  """
  created_on: DateAggregatedValues

  """
  Computed aggregate values for the `fees` field.
  """
  fees: MoneyAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `inventor` field.
  """
  inventor: InventorAggregatedValues

  """
  Computed aggregate values for the `material` field.
  """
  material: NonNumericAggregatedValues

  """
  Computed aggregate values for the `metadata` field.
  """
  metadata: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `named_inventor` field.
  """
  named_inventor: NamedInventorAggregatedValues

  """
  Computed aggregate values for the `options` field.
  """
  options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `position` field.
  """
  position: PositionAggregatedValues

  """
  Computed aggregate values for the `release_dates` field.
  """
  release_dates: DateAggregatedValues

  """
  Computed aggregate values for the `release_timestamps` field.
  """
  release_timestamps: DateTimeAggregatedValues

  """
  Computed aggregate values for the `size` field.
  """
  size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `tags` field.
  """
  tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `the_options` field.
  """
  the_options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `voltage` field.
  """
  voltage: IntAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng` field.
  """
  weight_in_ng: JsonSafeLongAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng_str` field.
  """
  weight_in_ng_str: LongStringAggregatedValues

  """
  Computed aggregate values for the `widget_cost` field.
  """
  widget_cost: MoneyAggregatedValues

  """
  Computed aggregate values for the `widget_name` field.
  """
  widget_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_size` field.
  """
  widget_size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_tags` field.
  """
  widget_tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_workspace_id` field.
  """
  widget_workspace_id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `workspace_id` field.
  """
  workspace_id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `workspace_name` field.
  """
  workspace_name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `NamedEntity` documents for an aggregations query.
"""
type NamedEntityAggregation {
  """
  Provides computed aggregated values over all `NamedEntity` documents in an aggregation bucket.
  """
  aggregated_values: NamedEntityAggregatedValues

  """
  The count of `NamedEntity` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `NamedEntity` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: NamedEntityGroupedBy
}

"""
Represents a paginated collection of `NamedEntityAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type NamedEntityAggregationConnection {
  """
  Wraps a specific `NamedEntityAggregation` to pair it with its pagination cursor.
  """
  edges: [NamedEntityAggregationEdge!]!

  """
  The list of `NamedEntityAggregation` results.
  """
  nodes: [NamedEntityAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `NamedEntityAggregation` in the context of a `NamedEntityAggregationConnection`,
providing access to both the `NamedEntityAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type NamedEntityAggregationEdge {
  """
  The `Cursor` of this `NamedEntityAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `NamedEntityAggregation`.
  """
  cursor: Cursor

  """
  The `NamedEntityAggregation` of this edge.
  """
  node: NamedEntityAggregation
}

"""
Represents a paginated collection of `NamedEntity` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type NamedEntityConnection {
  """
  Wraps a specific `NamedEntity` to pair it with its pagination cursor.
  """
  edges: [NamedEntityEdge!]!

  """
  The list of `NamedEntity` results.
  """
  nodes: [NamedEntity!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `NamedEntity` in the context of a `NamedEntityConnection`,
providing access to both the `NamedEntity` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type NamedEntityEdge {
  """
  The `Cursor` of this `NamedEntity`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `NamedEntity`.
  """
  cursor: Cursor

  """
  The `NamedEntity` of this edge.
  """
  node: NamedEntity
}

"""
Input type used to specify filters on `NamedEntity` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input NamedEntityFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `NamedEntityFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [NamedEntityFilterInput!]

  """
  Used to filter on the `amount_cents` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents: IntFilterInput

  """
  Used to filter on the `amount_cents2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents2: IntFilterInput

  """
  Used to filter on the `amounts` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amounts: IntListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [NamedEntityFilterInput!]

  """
  Used to filter on the `cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost: MoneyFilterInput

  """
  Used to filter on the `cost_currency_introduced_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_introduced_on: DateFilterInput

  """
  Used to filter on the `cost_currency_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_name: StringFilterInput

  """
  Used to filter on the `cost_currency_primary_continent` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_primary_continent: StringFilterInput

  """
  Used to filter on the `cost_currency_symbol` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_symbol: StringFilterInput

  """
  Used to filter on the `cost_currency_unit` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_unit: StringFilterInput

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `created_at2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at2: DateTimeFilterInput

  """
  Used to filter on the `created_at_time_of_day` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at_time_of_day: LocalTimeFilterInput

  """
  Used to filter on the `created_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_on: DateFilterInput

  """
  Used to filter on the `fees` field.

  When `null` or an empty object is passed, matches all documents.
  """
  fees: MoneyFieldsListFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  inventor: InventorFilterInput

  """
  Used to filter on the `material` field.

  When `null` or an empty object is passed, matches all documents.
  """
  material: MaterialFilterInput

  """
  Used to filter on the `metadata` field.

  When `null` or an empty object is passed, matches all documents.
  """
  metadata: UntypedFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `name_text` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name_text: TextFilterInput

  """
  Used to filter on the `named_inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  named_inventor: NamedInventorFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: NamedEntityFilterInput

  """
  Used to filter on the `options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  options: WidgetOptionsFilterInput

  """
  Used to filter on the `position` field.

  When `null` or an empty object is passed, matches all documents.
  """
  position: PositionFilterInput

  """
  Used to filter on the `release_dates` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_dates: DateListFilterInput

  """
  Used to filter on the `release_timestamps` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_timestamps: DateTimeListFilterInput

  """
  Used to filter on the `size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  size: SizeFilterInput

  """
  Used to filter on the `tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  tags: StringListFilterInput

  """
  Used to filter on the `the_options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  the_options: WidgetOptionsFilterInput

  """
  Used to filter on the `voltage` field.

  When `null` or an empty object is passed, matches all documents.
  """
  voltage: IntFilterInput

  """
  Used to filter on the `weight_in_ng` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng: JsonSafeLongFilterInput

  """
  Used to filter on the `weight_in_ng_str` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng_str: LongStringFilterInput

  """
  Used to filter on the `widget_cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_cost: MoneyFilterInput

  """
  Used to filter on the `widget_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_name: StringFilterInput

  """
  Used to filter on the `widget_size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_size: SizeFilterInput

  """
  Used to filter on the `widget_tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_tags: StringListFilterInput

  """
  Used to filter on the `widget_workspace_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_workspace_id: IDFilterInput

  """
  Used to filter on the `workspace_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_id: IDFilterInput

  """
  Used to filter on the `workspace_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_name: StringFilterInput
}

"""
Type used to specify the `NamedEntity` fields to group by for aggregations.
"""
type NamedEntityGroupedBy {
  """
  The `amount_cents` field value for this group.
  """
  amount_cents: Int

  """
  The `amount_cents2` field value for this group.
  """
  amount_cents2: Int

  """
  The `cost` field value for this group.
  """
  cost: MoneyGroupedBy

  """
  Offers the different grouping options for the `cost_currency_introduced_on` value within this group.
  """
  cost_currency_introduced_on: DateGroupedBy

  """
  The `cost_currency_name` field value for this group.
  """
  cost_currency_name: String

  """
  The `cost_currency_primary_continent` field value for this group.
  """
  cost_currency_primary_continent: String

  """
  The `cost_currency_symbol` field value for this group.
  """
  cost_currency_symbol: String

  """
  The `cost_currency_unit` field value for this group.
  """
  cost_currency_unit: String

  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  Offers the different grouping options for the `created_at2` value within this group.
  """
  created_at2: DateTimeGroupedBy

  """
  The `created_at_time_of_day` field value for this group.
  """
  created_at_time_of_day: LocalTime

  """
  Offers the different grouping options for the `created_on` value within this group.
  """
  created_on: DateGroupedBy

  """
  The `fees` field value for this group.

  Note: `fees` is a collection field, but selecting this field will group on
  individual values of the selected subfields of `fees`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `fees`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `fees` multiple times for a single document, that document will only be included in the group
  once.
  """
  fees: MoneyGroupedBy

  """
  The `inventor` field value for this group.
  """
  inventor: InventorGroupedBy

  """
  The `material` field value for this group.
  """
  material: Material

  """
  The `metadata` field value for this group.
  """
  metadata: Untyped

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `named_inventor` field value for this group.
  """
  named_inventor: NamedInventorGroupedBy

  """
  The `options` field value for this group.
  """
  options: WidgetOptionsGroupedBy

  """
  The `position` field value for this group.
  """
  position: PositionGroupedBy

  """
  The individual value from `release_dates` for this group.

  Note: `release_dates` is a collection field, but selecting this field will group on individual values of `release_dates`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_dates`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_dates` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_date: DateGroupedBy

  """
  The individual value from `release_timestamps` for this group.

  Note: `release_timestamps` is a collection field, but selecting this field
  will group on individual values of `release_timestamps`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_timestamps`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_timestamps` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_timestamp: DateTimeGroupedBy

  """
  The `size` field value for this group.
  """
  size: Size

  """
  The individual value from `tags` for this group.

  Note: `tags` is a collection field, but selecting this field will group on individual values of `tags`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `tags`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `tags` multiple times for a single document, that document will only be included in the group
  once.
  """
  tag: String

  """
  The `the_options` field value for this group.
  """
  the_options: WidgetOptionsGroupedBy

  """
  The `voltage` field value for this group.
  """
  voltage: Int

  """
  The `weight_in_ng` field value for this group.
  """
  weight_in_ng: JsonSafeLong

  """
  The `weight_in_ng_str` field value for this group.
  """
  weight_in_ng_str: LongString

  """
  The `widget_cost` field value for this group.
  """
  widget_cost: MoneyGroupedBy

  """
  The `widget_name` field value for this group.
  """
  widget_name: String

  """
  The `widget_size` field value for this group.
  """
  widget_size: Size

  """
  The `widget_workspace_id` field value for this group.
  """
  widget_workspace_id: ID

  """
  The `workspace_id` field value for this group.
  """
  workspace_id: ID

  """
  The `workspace_name` field value for this group.
  """
  workspace_name: String
}

"""
Enumerates the ways `NamedEntity`s can be sorted.
"""
enum NamedEntitySortOrderInput {
  """
  Sorts ascending by the `amount_cents2` field.
  """
  amount_cents2_ASC

  """
  Sorts descending by the `amount_cents2` field.
  """
  amount_cents2_DESC

  """
  Sorts ascending by the `amount_cents` field.
  """
  amount_cents_ASC

  """
  Sorts descending by the `amount_cents` field.
  """
  amount_cents_DESC

  """
  Sorts ascending by the `cost.amount_cents` field.
  """
  cost_amount_cents_ASC

  """
  Sorts descending by the `cost.amount_cents` field.
  """
  cost_amount_cents_DESC

  """
  Sorts ascending by the `cost.currency` field.
  """
  cost_currency_ASC

  """
  Sorts descending by the `cost.currency` field.
  """
  cost_currency_DESC

  """
  Sorts ascending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_ASC

  """
  Sorts descending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_DESC

  """
  Sorts ascending by the `cost_currency_name` field.
  """
  cost_currency_name_ASC

  """
  Sorts descending by the `cost_currency_name` field.
  """
  cost_currency_name_DESC

  """
  Sorts ascending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_ASC

  """
  Sorts descending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_DESC

  """
  Sorts ascending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_ASC

  """
  Sorts descending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_DESC

  """
  Sorts ascending by the `cost_currency_unit` field.
  """
  cost_currency_unit_ASC

  """
  Sorts descending by the `cost_currency_unit` field.
  """
  cost_currency_unit_DESC

  """
  Sorts ascending by the `created_at2` field.
  """
  created_at2_ASC

  """
  Sorts descending by the `created_at2` field.
  """
  created_at2_DESC

  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_ASC

  """
  Sorts descending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_DESC

  """
  Sorts ascending by the `created_on` field.
  """
  created_on_ASC

  """
  Sorts descending by the `created_on` field.
  """
  created_on_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `inventor.name` field.
  """
  inventor_name_ASC

  """
  Sorts descending by the `inventor.name` field.
  """
  inventor_name_DESC

  """
  Sorts ascending by the `inventor.nationality` field.
  """
  inventor_nationality_ASC

  """
  Sorts descending by the `inventor.nationality` field.
  """
  inventor_nationality_DESC

  """
  Sorts ascending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_ASC

  """
  Sorts descending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_DESC

  """
  Sorts ascending by the `material` field.
  """
  material_ASC

  """
  Sorts descending by the `material` field.
  """
  material_DESC

  """
  Sorts ascending by the `metadata` field.
  """
  metadata_ASC

  """
  Sorts descending by the `metadata` field.
  """
  metadata_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `named_inventor.name` field.
  """
  named_inventor_name_ASC

  """
  Sorts descending by the `named_inventor.name` field.
  """
  named_inventor_name_DESC

  """
  Sorts ascending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_ASC

  """
  Sorts descending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_DESC

  """
  Sorts ascending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_ASC

  """
  Sorts descending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_DESC

  """
  Sorts ascending by the `options.color` field.
  """
  options_color_ASC

  """
  Sorts descending by the `options.color` field.
  """
  options_color_DESC

  """
  Sorts ascending by the `options.size` field.
  """
  options_size_ASC

  """
  Sorts descending by the `options.size` field.
  """
  options_size_DESC

  """
  Sorts ascending by the `options.the_size` field.
  """
  options_the_size_ASC

  """
  Sorts descending by the `options.the_size` field.
  """
  options_the_size_DESC

  """
  Sorts ascending by the `position.x` field.
  """
  position_x_ASC

  """
  Sorts descending by the `position.x` field.
  """
  position_x_DESC

  """
  Sorts ascending by the `position.y` field.
  """
  position_y_ASC

  """
  Sorts descending by the `position.y` field.
  """
  position_y_DESC

  """
  Sorts ascending by the `size` field.
  """
  size_ASC

  """
  Sorts descending by the `size` field.
  """
  size_DESC

  """
  Sorts ascending by the `the_options.color` field.
  """
  the_options_color_ASC

  """
  Sorts descending by the `the_options.color` field.
  """
  the_options_color_DESC

  """
  Sorts ascending by the `the_options.size` field.
  """
  the_options_size_ASC

  """
  Sorts descending by the `the_options.size` field.
  """
  the_options_size_DESC

  """
  Sorts ascending by the `the_options.the_size` field.
  """
  the_options_the_size_ASC

  """
  Sorts descending by the `the_options.the_size` field.
  """
  the_options_the_size_DESC

  """
  Sorts ascending by the `voltage` field.
  """
  voltage_ASC

  """
  Sorts descending by the `voltage` field.
  """
  voltage_DESC

  """
  Sorts ascending by the `weight_in_ng` field.
  """
  weight_in_ng_ASC

  """
  Sorts descending by the `weight_in_ng` field.
  """
  weight_in_ng_DESC

  """
  Sorts ascending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_ASC

  """
  Sorts descending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_DESC

  """
  Sorts ascending by the `widget_cost.amount_cents` field.
  """
  widget_cost_amount_cents_ASC

  """
  Sorts descending by the `widget_cost.amount_cents` field.
  """
  widget_cost_amount_cents_DESC

  """
  Sorts ascending by the `widget_cost.currency` field.
  """
  widget_cost_currency_ASC

  """
  Sorts descending by the `widget_cost.currency` field.
  """
  widget_cost_currency_DESC

  """
  Sorts ascending by the `widget_name` field.
  """
  widget_name_ASC

  """
  Sorts descending by the `widget_name` field.
  """
  widget_name_DESC

  """
  Sorts ascending by the `widget_size` field.
  """
  widget_size_ASC

  """
  Sorts descending by the `widget_size` field.
  """
  widget_size_DESC

  """
  Sorts ascending by the `widget_workspace_id` field.
  """
  widget_workspace_id_ASC

  """
  Sorts descending by the `widget_workspace_id` field.
  """
  widget_workspace_id_DESC

  """
  Sorts ascending by the `workspace_id` field.
  """
  workspace_id_ASC

  """
  Sorts descending by the `workspace_id` field.
  """
  workspace_id_DESC

  """
  Sorts ascending by the `workspace_name` field.
  """
  workspace_name_ASC

  """
  Sorts descending by the `workspace_name` field.
  """
  workspace_name_DESC
}

interface NamedInventor {
  name: String
}

"""
Type used to perform aggregation computations on `NamedInventor` fields.
"""
type NamedInventorAggregatedValues {
  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `nationality` field.
  """
  nationality: NonNumericAggregatedValues

  """
  Computed aggregate values for the `stock_ticker` field.
  """
  stock_ticker: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `NamedInventor` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input NamedInventorFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `NamedInventorFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [NamedInventorFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [NamedInventorFilterInput!]

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `nationality` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nationality: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: NamedInventorFilterInput

  """
  Used to filter on the `stock_ticker` field.

  When `null` or an empty object is passed, matches all documents.
  """
  stock_ticker: StringFilterInput
}

"""
Type used to specify the `NamedInventor` fields to group by for aggregations.
"""
type NamedInventorGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String

  """
  The `nationality` field value for this group.
  """
  nationality: String

  """
  The `stock_ticker` field value for this group.
  """
  stock_ticker: String
}

"""
A return type used from aggregations to provided aggregated values over non-numeric fields.
"""
type NonNumericAggregatedValues @shareable {
  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximate_distinct_value_count: JsonSafeLong
}

"""
Provides information about the specific fetched page. This implements the `PageInfo`
specification from the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type PageInfo @shareable {
  """
  The `Cursor` of the last edge of the current page. This can be passed in the next query as
  a `after` argument to paginate forwards.
  """
  end_cursor: Cursor

  """
  Indicates if there is another page of results available after the current one.
  """
  has_next_page: Boolean!

  """
  Indicates if there is another page of results available before the current one.
  """
  has_previous_page: Boolean!

  """
  The `Cursor` of the first edge of the current page. This can be passed in the next query as
  a `before` argument to paginate backwards.
  """
  start_cursor: Cursor
}

union Part = ElectricalPart | MechanicalPart

"""
Type used to perform aggregation computations on `Part` fields.
"""
type PartAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `material` field.
  """
  material: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `voltage` field.
  """
  voltage: IntAggregatedValues
}

"""
Return type representing a bucket of `Part` documents for an aggregations query.
"""
type PartAggregation {
  """
  Provides computed aggregated values over all `Part` documents in an aggregation bucket.
  """
  aggregated_values: PartAggregatedValues

  """
  The count of `Part` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Part` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: PartGroupedBy
}

"""
Represents a paginated collection of `PartAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type PartAggregationConnection {
  """
  Wraps a specific `PartAggregation` to pair it with its pagination cursor.
  """
  edges: [PartAggregationEdge!]!

  """
  The list of `PartAggregation` results.
  """
  nodes: [PartAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `PartAggregation` in the context of a `PartAggregationConnection`,
providing access to both the `PartAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type PartAggregationEdge {
  """
  The `Cursor` of this `PartAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `PartAggregation`.
  """
  cursor: Cursor

  """
  The `PartAggregation` of this edge.
  """
  node: PartAggregation
}

"""
Represents a paginated collection of `Part` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type PartConnection {
  """
  Wraps a specific `Part` to pair it with its pagination cursor.
  """
  edges: [PartEdge!]!

  """
  The list of `Part` results.
  """
  nodes: [Part!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `Part` in the context of a `PartConnection`,
providing access to both the `Part` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type PartEdge {
  """
  The `Cursor` of this `Part`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Part`.
  """
  cursor: Cursor

  """
  The `Part` of this edge.
  """
  node: Part
}

"""
Input type used to specify filters on `Part` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PartFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PartFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PartFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PartFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `material` field.

  When `null` or an empty object is passed, matches all documents.
  """
  material: MaterialFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PartFilterInput

  """
  Used to filter on the `voltage` field.

  When `null` or an empty object is passed, matches all documents.
  """
  voltage: IntFilterInput
}

"""
Type used to specify the `Part` fields to group by for aggregations.
"""
type PartGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `material` field value for this group.
  """
  material: Material

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `voltage` field value for this group.
  """
  voltage: Int
}

"""
Enumerates the ways `Part`s can be sorted.
"""
enum PartSortOrderInput {
  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `material` field.
  """
  material_ASC

  """
  Sorts descending by the `material` field.
  """
  material_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `voltage` field.
  """
  voltage_ASC

  """
  Sorts descending by the `voltage` field.
  """
  voltage_DESC
}

type Person implements NamedInventor {
  name: String
  nationality: String
}

type Player {
  affiliations: Affiliations!
  name: String
  nicknames: [String!]!
  seasons_nested: [PlayerSeason!]!
  seasons_object: [PlayerSeason!]!
}

"""
Type used to perform aggregation computations on `Player` fields.
"""
type PlayerAggregatedValues {
  """
  Computed aggregate values for the `affiliations` field.
  """
  affiliations: AffiliationsAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `nicknames` field.
  """
  nicknames: NonNumericAggregatedValues

  """
  Computed aggregate values for the `seasons_object` field.
  """
  seasons_object: PlayerSeasonAggregatedValues
}

"""
Input type used to specify filters on a `Player` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerFieldsListFilterInput {
  """
  Used to filter on the `affiliations` field.

  When `null` or an empty object is passed, matches all documents.
  """
  affiliations: AffiliationsFieldsListFilterInput

  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerFieldsListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerFieldsListFilterInput!]

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringListFilterInput

  """
  Used to filter on the `nicknames` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nicknames: StringListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerFieldsListFilterInput

  """
  Used to filter on the `seasons_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_nested: PlayerSeasonListFilterInput

  """
  Used to filter on the `seasons_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_object: PlayerSeasonFieldsListFilterInput
}

"""
Input type used to specify filters on `Player` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerFilterInput {
  """
  Used to filter on the `affiliations` field.

  When `null` or an empty object is passed, matches all documents.
  """
  affiliations: AffiliationsFilterInput

  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerFilterInput!]

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `nicknames` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nicknames: StringListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerFilterInput

  """
  Used to filter on the `seasons_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_nested: PlayerSeasonListFilterInput

  """
  Used to filter on the `seasons_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_object: PlayerSeasonFieldsListFilterInput
}

"""
Type used to specify the `Player` fields to group by for aggregations.
"""
type PlayerGroupedBy {
  """
  The `affiliations` field value for this group.
  """
  affiliations: AffiliationsGroupedBy

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `seasons_object` field value for this group.

  Note: `seasons_object` is a collection field, but selecting this field will
  group on individual values of the selected subfields of `seasons_object`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `seasons_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `seasons_object` multiple times for a single document, that document will only be included in the group
  once.
  """
  seasons_object: PlayerSeasonGroupedBy
}

"""
Input type used to specify filters on `[Player]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: PlayerFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerListFilterInput
}

type PlayerSeason {
  awards(
    """
    Used to forward-paginate through the `awards`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `awards`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used in conjunction with the `after` argument to forward-paginate through the `awards`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `awards`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `awards`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `awards`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): StringConnection
  games_played: Int
  year: Int
}

"""
Type used to perform aggregation computations on `PlayerSeason` fields.
"""
type PlayerSeasonAggregatedValues {
  """
  Computed aggregate values for the `awards` field.
  """
  awards: NonNumericAggregatedValues

  """
  Computed aggregate values for the `games_played` field.
  """
  games_played: IntAggregatedValues

  """
  Computed aggregate values for the `year` field.
  """
  year: IntAggregatedValues
}

"""
Input type used to specify filters on a `PlayerSeason` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerSeasonFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerSeasonFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerSeasonFieldsListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerSeasonFieldsListFilterInput!]

  """
  Used to filter on the `awards` field.

  When `null` or an empty object is passed, matches all documents.
  """
  awards: StringListFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Used to filter on the `games_played` field.

  When `null` or an empty object is passed, matches all documents.
  """
  games_played: IntListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerSeasonFieldsListFilterInput

  """
  Used to filter on the `year` field.

  When `null` or an empty object is passed, matches all documents.
  """
  year: IntListFilterInput
}

"""
Input type used to specify filters on `PlayerSeason` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerSeasonFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerSeasonFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerSeasonFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerSeasonFilterInput!]

  """
  Used to filter on the `awards` field.

  When `null` or an empty object is passed, matches all documents.
  """
  awards: StringListFilterInput

  """
  Used to filter on the `games_played` field.

  When `null` or an empty object is passed, matches all documents.
  """
  games_played: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerSeasonFilterInput

  """
  Used to filter on the `year` field.

  When `null` or an empty object is passed, matches all documents.
  """
  year: IntFilterInput
}

"""
Type used to specify the `PlayerSeason` fields to group by for aggregations.
"""
type PlayerSeasonGroupedBy {
  """
  The `games_played` field value for this group.
  """
  games_played: Int

  """
  The `year` field value for this group.
  """
  year: Int
}

"""
Input type used to specify filters on `[PlayerSeason]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PlayerSeasonListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PlayerSeasonListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PlayerSeasonListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PlayerSeasonListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: PlayerSeasonFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PlayerSeasonListFilterInput
}

type Position {
  x: Float!
  y: Float!
}

"""
Type used to perform aggregation computations on `Position` fields.
"""
type PositionAggregatedValues {
  """
  Computed aggregate values for the `x` field.
  """
  x: FloatAggregatedValues

  """
  Computed aggregate values for the `y` field.
  """
  y: FloatAggregatedValues
}

"""
Input type used to specify filters on `Position` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input PositionFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `PositionFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [PositionFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [PositionFilterInput!]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: PositionFilterInput

  """
  Used to filter on the `x` field.

  When `null` or an empty object is passed, matches all documents.
  """
  x: FloatFilterInput

  """
  Used to filter on the `y` field.

  When `null` or an empty object is passed, matches all documents.
  """
  y: FloatFilterInput
}

"""
Type used to specify the `Position` fields to group by for aggregations.
"""
type PositionGroupedBy {
  """
  The `x` field value for this group.
  """
  x: Float

  """
  The `y` field value for this group.
  """
  y: Float
}

"""
The query entry point for the entire schema.
"""
type Query {
  """
  A field required by the [Apollo Federation subgraph
  spec](https://www.apollographql.com/docs/federation/subgraph-spec/#query_entities):

  > The graph router uses this root-level `Query` field to directly fetch fields of entities defined by a subgraph.
  >
  > This field must take a `representations` argument of type `[_Any!]!` (a non-nullable list of non-nullable
  > [`_Any` scalars](https://www.apollographql.com/docs/federation/subgraph-spec/#scalar-_any)). Its return type must be `[_Entity]!` (a non-nullable list of _nullable_
  > objects that belong to the [`_Entity` union](https://www.apollographql.com/docs/federation/subgraph-spec/#union-_entity)).
  >
  > Each entry in the `representations` list  must be validated with the following rules:
  >
  > - A representation must include a `__typename` string field.
  > - A representation must contain all fields included in the fieldset of a
  `@key` directive applied to the corresponding entity definition.
  >
  > For details, see [Resolving entity fields with `Query._entities`](https://www.apollographql.com/docs/federation/subgraph-spec/#resolving-entity-fields-with-query_entities).

  Not intended for use by clients other than Apollo.
  """
  _entities(
    """
    A list of entity data blobs from other apollo subgraphs. For more information (and
    to see an example of what form this argument takes), see the [Apollo Federation subgraph
    spec](https://www.apollographql.com/docs/federation/subgraph-spec/#resolve-requests-for-entities).
    """
    representations: [_Any!]!
  ): [_Entity]!

  """
  A field required by the [Apollo Federation subgraph
  spec](https://www.apollographql.com/docs/federation/subgraph-spec/#query_service):

  > This field of the root `Query` type must return a non-nullable [`_Service` type](https://www.apollographql.com/docs/federation/subgraph-spec/#type-_service).

  > For details, see [Enhanced introspection with `Query._service`](https://www.apollographql.com/docs/federation/subgraph-spec/#enhanced-introspection-with-query_service).

  Not intended for use by clients other than Apollo.
  """
  _service: _Service!

  """
  Aggregations over the `addresses` data:

  > Fetches `Address`s based on the provided arguments.
  """
  address_aggregations(
    """
    Used to forward-paginate through the `address_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `address_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Address` documents that get aggregated over based on the provided criteria.
    """
    filter: AddressFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `address_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `address_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `address_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `address_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): AddressAggregationConnection

  """
  Fetches `Address`s based on the provided arguments.
  """
  addresses(
    """
    Used to forward-paginate through the `addresses`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `addresses`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `addresses` based on the provided criteria.
    """
    filter: AddressFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `addresses`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `addresses`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `addresses`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `addresses`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `addresses` should be sorted.
    """
    order_by: [AddressSortOrderInput!]
  ): AddressConnection

  """
  Aggregations over the `components` data:

  > Fetches `Component`s based on the provided arguments.
  """
  component_aggregations(
    """
    Used to forward-paginate through the `component_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `component_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Component` documents that get aggregated over based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `component_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `component_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ComponentAggregationConnection

  """
  Fetches `Component`s based on the provided arguments.
  """
  components(
    """
    Used to forward-paginate through the `components`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `components`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `components` based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `components`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `components`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `components`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `components`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `components` should be sorted.
    """
    order_by: [ComponentSortOrderInput!]
  ): ComponentConnection

  """
  Aggregations over the `electrical_parts` data:

  > Fetches `ElectricalPart`s based on the provided arguments.
  """
  electrical_part_aggregations(
    """
    Used to forward-paginate through the `electrical_part_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `electrical_part_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `ElectricalPart` documents that get aggregated over based on the provided criteria.
    """
    filter: ElectricalPartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `electrical_part_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `electrical_part_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `electrical_part_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `electrical_part_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ElectricalPartAggregationConnection

  """
  Fetches `ElectricalPart`s based on the provided arguments.
  """
  electrical_parts(
    """
    Used to forward-paginate through the `electrical_parts`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `electrical_parts`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `electrical_parts` based on the provided criteria.
    """
    filter: ElectricalPartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `electrical_parts`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `electrical_parts`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `electrical_parts`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `electrical_parts`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `electrical_parts` should be sorted.
    """
    order_by: [ElectricalPartSortOrderInput!]
  ): ElectricalPartConnection

  """
  Aggregations over the `manufacturers` data:

  > Fetches `Manufacturer`s based on the provided arguments.
  """
  manufacturer_aggregations(
    """
    Used to forward-paginate through the `manufacturer_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `manufacturer_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Manufacturer` documents that get aggregated over based on the provided criteria.
    """
    filter: ManufacturerFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `manufacturer_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `manufacturer_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `manufacturer_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `manufacturer_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ManufacturerAggregationConnection

  """
  Fetches `Manufacturer`s based on the provided arguments.
  """
  manufacturers(
    """
    Used to forward-paginate through the `manufacturers`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `manufacturers`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `manufacturers` based on the provided criteria.
    """
    filter: ManufacturerFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `manufacturers`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `manufacturers`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `manufacturers`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `manufacturers`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `manufacturers` should be sorted.
    """
    order_by: [ManufacturerSortOrderInput!]
  ): ManufacturerConnection

  """
  Aggregations over the `mechanical_parts` data:

  > Fetches `MechanicalPart`s based on the provided arguments.
  """
  mechanical_part_aggregations(
    """
    Used to forward-paginate through the `mechanical_part_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `mechanical_part_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `MechanicalPart` documents that get aggregated over based on the provided criteria.
    """
    filter: MechanicalPartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `mechanical_part_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `mechanical_part_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `mechanical_part_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `mechanical_part_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): MechanicalPartAggregationConnection

  """
  Fetches `MechanicalPart`s based on the provided arguments.
  """
  mechanical_parts(
    """
    Used to forward-paginate through the `mechanical_parts`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `mechanical_parts`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `mechanical_parts` based on the provided criteria.
    """
    filter: MechanicalPartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `mechanical_parts`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `mechanical_parts`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `mechanical_parts`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `mechanical_parts`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `mechanical_parts` should be sorted.
    """
    order_by: [MechanicalPartSortOrderInput!]
  ): MechanicalPartConnection

  """
  Fetches `NamedEntity`s based on the provided arguments.
  """
  named_entities(
    """
    Used to forward-paginate through the `named_entities`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `named_entities`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `named_entities` based on the provided criteria.
    """
    filter: NamedEntityFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `named_entities`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `named_entities`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `named_entities`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `named_entities`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `named_entities` should be sorted.
    """
    order_by: [NamedEntitySortOrderInput!]
  ): NamedEntityConnection

  """
  Aggregations over the `named_entities` data:

  > Fetches `NamedEntity`s based on the provided arguments.
  """
  named_entity_aggregations(
    """
    Used to forward-paginate through the `named_entity_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `named_entity_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `NamedEntity` documents that get aggregated over based on the provided criteria.
    """
    filter: NamedEntityFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `named_entity_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `named_entity_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `named_entity_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `named_entity_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): NamedEntityAggregationConnection

  """
  Aggregations over the `parts` data:

  > Fetches `Part`s based on the provided arguments.
  """
  part_aggregations(
    """
    Used to forward-paginate through the `part_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `part_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Part` documents that get aggregated over based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `part_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `part_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `part_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `part_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): PartAggregationConnection

  """
  Fetches `Part`s based on the provided arguments.
  """
  parts(
    """
    Used to forward-paginate through the `parts`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `parts`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `parts` based on the provided criteria.
    """
    filter: PartFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `parts`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `parts`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `parts`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `parts`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `parts` should be sorted.
    """
    order_by: [PartSortOrderInput!]
  ): PartConnection

  """
  Aggregations over the `sponsors` data:

  > Fetches `Sponsor`s based on the provided arguments.
  """
  sponsor_aggregations(
    """
    Used to forward-paginate through the `sponsor_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `sponsor_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Sponsor` documents that get aggregated over based on the provided criteria.
    """
    filter: SponsorFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `sponsor_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `sponsor_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `sponsor_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `sponsor_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): SponsorAggregationConnection

  """
  Fetches `Sponsor`s based on the provided arguments.
  """
  sponsors(
    """
    Used to forward-paginate through the `sponsors`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `sponsors`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `sponsors` based on the provided criteria.
    """
    filter: SponsorFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `sponsors`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `sponsors`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `sponsors`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `sponsors`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `sponsors` should be sorted.
    """
    order_by: [SponsorSortOrderInput!]
  ): SponsorConnection

  """
  Aggregations over the `teams` data:

  > Fetches `Team`s based on the provided arguments.
  """
  team_aggregations(
    """
    Used to forward-paginate through the `team_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `team_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Team` documents that get aggregated over based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `team_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `team_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `team_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `team_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): TeamAggregationConnection

  """
  Fetches `Team`s based on the provided arguments.
  """
  teams(
    """
    Used to forward-paginate through the `teams`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `teams`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `teams` based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `teams`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `teams`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `teams`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `teams`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `teams` should be sorted.
    """
    order_by: [TeamSortOrderInput!]
  ): TeamConnection

  """
  Aggregations over the `widgets` data:

  > Fetches `Widget`s based on the provided arguments.

  Note: aggregation queries are relatively expensive, and some fields have been pre-aggregated to allow
  more efficient queries for some common aggregation cases:

    - The root `widget_currencies` field groups by `cost.currency`
  """
  widget_aggregations(
    """
    Used to forward-paginate through the `widget_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Widget` documents that get aggregated over based on the provided criteria.
    """
    filter: WidgetFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): WidgetAggregationConnection

  """
  Fetches `WidgetCurrency`s based on the provided arguments.
  """
  widget_currencies(
    """
    Used to forward-paginate through the `widget_currencies`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_currencies`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `widget_currencies` based on the provided criteria.
    """
    filter: WidgetCurrencyFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_currencies`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_currencies`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_currencies`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_currencies`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `widget_currencies` should be sorted.
    """
    order_by: [WidgetCurrencySortOrderInput!]
  ): WidgetCurrencyConnection

  """
  Aggregations over the `widget_currencies` data:

  > Fetches `WidgetCurrency`s based on the provided arguments.
  """
  widget_currency_aggregations(
    """
    Used to forward-paginate through the `widget_currency_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_currency_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `WidgetCurrency` documents that get aggregated over based on the provided criteria.
    """
    filter: WidgetCurrencyFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_currency_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_currency_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_currency_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_currency_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): WidgetCurrencyAggregationConnection

  """
  Aggregations over the `widgets_or_addresses` data:

  > Fetches `WidgetOrAddress`s based on the provided arguments.
  """
  widget_or_address_aggregations(
    """
    Used to forward-paginate through the `widget_or_address_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_or_address_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `WidgetOrAddress` documents that get aggregated over based on the provided criteria.
    """
    filter: WidgetOrAddressFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_or_address_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_or_address_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_or_address_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_or_address_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): WidgetOrAddressAggregationConnection

  """
  Aggregations over the `widget_workspaces` data:

  > Fetches `WidgetWorkspace`s based on the provided arguments.
  """
  widget_workspace_aggregations(
    """
    Used to forward-paginate through the `widget_workspace_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_workspace_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `WidgetWorkspace` documents that get aggregated over based on the provided criteria.
    """
    filter: WidgetWorkspaceFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_workspace_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_workspace_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_workspace_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_workspace_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): WidgetWorkspaceAggregationConnection

  """
  Fetches `WidgetWorkspace`s based on the provided arguments.
  """
  widget_workspaces(
    """
    Used to forward-paginate through the `widget_workspaces`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_workspaces`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `widget_workspaces` based on the provided criteria.
    """
    filter: WidgetWorkspaceFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_workspaces`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_workspaces`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_workspaces`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_workspaces`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `widget_workspaces` should be sorted.
    """
    order_by: [WidgetWorkspaceSortOrderInput!]
  ): WidgetWorkspaceConnection

  """
  Fetches `Widget`s based on the provided arguments.
  """
  widgets(
    """
    Used to forward-paginate through the `widgets`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widgets`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `widgets` based on the provided criteria.
    """
    filter: WidgetFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widgets`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widgets`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widgets`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widgets`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `widgets` should be sorted.
    """
    order_by: [WidgetSortOrderInput!]
  ): WidgetConnection

  """
  Fetches `WidgetOrAddress`s based on the provided arguments.
  """
  widgets_or_addresses(
    """
    Used to forward-paginate through the `widgets_or_addresses`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widgets_or_addresses`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `widgets_or_addresses` based on the provided criteria.
    """
    filter: WidgetOrAddressFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widgets_or_addresses`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widgets_or_addresses`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widgets_or_addresses`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widgets_or_addresses`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `widgets_or_addresses` should be sorted.
    """
    order_by: [WidgetOrAddressSortOrderInput!]
  ): WidgetOrAddressConnection
}

enum Size {
  LARGE
  MEDIUM
  SMALL
}

"""
Input type used to specify filters on `Size` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input SizeFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SizeFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SizeFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SizeFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [SizeInput]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SizeFilterInput
}

enum SizeInput {
  LARGE
  MEDIUM
  SMALL
}

"""
Input type used to specify filters on elements of a `[Size]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input SizeListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SizeListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SizeListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SizeListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [SizeInput!]
}

"""
Input type used to specify filters on `[Size]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input SizeListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SizeListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SizeListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SizeListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: SizeListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SizeListFilterInput
}

type Sponsor @key(fields: "id") {
  """
  Aggregations over the `affiliated_teams_from_nested` data.
  """
  affiliated_team_from_nested_aggregations(
    """
    Used to forward-paginate through the `affiliated_team_from_nested_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the
    `affiliated_team_from_nested_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Team` documents that get aggregated over based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through
    the `affiliated_team_from_nested_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `affiliated_team_from_nested_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through
    the `affiliated_team_from_nested_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `affiliated_team_from_nested_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): TeamAggregationConnection

  """
  Aggregations over the `affiliated_teams_from_object` data.
  """
  affiliated_team_from_object_aggregations(
    """
    Used to forward-paginate through the `affiliated_team_from_object_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the
    `affiliated_team_from_object_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Team` documents that get aggregated over based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through
    the `affiliated_team_from_object_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `affiliated_team_from_object_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through
    the `affiliated_team_from_object_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `affiliated_team_from_object_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): TeamAggregationConnection
  affiliated_teams_from_nested(
    """
    Used to forward-paginate through the `affiliated_teams_from_nested`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `affiliated_teams_from_nested`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `affiliated_teams_from_nested` based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `affiliated_teams_from_nested`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `affiliated_teams_from_nested`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `affiliated_teams_from_nested`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `affiliated_teams_from_nested`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `affiliated_teams_from_nested` should be sorted.
    """
    order_by: [TeamSortOrderInput!]
  ): TeamConnection
  affiliated_teams_from_object(
    """
    Used to forward-paginate through the `affiliated_teams_from_object`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `affiliated_teams_from_object`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `affiliated_teams_from_object` based on the provided criteria.
    """
    filter: TeamFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `affiliated_teams_from_object`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `affiliated_teams_from_object`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `affiliated_teams_from_object`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `affiliated_teams_from_object`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `affiliated_teams_from_object` should be sorted.
    """
    order_by: [TeamSortOrderInput!]
  ): TeamConnection
  id: ID!
  name: String
}

"""
Type used to perform aggregation computations on `Sponsor` fields.
"""
type SponsorAggregatedValues {
  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Sponsor` documents for an aggregations query.
"""
type SponsorAggregation {
  """
  Provides computed aggregated values over all `Sponsor` documents in an aggregation bucket.
  """
  aggregated_values: SponsorAggregatedValues

  """
  The count of `Sponsor` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Sponsor` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: SponsorGroupedBy
}

"""
Represents a paginated collection of `SponsorAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type SponsorAggregationConnection {
  """
  Wraps a specific `SponsorAggregation` to pair it with its pagination cursor.
  """
  edges: [SponsorAggregationEdge!]!

  """
  The list of `SponsorAggregation` results.
  """
  nodes: [SponsorAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `SponsorAggregation` in the context of a `SponsorAggregationConnection`,
providing access to both the `SponsorAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type SponsorAggregationEdge {
  """
  The `Cursor` of this `SponsorAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `SponsorAggregation`.
  """
  cursor: Cursor

  """
  The `SponsorAggregation` of this edge.
  """
  node: SponsorAggregation
}

"""
Represents a paginated collection of `Sponsor` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type SponsorConnection {
  """
  Wraps a specific `Sponsor` to pair it with its pagination cursor.
  """
  edges: [SponsorEdge!]!

  """
  The list of `Sponsor` results.
  """
  nodes: [Sponsor!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `Sponsor` in the context of a `SponsorConnection`,
providing access to both the `Sponsor` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type SponsorEdge {
  """
  The `Cursor` of this `Sponsor`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Sponsor`.
  """
  cursor: Cursor

  """
  The `Sponsor` of this edge.
  """
  node: Sponsor
}

"""
Input type used to specify filters on `Sponsor` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input SponsorFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SponsorFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SponsorFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SponsorFilterInput!]

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SponsorFilterInput
}

"""
Type used to specify the `Sponsor` fields to group by for aggregations.
"""
type SponsorGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String
}

"""
Enumerates the ways `Sponsor`s can be sorted.
"""
enum SponsorSortOrderInput {
  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC
}

type Sponsorship {
  annual_total: Money!
  sponsor_id: ID!
}

"""
Type used to perform aggregation computations on `Sponsorship` fields.
"""
type SponsorshipAggregatedValues {
  """
  Computed aggregate values for the `annual_total` field.
  """
  annual_total: MoneyAggregatedValues

  """
  Computed aggregate values for the `sponsor_id` field.
  """
  sponsor_id: NonNumericAggregatedValues
}

"""
Input type used to specify filters on a `Sponsorship` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input SponsorshipFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SponsorshipFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SponsorshipFieldsListFilterInput!]

  """
  Used to filter on the `annual_total` field.

  When `null` or an empty object is passed, matches all documents.
  """
  annual_total: MoneyFieldsListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SponsorshipFieldsListFilterInput!]

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SponsorshipFieldsListFilterInput

  """
  Used to filter on the `sponsor_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsor_id: IDListFilterInput
}

"""
Input type used to specify filters on `Sponsorship` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input SponsorshipFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SponsorshipFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SponsorshipFilterInput!]

  """
  Used to filter on the `annual_total` field.

  When `null` or an empty object is passed, matches all documents.
  """
  annual_total: MoneyFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SponsorshipFilterInput!]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SponsorshipFilterInput

  """
  Used to filter on the `sponsor_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sponsor_id: IDFilterInput
}

"""
Type used to specify the `Sponsorship` fields to group by for aggregations.
"""
type SponsorshipGroupedBy {
  """
  The `annual_total` field value for this group.
  """
  annual_total: MoneyGroupedBy

  """
  The `sponsor_id` field value for this group.
  """
  sponsor_id: ID
}

"""
Input type used to specify filters on `[Sponsorship]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input SponsorshipListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `SponsorshipListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [SponsorshipListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [SponsorshipListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: SponsorshipFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: SponsorshipListFilterInput
}

"""
Represents a paginated collection of `String` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type StringConnection @shareable {
  """
  Wraps a specific `String` to pair it with its pagination cursor.
  """
  edges: [StringEdge!]!

  """
  The list of `String` results.
  """
  nodes: [String!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `String` in the context of a `StringConnection`,
providing access to both the `String` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type StringEdge @shareable {
  """
  The `Cursor` of this `String`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `String`.
  """
  cursor: Cursor

  """
  The `String` of this edge.
  """
  node: String
}

"""
Input type used to specify filters on `String` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input StringFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `StringFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [StringFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [StringFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [String]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: StringFilterInput
}

"""
Input type used to specify filters on elements of a `[String]` field.

Will match all documents if passed as an empty object (or as `null`).
"""
input StringListElementFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `StringListElementFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [StringListElementFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [StringListElementFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [String!]
}

"""
Input type used to specify filters on `[String]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input StringListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `StringListFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [StringListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [StringListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: StringListElementFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: StringListFilterInput
}

"""
For more performant queries on this type, please filter on `league` if possible.
"""
type Team @key(fields: "id") {
  country_code: ID!
  current_name: String
  current_players_nested: [Player!]!
  current_players_object: [Player!]!
  details: TeamDetails
  forbes_valuation_moneys_nested: [Money!]!
  forbes_valuation_moneys_object: [Money!]!
  forbes_valuations: [JsonSafeLong!]!
  formed_on: Date
  id: ID!
  league: String
  nested_fields: TeamNestedFields
  nested_fields2: TeamNestedFields
  past_names: [String!]!
  seasons_nested: [TeamSeason!]!
  seasons_object: [TeamSeason!]!
  stadium_location: GeoLocation
  won_championships_at: [DateTime!]!
}

"""
Type used to perform aggregation computations on `Team` fields.
"""
type TeamAggregatedValues {
  """
  Computed aggregate values for the `country_code` field.
  """
  country_code: NonNumericAggregatedValues

  """
  Computed aggregate values for the `current_name` field.
  """
  current_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `current_players_object` field.
  """
  current_players_object: PlayerAggregatedValues

  """
  Computed aggregate values for the `details` field.
  """
  details: TeamDetailsAggregatedValues

  """
  Computed aggregate values for the `forbes_valuation_moneys_object` field.
  """
  forbes_valuation_moneys_object: MoneyAggregatedValues

  """
  Computed aggregate values for the `forbes_valuations` field.
  """
  forbes_valuations: JsonSafeLongAggregatedValues

  """
  Computed aggregate values for the `formed_on` field.
  """
  formed_on: DateAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `league` field.
  """
  league: NonNumericAggregatedValues

  """
  Computed aggregate values for the `past_names` field.
  """
  past_names: NonNumericAggregatedValues

  """
  Computed aggregate values for the `seasons_object` field.
  """
  seasons_object: TeamSeasonAggregatedValues

  """
  Computed aggregate values for the `stadium_location` field.
  """
  stadium_location: NonNumericAggregatedValues

  """
  Computed aggregate values for the `won_championships_at` field.
  """
  won_championships_at: DateTimeAggregatedValues
}

"""
Return type representing a bucket of `Team` documents for an aggregations query.
"""
type TeamAggregation {
  """
  Provides computed aggregated values over all `Team` documents in an aggregation bucket.
  """
  aggregated_values: TeamAggregatedValues

  """
  The count of `Team` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Team` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: TeamGroupedBy

  """
  Used to perform sub-aggregations of `TeamAggregation` data.
  """
  sub_aggregations: TeamAggregationSubAggregations
}

"""
Represents a paginated collection of `TeamAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type TeamAggregationConnection {
  """
  Wraps a specific `TeamAggregation` to pair it with its pagination cursor.
  """
  edges: [TeamAggregationEdge!]!

  """
  The list of `TeamAggregation` results.
  """
  nodes: [TeamAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Provides access to the `sub_aggregations` under `current_players_object.affiliations` within each `TeamAggregation`.
"""
type TeamAggregationCurrentPlayersObjectAffiliationsSubAggregations {
  """
  Used to perform a sub-aggregation of `sponsorships_nested`.
  """
  sponsorships_nested(
    """
    Used to filter the `Sponsorship` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: SponsorshipFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamSponsorshipSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `current_players_object` within each `TeamAggregation`.
"""
type TeamAggregationCurrentPlayersObjectSubAggregations {
  """
  Used to perform a sub-aggregation of `affiliations`.
  """
  affiliations: TeamAggregationCurrentPlayersObjectAffiliationsSubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `PlayerSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSeasonSubAggregationConnection
}

"""
Represents a specific `TeamAggregation` in the context of a `TeamAggregationConnection`,
providing access to both the `TeamAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type TeamAggregationEdge {
  """
  The `Cursor` of this `TeamAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `TeamAggregation`.
  """
  cursor: Cursor

  """
  The `TeamAggregation` of this edge.
  """
  node: TeamAggregation
}

"""
Provides access to the `sub_aggregations` under `nested_fields2` within each `TeamAggregation`.
"""
type TeamAggregationNestedFields2SubAggregations {
  """
  Used to perform a sub-aggregation of `current_players`.
  """
  current_players(
    """
    Used to filter the `Player` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSubAggregationConnection

  """
  Used to perform a sub-aggregation of `forbes_valuation_moneys`.
  """
  forbes_valuation_moneys(
    """
    Used to filter the `Money` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: MoneyFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamMoneySubAggregationConnection

  """
  Used to perform a sub-aggregation of `seasons`.
  """
  seasons(
    """
    Used to filter the `TeamSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: TeamSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `nested_fields` within each `TeamAggregation`.
"""
type TeamAggregationNestedFieldsSubAggregations {
  """
  Used to perform a sub-aggregation of `current_players`.
  """
  current_players(
    """
    Used to filter the `Player` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSubAggregationConnection

  """
  Used to perform a sub-aggregation of `forbes_valuation_moneys`.
  """
  forbes_valuation_moneys(
    """
    Used to filter the `Money` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: MoneyFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamMoneySubAggregationConnection

  """
  Used to perform a sub-aggregation of `seasons`.
  """
  seasons(
    """
    Used to filter the `TeamSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: TeamSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `seasons_object.players_object.affiliations` within each `TeamAggregation`.
"""
type TeamAggregationSeasonsObjectPlayersObjectAffiliationsSubAggregations {
  """
  Used to perform a sub-aggregation of `sponsorships_nested`.
  """
  sponsorships_nested(
    """
    Used to filter the `Sponsorship` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: SponsorshipFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamSponsorshipSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `seasons_object.players_object` within each `TeamAggregation`.
"""
type TeamAggregationSeasonsObjectPlayersObjectSubAggregations {
  """
  Used to perform a sub-aggregation of `affiliations`.
  """
  affiliations: TeamAggregationSeasonsObjectPlayersObjectAffiliationsSubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `PlayerSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSeasonSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `seasons_object` within each `TeamAggregation`.
"""
type TeamAggregationSeasonsObjectSubAggregations {
  """
  Used to perform a sub-aggregation of `players_nested`.
  """
  players_nested(
    """
    Used to filter the `Player` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSubAggregationConnection

  """
  Used to perform a sub-aggregation of `players_object`.
  """
  players_object: TeamAggregationSeasonsObjectPlayersObjectSubAggregations
}

"""
Provides access to the `sub_aggregations` within each `TeamAggregation`.
"""
type TeamAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `current_players_nested`.
  """
  current_players_nested(
    """
    Used to filter the `Player` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSubAggregationConnection

  """
  Used to perform a sub-aggregation of `current_players_object`.
  """
  current_players_object: TeamAggregationCurrentPlayersObjectSubAggregations

  """
  Used to perform a sub-aggregation of `forbes_valuation_moneys_nested`.
  """
  forbes_valuation_moneys_nested(
    """
    Used to filter the `Money` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: MoneyFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamMoneySubAggregationConnection

  """
  Used to perform a sub-aggregation of `nested_fields`.
  """
  nested_fields: TeamAggregationNestedFieldsSubAggregations

  """
  Used to perform a sub-aggregation of `nested_fields2`.
  """
  nested_fields2: TeamAggregationNestedFields2SubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `TeamSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: TeamSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonSubAggregationConnection

  """
  Used to perform a sub-aggregation of `seasons_object`.
  """
  seasons_object: TeamAggregationSeasonsObjectSubAggregations
}

"""
Represents a paginated collection of `Team` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type TeamConnection {
  """
  Wraps a specific `Team` to pair it with its pagination cursor.
  """
  edges: [TeamEdge!]!

  """
  The list of `Team` results.
  """
  nodes: [Team!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

type TeamDetails {
  count: Int
  uniform_colors: [String!]!
}

"""
Type used to perform aggregation computations on `TeamDetails` fields.
"""
type TeamDetailsAggregatedValues {
  """
  Computed aggregate values for the `count` field.
  """
  count: IntAggregatedValues

  """
  Computed aggregate values for the `uniform_colors` field.
  """
  uniform_colors: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `TeamDetails` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamDetailsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamDetailsFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamDetailsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamDetailsFilterInput!]

  """
  Used to filter on the `count` field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamDetailsFilterInput

  """
  Used to filter on the `uniform_colors` field.

  When `null` or an empty object is passed, matches all documents.
  """
  uniform_colors: StringListFilterInput
}

"""
Type used to specify the `TeamDetails` fields to group by for aggregations.
"""
type TeamDetailsGroupedBy {
  """
  The `count` field value for this group.
  """
  count: Int
}

"""
Represents a specific `Team` in the context of a `TeamConnection`,
providing access to both the `Team` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type TeamEdge {
  """
  The `Cursor` of this `Team`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Team`.
  """
  cursor: Cursor

  """
  The `Team` of this edge.
  """
  node: Team
}

"""
Input type used to specify filters on `Team` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamFilterInput!]

  """
  Used to filter on the `country_code` field.

  When `null` or an empty object is passed, matches all documents.
  """
  country_code: IDFilterInput

  """
  Used to filter on the `current_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  current_name: StringFilterInput

  """
  Used to filter on the `current_players_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  current_players_nested: PlayerListFilterInput

  """
  Used to filter on the `current_players_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  current_players_object: PlayerFieldsListFilterInput

  """
  Used to filter on the `details` field.

  When `null` or an empty object is passed, matches all documents.
  """
  details: TeamDetailsFilterInput

  """
  Used to filter on the `forbes_valuation_moneys_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  forbes_valuation_moneys_nested: MoneyListFilterInput

  """
  Used to filter on the `forbes_valuation_moneys_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  forbes_valuation_moneys_object: MoneyFieldsListFilterInput

  """
  Used to filter on the `forbes_valuations` field.

  When `null` or an empty object is passed, matches all documents.
  """
  forbes_valuations: JsonSafeLongListFilterInput

  """
  Used to filter on the `formed_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  formed_on: DateFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `league` field.

  When `null` or an empty object is passed, matches all documents.
  """
  league: StringFilterInput

  """
  Used to filter on the `nested_fields` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nested_fields: TeamNestedFieldsFilterInput

  """
  Used to filter on the `nested_fields2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nested_fields2: TeamNestedFieldsFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamFilterInput

  """
  Used to filter on the `past_names` field.

  When `null` or an empty object is passed, matches all documents.
  """
  past_names: StringListFilterInput

  """
  Used to filter on the `seasons_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_nested: TeamSeasonListFilterInput

  """
  Used to filter on the `seasons_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons_object: TeamSeasonFieldsListFilterInput

  """
  Used to filter on the `stadium_location` field.

  When `null` or an empty object is passed, matches all documents.
  """
  stadium_location: GeoLocationFilterInput

  """
  Used to filter on the `won_championships_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  won_championships_at: DateTimeListFilterInput
}

"""
Type used to specify the `Team` fields to group by for aggregations.
"""
type TeamGroupedBy {
  """
  The `country_code` field value for this group.
  """
  country_code: ID

  """
  The `current_name` field value for this group.
  """
  current_name: String

  """
  The `current_players_object` field value for this group.

  Note: `current_players_object` is a collection field, but selecting this field
  will group on individual values of the selected subfields of
  `current_players_object`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `current_players_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `current_players_object` multiple times for a single document, that document will only be included in the group
  once.
  """
  current_players_object: PlayerGroupedBy

  """
  The `details` field value for this group.
  """
  details: TeamDetailsGroupedBy

  """
  The `forbes_valuation_moneys_object` field value for this group.

  Note: `forbes_valuation_moneys_object` is a collection field, but selecting
  this field will group on individual values of the selected subfields of
  `forbes_valuation_moneys_object`.
  That means that a document may be grouped into multiple aggregation groupings
  (i.e. when its `forbes_valuation_moneys_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `forbes_valuation_moneys_object` multiple times for a single document,
  that document will only be included in the group
  once.
  """
  forbes_valuation_moneys_object: MoneyGroupedBy

  """
  Offers the different grouping options for the `formed_on` value within this group.
  """
  formed_on: DateGroupedBy

  """
  The `league` field value for this group.
  """
  league: String

  """
  The `seasons_object` field value for this group.

  Note: `seasons_object` is a collection field, but selecting this field will
  group on individual values of the selected subfields of `seasons_object`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `seasons_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `seasons_object` multiple times for a single document, that document will only be included in the group
  once.
  """
  seasons_object: TeamSeasonGroupedBy
}

"""
Return type representing a bucket of `Money` objects for a sub-aggregation within each `TeamAggregation`.
"""
type TeamMoneySubAggregation {
  """
  Provides computed aggregated values over all `Money` documents in a sub-aggregation bucket.
  """
  aggregated_values: MoneyAggregatedValues

  """
  Details of the count of `Money` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Money` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: MoneyGroupedBy
}

"""
Represents a collection of `TeamMoneySubAggregation` results.
"""
type TeamMoneySubAggregationConnection {
  """
  The list of `TeamMoneySubAggregation` results.
  """
  nodes: [TeamMoneySubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

type TeamNestedFields {
  current_players: [Player!]!
  forbes_valuation_moneys: [Money!]!
  seasons: [TeamSeason!]!
}

"""
Input type used to specify filters on `TeamNestedFields` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamNestedFieldsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamNestedFieldsFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamNestedFieldsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamNestedFieldsFilterInput!]

  """
  Used to filter on the `current_players` field.

  When `null` or an empty object is passed, matches all documents.
  """
  current_players: PlayerListFilterInput

  """
  Used to filter on the `forbes_valuation_moneys` field.

  When `null` or an empty object is passed, matches all documents.
  """
  forbes_valuation_moneys: MoneyListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamNestedFieldsFilterInput

  """
  Used to filter on the `seasons` field.

  When `null` or an empty object is passed, matches all documents.
  """
  seasons: TeamSeasonListFilterInput
}

"""
Return type representing a bucket of `PlayerSeason` objects for a sub-aggregation within each `TeamPlayerSubAggregation`.
"""
type TeamPlayerPlayerSeasonSubAggregation {
  """
  Provides computed aggregated values over all `PlayerSeason` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerSeasonAggregatedValues

  """
  Details of the count of `PlayerSeason` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `PlayerSeason` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerSeasonGroupedBy
}

"""
Represents a collection of `TeamPlayerPlayerSeasonSubAggregation` results.
"""
type TeamPlayerPlayerSeasonSubAggregationConnection {
  """
  The list of `TeamPlayerPlayerSeasonSubAggregation` results.
  """
  nodes: [TeamPlayerPlayerSeasonSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `PlayerSeason` objects for a sub-aggregation within each `TeamAggregation`.
"""
type TeamPlayerSeasonSubAggregation {
  """
  Provides computed aggregated values over all `PlayerSeason` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerSeasonAggregatedValues

  """
  Details of the count of `PlayerSeason` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `PlayerSeason` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerSeasonGroupedBy
}

"""
Represents a collection of `TeamPlayerSeasonSubAggregation` results.
"""
type TeamPlayerSeasonSubAggregationConnection {
  """
  The list of `TeamPlayerSeasonSubAggregation` results.
  """
  nodes: [TeamPlayerSeasonSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `Sponsorship` objects for a sub-aggregation within each `TeamPlayerSubAggregation`.
"""
type TeamPlayerSponsorshipSubAggregation {
  """
  Provides computed aggregated values over all `Sponsorship` documents in a sub-aggregation bucket.
  """
  aggregated_values: SponsorshipAggregatedValues

  """
  Details of the count of `Sponsorship` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Sponsorship` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: SponsorshipGroupedBy
}

"""
Represents a collection of `TeamPlayerSponsorshipSubAggregation` results.
"""
type TeamPlayerSponsorshipSubAggregationConnection {
  """
  The list of `TeamPlayerSponsorshipSubAggregation` results.
  """
  nodes: [TeamPlayerSponsorshipSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `Player` objects for a sub-aggregation within each `TeamAggregation`.
"""
type TeamPlayerSubAggregation {
  """
  Provides computed aggregated values over all `Player` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerAggregatedValues

  """
  Details of the count of `Player` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Player` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerGroupedBy

  """
  Used to perform sub-aggregations of `TeamPlayerSubAggregation` data.
  """
  sub_aggregations: TeamPlayerSubAggregationSubAggregations
}

"""
Provides access to the `sub_aggregations` under `affiliations` within each `TeamPlayerSubAggregation`.
"""
type TeamPlayerSubAggregationAffiliationsSubAggregations {
  """
  Used to perform a sub-aggregation of `sponsorships_nested`.
  """
  sponsorships_nested(
    """
    Used to filter the `Sponsorship` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: SponsorshipFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerSponsorshipSubAggregationConnection
}

"""
Represents a collection of `TeamPlayerSubAggregation` results.
"""
type TeamPlayerSubAggregationConnection {
  """
  The list of `TeamPlayerSubAggregation` results.
  """
  nodes: [TeamPlayerSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Provides access to the `sub_aggregations` within each `TeamPlayerSubAggregation`.
"""
type TeamPlayerSubAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `affiliations`.
  """
  affiliations: TeamPlayerSubAggregationAffiliationsSubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `PlayerSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamPlayerPlayerSeasonSubAggregationConnection
}

type TeamRecord {
  first_win_on: Date
  last_win_on: Date
  losses: Int
  wins: Int
}

"""
Type used to perform aggregation computations on `TeamRecord` fields.
"""
type TeamRecordAggregatedValues {
  """
  Computed aggregate values for the `first_win_on` field.
  """
  first_win_on: DateAggregatedValues

  """
  Computed aggregate values for the `last_win_on` field.
  """
  last_win_on: DateAggregatedValues

  """
  Computed aggregate values for the `losses` field.
  """
  losses: IntAggregatedValues

  """
  Computed aggregate values for the `wins` field.
  """
  wins: IntAggregatedValues
}

"""
Input type used to specify filters on a `TeamRecord` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamRecordFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamRecordFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamRecordFieldsListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamRecordFieldsListFilterInput!]

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Used to filter on the `first_win_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  first_win_on: DateListFilterInput

  """
  Used to filter on the `last_win_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  last_win_on: DateListFilterInput

  """
  Used to filter on the `losses` field.

  When `null` or an empty object is passed, matches all documents.
  """
  losses: IntListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamRecordFieldsListFilterInput

  """
  Used to filter on the `wins` field.

  When `null` or an empty object is passed, matches all documents.
  """
  wins: IntListFilterInput
}

"""
Input type used to specify filters on `TeamRecord` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamRecordFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamRecordFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamRecordFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamRecordFilterInput!]

  """
  Used to filter on the `first_win_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  first_win_on: DateFilterInput

  """
  Used to filter on the `last_win_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  last_win_on: DateFilterInput

  """
  Used to filter on the `losses` field.

  When `null` or an empty object is passed, matches all documents.
  """
  losses: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamRecordFilterInput

  """
  Used to filter on the `wins` field.

  When `null` or an empty object is passed, matches all documents.
  """
  wins: IntFilterInput
}

"""
Type used to specify the `TeamRecord` fields to group by for aggregations.
"""
type TeamRecordGroupedBy {
  """
  Offers the different grouping options for the `first_win_on` value within this group.
  """
  first_win_on: DateGroupedBy

  """
  Offers the different grouping options for the `last_win_on` value within this group.
  """
  last_win_on: DateGroupedBy

  """
  The `losses` field value for this group.
  """
  losses: Int

  """
  The `wins` field value for this group.
  """
  wins: Int
}

type TeamSeason {
  count: Int
  notes: [String!]!
  players_nested: [Player!]!
  players_object: [Player!]!
  record: TeamRecord
  started_at: DateTime
  was_shortened: Boolean
  won_games_at: [DateTime!]!
  year: Int
}

"""
Type used to perform aggregation computations on `TeamSeason` fields.
"""
type TeamSeasonAggregatedValues {
  """
  Computed aggregate values for the `count` field.
  """
  count: IntAggregatedValues

  """
  Computed aggregate values for the `notes` field.
  """
  notes: NonNumericAggregatedValues

  """
  Computed aggregate values for the `players_object` field.
  """
  players_object: PlayerAggregatedValues

  """
  Computed aggregate values for the `record` field.
  """
  record: TeamRecordAggregatedValues

  """
  Computed aggregate values for the `started_at` field.
  """
  started_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `was_shortened` field.
  """
  was_shortened: NonNumericAggregatedValues

  """
  Computed aggregate values for the `won_games_at` field.
  """
  won_games_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `year` field.
  """
  year: IntAggregatedValues
}

"""
Input type used to specify filters on a `TeamSeason` object referenced directly
or transitively from a list field that has been configured to index each leaf field as
its own flattened list of values.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamSeasonFieldsListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamSeasonFieldsListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamSeasonFieldsListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamSeasonFieldsListFilterInput!]

  """
  Used to filter on the `count` field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamSeasonFieldsListFilterInput

  """
  Used to filter on the `notes` field.

  When `null` or an empty object is passed, matches all documents.
  """
  notes: StringListFilterInput

  """
  Used to filter on the `players_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  players_nested: PlayerListFilterInput

  """
  Used to filter on the `players_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  players_object: PlayerFieldsListFilterInput

  """
  Used to filter on the `record` field.

  When `null` or an empty object is passed, matches all documents.
  """
  record: TeamRecordFieldsListFilterInput

  """
  Used to filter on the `started_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  started_at: DateTimeListFilterInput

  """
  Used to filter on the `was_shortened` field.

  When `null` or an empty object is passed, matches all documents.
  """
  was_shortened: BooleanListFilterInput

  """
  Used to filter on the `won_games_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  won_games_at: DateTimeListFilterInput

  """
  Used to filter on the `year` field.

  When `null` or an empty object is passed, matches all documents.
  """
  year: IntListFilterInput
}

"""
Input type used to specify filters on `TeamSeason` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamSeasonFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamSeasonFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamSeasonFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamSeasonFilterInput!]

  """
  Used to filter on the `count` field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamSeasonFilterInput

  """
  Used to filter on the `notes` field.

  When `null` or an empty object is passed, matches all documents.
  """
  notes: StringListFilterInput

  """
  Used to filter on the `players_nested` field.

  When `null` or an empty object is passed, matches all documents.
  """
  players_nested: PlayerListFilterInput

  """
  Used to filter on the `players_object` field.

  When `null` or an empty object is passed, matches all documents.
  """
  players_object: PlayerFieldsListFilterInput

  """
  Used to filter on the `record` field.

  When `null` or an empty object is passed, matches all documents.
  """
  record: TeamRecordFilterInput

  """
  Used to filter on the `started_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  started_at: DateTimeFilterInput

  """
  Used to filter on the `was_shortened` field.

  When `null` or an empty object is passed, matches all documents.
  """
  was_shortened: BooleanFilterInput

  """
  Used to filter on the `won_games_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  won_games_at: DateTimeListFilterInput

  """
  Used to filter on the `year` field.

  When `null` or an empty object is passed, matches all documents.
  """
  year: IntFilterInput
}

"""
Type used to specify the `TeamSeason` fields to group by for aggregations.
"""
type TeamSeasonGroupedBy {
  """
  The `count` field value for this group.
  """
  count: Int

  """
  The individual value from `notes` for this group.

  Note: `notes` is a collection field, but selecting this field will group on individual values of `notes`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `notes`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `notes` multiple times for a single document, that document will only be included in the group
  once.
  """
  note: String

  """
  The `players_object` field value for this group.

  Note: `players_object` is a collection field, but selecting this field will
  group on individual values of the selected subfields of `players_object`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `players_object`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `players_object` multiple times for a single document, that document will only be included in the group
  once.
  """
  players_object: PlayerGroupedBy

  """
  The `record` field value for this group.
  """
  record: TeamRecordGroupedBy

  """
  Offers the different grouping options for the `started_at` value within this group.
  """
  started_at: DateTimeGroupedBy

  """
  The `was_shortened` field value for this group.
  """
  was_shortened: Boolean

  """
  The individual value from `won_games_at` for this group.

  Note: `won_games_at` is a collection field, but selecting this field will group on individual values of `won_games_at`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `won_games_at`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `won_games_at` multiple times for a single document, that document will only be included in the group
  once.
  """
  won_game_at: DateTimeGroupedBy

  """
  The `year` field value for this group.
  """
  year: Int
}

"""
Input type used to specify filters on `[TeamSeason]` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input TeamSeasonListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TeamSeasonListFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TeamSeasonListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TeamSeasonListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  When `null` or an empty object is passed, matches all documents.
  """
  any_satisfy: TeamSeasonFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  When `null` or an empty object is passed, matches all documents.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TeamSeasonListFilterInput
}

"""
Enumerates the ways `Team`s can be sorted.
"""
enum TeamSortOrderInput {
  """
  Sorts ascending by the `country_code` field.
  """
  country_code_ASC

  """
  Sorts descending by the `country_code` field.
  """
  country_code_DESC

  """
  Sorts ascending by the `current_name` field.
  """
  current_name_ASC

  """
  Sorts descending by the `current_name` field.
  """
  current_name_DESC

  """
  Sorts ascending by the `details.count` field.
  """
  details_count_ASC

  """
  Sorts descending by the `details.count` field.
  """
  details_count_DESC

  """
  Sorts ascending by the `formed_on` field.
  """
  formed_on_ASC

  """
  Sorts descending by the `formed_on` field.
  """
  formed_on_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `league` field.
  """
  league_ASC

  """
  Sorts descending by the `league` field.
  """
  league_DESC
}

"""
Return type representing a bucket of `Sponsorship` objects for a sub-aggregation within each `TeamAggregation`.
"""
type TeamSponsorshipSubAggregation {
  """
  Provides computed aggregated values over all `Sponsorship` documents in a sub-aggregation bucket.
  """
  aggregated_values: SponsorshipAggregatedValues

  """
  Details of the count of `Sponsorship` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Sponsorship` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: SponsorshipGroupedBy
}

"""
Represents a collection of `TeamSponsorshipSubAggregation` results.
"""
type TeamSponsorshipSubAggregationConnection {
  """
  The list of `TeamSponsorshipSubAggregation` results.
  """
  nodes: [TeamSponsorshipSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `PlayerSeason` objects for a
sub-aggregation within each `TeamTeamSeasonPlayerSubAggregation`.
"""
type TeamTeamSeasonPlayerPlayerSeasonSubAggregation {
  """
  Provides computed aggregated values over all `PlayerSeason` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerSeasonAggregatedValues

  """
  Details of the count of `PlayerSeason` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `PlayerSeason` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerSeasonGroupedBy
}

"""
Represents a collection of `TeamTeamSeasonPlayerPlayerSeasonSubAggregation` results.
"""
type TeamTeamSeasonPlayerPlayerSeasonSubAggregationConnection {
  """
  The list of `TeamTeamSeasonPlayerPlayerSeasonSubAggregation` results.
  """
  nodes: [TeamTeamSeasonPlayerPlayerSeasonSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `PlayerSeason` objects for a
sub-aggregation within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonPlayerSeasonSubAggregation {
  """
  Provides computed aggregated values over all `PlayerSeason` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerSeasonAggregatedValues

  """
  Details of the count of `PlayerSeason` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `PlayerSeason` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerSeasonGroupedBy
}

"""
Represents a collection of `TeamTeamSeasonPlayerSeasonSubAggregation` results.
"""
type TeamTeamSeasonPlayerSeasonSubAggregationConnection {
  """
  The list of `TeamTeamSeasonPlayerSeasonSubAggregation` results.
  """
  nodes: [TeamTeamSeasonPlayerSeasonSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `Sponsorship` objects for a sub-aggregation
within each `TeamTeamSeasonPlayerSubAggregation`.
"""
type TeamTeamSeasonPlayerSponsorshipSubAggregation {
  """
  Provides computed aggregated values over all `Sponsorship` documents in a sub-aggregation bucket.
  """
  aggregated_values: SponsorshipAggregatedValues

  """
  Details of the count of `Sponsorship` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Sponsorship` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: SponsorshipGroupedBy
}

"""
Represents a collection of `TeamTeamSeasonPlayerSponsorshipSubAggregation` results.
"""
type TeamTeamSeasonPlayerSponsorshipSubAggregationConnection {
  """
  The list of `TeamTeamSeasonPlayerSponsorshipSubAggregation` results.
  """
  nodes: [TeamTeamSeasonPlayerSponsorshipSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `Player` objects for a sub-aggregation within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonPlayerSubAggregation {
  """
  Provides computed aggregated values over all `Player` documents in a sub-aggregation bucket.
  """
  aggregated_values: PlayerAggregatedValues

  """
  Details of the count of `Player` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Player` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: PlayerGroupedBy

  """
  Used to perform sub-aggregations of `TeamTeamSeasonPlayerSubAggregation` data.
  """
  sub_aggregations: TeamTeamSeasonPlayerSubAggregationSubAggregations
}

"""
Provides access to the `sub_aggregations` under `affiliations` within each `TeamTeamSeasonPlayerSubAggregation`.
"""
type TeamTeamSeasonPlayerSubAggregationAffiliationsSubAggregations {
  """
  Used to perform a sub-aggregation of `sponsorships_nested`.
  """
  sponsorships_nested(
    """
    Used to filter the `Sponsorship` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: SponsorshipFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonPlayerSponsorshipSubAggregationConnection
}

"""
Represents a collection of `TeamTeamSeasonPlayerSubAggregation` results.
"""
type TeamTeamSeasonPlayerSubAggregationConnection {
  """
  The list of `TeamTeamSeasonPlayerSubAggregation` results.
  """
  nodes: [TeamTeamSeasonPlayerSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Provides access to the `sub_aggregations` within each `TeamTeamSeasonPlayerSubAggregation`.
"""
type TeamTeamSeasonPlayerSubAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `affiliations`.
  """
  affiliations: TeamTeamSeasonPlayerSubAggregationAffiliationsSubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `PlayerSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonPlayerPlayerSeasonSubAggregationConnection
}

"""
Return type representing a bucket of `Sponsorship` objects for a sub-aggregation within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonSponsorshipSubAggregation {
  """
  Provides computed aggregated values over all `Sponsorship` documents in a sub-aggregation bucket.
  """
  aggregated_values: SponsorshipAggregatedValues

  """
  Details of the count of `Sponsorship` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `Sponsorship` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: SponsorshipGroupedBy
}

"""
Represents a collection of `TeamTeamSeasonSponsorshipSubAggregation` results.
"""
type TeamTeamSeasonSponsorshipSubAggregationConnection {
  """
  The list of `TeamTeamSeasonSponsorshipSubAggregation` results.
  """
  nodes: [TeamTeamSeasonSponsorshipSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Return type representing a bucket of `TeamSeason` objects for a sub-aggregation within each `TeamAggregation`.
"""
type TeamTeamSeasonSubAggregation {
  """
  Provides computed aggregated values over all `TeamSeason` documents in a sub-aggregation bucket.
  """
  aggregated_values: TeamSeasonAggregatedValues

  """
  Details of the count of `TeamSeason` documents in a sub-aggregation bucket.
  """
  count_detail: AggregationCountDetail

  """
  Used to specify the `TeamSeason` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  grouped_by: TeamSeasonGroupedBy

  """
  Used to perform sub-aggregations of `TeamTeamSeasonSubAggregation` data.
  """
  sub_aggregations: TeamTeamSeasonSubAggregationSubAggregations
}

"""
Represents a collection of `TeamTeamSeasonSubAggregation` results.
"""
type TeamTeamSeasonSubAggregationConnection {
  """
  The list of `TeamTeamSeasonSubAggregation` results.
  """
  nodes: [TeamTeamSeasonSubAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Provides access to the `sub_aggregations` under `players_object.affiliations` within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonSubAggregationPlayersObjectAffiliationsSubAggregations {
  """
  Used to perform a sub-aggregation of `sponsorships_nested`.
  """
  sponsorships_nested(
    """
    Used to filter the `Sponsorship` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: SponsorshipFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonSponsorshipSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` under `players_object` within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonSubAggregationPlayersObjectSubAggregations {
  """
  Used to perform a sub-aggregation of `affiliations`.
  """
  affiliations: TeamTeamSeasonSubAggregationPlayersObjectAffiliationsSubAggregations

  """
  Used to perform a sub-aggregation of `seasons_nested`.
  """
  seasons_nested(
    """
    Used to filter the `PlayerSeason` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerSeasonFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonPlayerSeasonSubAggregationConnection
}

"""
Provides access to the `sub_aggregations` within each `TeamTeamSeasonSubAggregation`.
"""
type TeamTeamSeasonSubAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `players_nested`.
  """
  players_nested(
    """
    Used to filter the `Player` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: PlayerFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): TeamTeamSeasonPlayerSubAggregationConnection

  """
  Used to perform a sub-aggregation of `players_object`.
  """
  players_object: TeamTeamSeasonSubAggregationPlayersObjectSubAggregations
}

"""
Input type used to specify filters on `String` fields that have been indexed for full text search.

Will match all documents if passed as an empty object (or as `null`).
"""
input TextFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TextFilterInput` input because of collisions between
  key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [TextFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [TextFilterInput!]

  """
  Matches records where the field value matches the provided value using full text search.

  When `null` is passed, matches all documents.
  """
  matches: String @deprecated(reason: "Use `matches_query` instead.")

  """
  Matches records where the field value has a phrase matching the provided phrase using
  full text search. This is stricter than `matches_query`: all terms must match
  and be in the same order as the provided phrase.

  When `null` is passed, matches all documents.
  """
  matches_phrase: MatchesPhraseFilterInput

  """
  Matches records where the field value matches the provided query using full text search.
  This is more lenient than `matches_phrase`: the order of terms is ignored, and,
  by default, only one search term is required to be in the field value.

  When `null` is passed, matches all documents.
  """
  matches_query: MatchesQueryFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: TextFilterInput
}

"""
An [IANA time zone identifier](https://www.iana.org/time-zones), such as `America/Los_Angeles` or `UTC`.

For a full list of valid identifiers, see the [wikipedia
article](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
"""
scalar TimeZone

"""
A custom scalar type that allows any type of data, including:

- strings
- numbers
- objects and arrays (nested as deeply as you like)
- booleans

Note: fields of this type are effectively untyped. We recommend it only be used for
parts of your schema that can't be statically typed.
"""
scalar Untyped

"""
Input type used to specify filters on `Untyped` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input UntypedFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `UntypedFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [UntypedFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [UntypedFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  When `null` is passed, matches all documents. When an empty list is passed,
  this part of the filter matches no documents. When `null` is passed in the
  list, this part of the filter matches records where the field value is `null`.
  """
  equal_to_any_of: [Untyped]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: UntypedFilterInput
}

"""
For more performant queries on this type, please filter on `workspace_id` if possible.
"""
type Widget implements NamedEntity @key(fields: "id") {
  amount_cents: Int!
  amount_cents2: Int!
  amounts: [Int!]!

  """
  Aggregations over the `components` data.
  """
  component_aggregations(
    """
    Used to forward-paginate through the `component_aggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `component_aggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Component` documents that get aggregated over based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `component_aggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `component_aggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `component_aggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ComponentAggregationConnection
  components(
    """
    Used to forward-paginate through the `components`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `components`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `components` based on the provided criteria.
    """
    filter: ComponentFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `components`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `components`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `components`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `components`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `components` should be sorted.
    """
    order_by: [ComponentSortOrderInput!]
  ): ComponentConnection
  cost: Money
  cost_currency_introduced_on: Date
  cost_currency_name: String
  cost_currency_primary_continent: String
  cost_currency_symbol: String
  cost_currency_unit: String
  created_at: DateTime!
  created_at2: DateTime!
  created_at_time_of_day: LocalTime
  created_on: Date
  fees: [Money!]!
  id: ID!
  inventor: Inventor
  metadata: Untyped
  name: String
  name_text: String
  named_inventor: NamedInventor
  options: WidgetOptions
  release_dates: [Date!]!
  release_timestamps: [DateTime!]!
  size: Size
  tags: [String!]!
  the_options: WidgetOptions
  weight_in_ng: JsonSafeLong!
  weight_in_ng_str: LongString!
  workspace: WidgetWorkspace
  workspace_id: ID
  workspace_name: String
}

"""
Type used to perform aggregation computations on `Widget` fields.
"""
type WidgetAggregatedValues {
  """
  Computed aggregate values for the `amount_cents` field.
  """
  amount_cents: IntAggregatedValues

  """
  Computed aggregate values for the `amount_cents2` field.
  """
  amount_cents2: IntAggregatedValues

  """
  Computed aggregate values for the `amounts` field.
  """
  amounts: IntAggregatedValues

  """
  Computed aggregate values for the `cost` field.
  """
  cost: MoneyAggregatedValues

  """
  Computed aggregate values for the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on: DateAggregatedValues

  """
  Computed aggregate values for the `cost_currency_name` field.
  """
  cost_currency_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_symbol` field.
  """
  cost_currency_symbol: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_unit` field.
  """
  cost_currency_unit: NonNumericAggregatedValues

  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at2` field.
  """
  created_at2: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at_time_of_day` field.
  """
  created_at_time_of_day: LocalTimeAggregatedValues

  """
  Computed aggregate values for the `created_on` field.
  """
  created_on: DateAggregatedValues

  """
  Computed aggregate values for the `fees` field.
  """
  fees: MoneyAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `inventor` field.
  """
  inventor: InventorAggregatedValues

  """
  Computed aggregate values for the `metadata` field.
  """
  metadata: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `named_inventor` field.
  """
  named_inventor: NamedInventorAggregatedValues

  """
  Computed aggregate values for the `options` field.
  """
  options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `release_dates` field.
  """
  release_dates: DateAggregatedValues

  """
  Computed aggregate values for the `release_timestamps` field.
  """
  release_timestamps: DateTimeAggregatedValues

  """
  Computed aggregate values for the `size` field.
  """
  size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `tags` field.
  """
  tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `the_options` field.
  """
  the_options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng` field.
  """
  weight_in_ng: JsonSafeLongAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng_str` field.
  """
  weight_in_ng_str: LongStringAggregatedValues

  """
  Computed aggregate values for the `workspace_id` field.
  """
  workspace_id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `workspace_name` field.
  """
  workspace_name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Widget` documents for an aggregations query.
"""
type WidgetAggregation {
  """
  Provides computed aggregated values over all `Widget` documents in an aggregation bucket.
  """
  aggregated_values: WidgetAggregatedValues

  """
  The count of `Widget` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Widget` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: WidgetGroupedBy
}

"""
Represents a paginated collection of `WidgetAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetAggregationConnection {
  """
  Wraps a specific `WidgetAggregation` to pair it with its pagination cursor.
  """
  edges: [WidgetAggregationEdge!]!

  """
  The list of `WidgetAggregation` results.
  """
  nodes: [WidgetAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `WidgetAggregation` in the context of a `WidgetAggregationConnection`,
providing access to both the `WidgetAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetAggregationEdge {
  """
  The `Cursor` of this `WidgetAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetAggregation`.
  """
  cursor: Cursor

  """
  The `WidgetAggregation` of this edge.
  """
  node: WidgetAggregation
}

"""
Represents a paginated collection of `Widget` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetConnection {
  """
  Wraps a specific `Widget` to pair it with its pagination cursor.
  """
  edges: [WidgetEdge!]!

  """
  The list of `Widget` results.
  """
  nodes: [Widget!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
For more performant queries on this type, please filter on `primary_continent` if possible.
"""
type WidgetCurrency @key(fields: "id") {
  details: CurrencyDetails
  id: ID!
  introduced_on: Date
  name: String
  nested_fields: WidgetCurrencyNestedFields
  oldest_widget_created_at: DateTime
  primary_continent: String
  widget_fee_currencies: [String!]!
  widget_names(
    """
    Used to forward-paginate through the `widget_names`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `widget_names`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used in conjunction with the `after` argument to forward-paginate through the `widget_names`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `widget_names`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `widget_names`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `widget_names`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): StringConnection
  widget_options: WidgetOptionSets
  widget_tags: [String!]!
}

"""
Type used to perform aggregation computations on `WidgetCurrency` fields.
"""
type WidgetCurrencyAggregatedValues {
  """
  Computed aggregate values for the `details` field.
  """
  details: CurrencyDetailsAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `introduced_on` field.
  """
  introduced_on: DateAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `nested_fields` field.
  """
  nested_fields: WidgetCurrencyNestedFieldsAggregatedValues

  """
  Computed aggregate values for the `oldest_widget_created_at` field.
  """
  oldest_widget_created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `primary_continent` field.
  """
  primary_continent: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_fee_currencies` field.
  """
  widget_fee_currencies: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_names` field.
  """
  widget_names: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget_options` field.
  """
  widget_options: WidgetOptionSetsAggregatedValues

  """
  Computed aggregate values for the `widget_tags` field.
  """
  widget_tags: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `WidgetCurrency` documents for an aggregations query.
"""
type WidgetCurrencyAggregation {
  """
  Provides computed aggregated values over all `WidgetCurrency` documents in an aggregation bucket.
  """
  aggregated_values: WidgetCurrencyAggregatedValues

  """
  The count of `WidgetCurrency` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `WidgetCurrency` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: WidgetCurrencyGroupedBy
}

"""
Represents a paginated collection of `WidgetCurrencyAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetCurrencyAggregationConnection {
  """
  Wraps a specific `WidgetCurrencyAggregation` to pair it with its pagination cursor.
  """
  edges: [WidgetCurrencyAggregationEdge!]!

  """
  The list of `WidgetCurrencyAggregation` results.
  """
  nodes: [WidgetCurrencyAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `WidgetCurrencyAggregation` in the context of a `WidgetCurrencyAggregationConnection`,
providing access to both the `WidgetCurrencyAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetCurrencyAggregationEdge {
  """
  The `Cursor` of this `WidgetCurrencyAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetCurrencyAggregation`.
  """
  cursor: Cursor

  """
  The `WidgetCurrencyAggregation` of this edge.
  """
  node: WidgetCurrencyAggregation
}

"""
Represents a paginated collection of `WidgetCurrency` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetCurrencyConnection {
  """
  Wraps a specific `WidgetCurrency` to pair it with its pagination cursor.
  """
  edges: [WidgetCurrencyEdge!]!

  """
  The list of `WidgetCurrency` results.
  """
  nodes: [WidgetCurrency!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `WidgetCurrency` in the context of a `WidgetCurrencyConnection`,
providing access to both the `WidgetCurrency` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetCurrencyEdge {
  """
  The `Cursor` of this `WidgetCurrency`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetCurrency`.
  """
  cursor: Cursor

  """
  The `WidgetCurrency` of this edge.
  """
  node: WidgetCurrency
}

"""
Input type used to specify filters on `WidgetCurrency` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetCurrencyFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetCurrencyFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetCurrencyFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetCurrencyFilterInput!]

  """
  Used to filter on the `details` field.

  When `null` or an empty object is passed, matches all documents.
  """
  details: CurrencyDetailsFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `introduced_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  introduced_on: DateFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `nested_fields` field.

  When `null` or an empty object is passed, matches all documents.
  """
  nested_fields: WidgetCurrencyNestedFieldsFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetCurrencyFilterInput

  """
  Used to filter on the `oldest_widget_created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  oldest_widget_created_at: DateTimeFilterInput

  """
  Used to filter on the `primary_continent` field.

  When `null` or an empty object is passed, matches all documents.
  """
  primary_continent: StringFilterInput

  """
  Used to filter on the `widget_fee_currencies` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_fee_currencies: StringListFilterInput

  """
  Used to filter on the `widget_names` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_names: StringListFilterInput

  """
  Used to filter on the `widget_options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_options: WidgetOptionSetsFilterInput

  """
  Used to filter on the `widget_tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget_tags: StringListFilterInput
}

"""
Type used to specify the `WidgetCurrency` fields to group by for aggregations.
"""
type WidgetCurrencyGroupedBy {
  """
  The `details` field value for this group.
  """
  details: CurrencyDetailsGroupedBy

  """
  Offers the different grouping options for the `introduced_on` value within this group.
  """
  introduced_on: DateGroupedBy

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `nested_fields` field value for this group.
  """
  nested_fields: WidgetCurrencyNestedFieldsGroupedBy

  """
  Offers the different grouping options for the `oldest_widget_created_at` value within this group.
  """
  oldest_widget_created_at: DateTimeGroupedBy

  """
  The `primary_continent` field value for this group.
  """
  primary_continent: String

  """
  The individual value from `widget_names` for this group.

  Note: `widget_names` is a collection field, but selecting this field will group on individual values of `widget_names`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `widget_names`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `widget_names` multiple times for a single document, that document will only be included in the group
  once.
  """
  widget_name: String
}

type WidgetCurrencyNestedFields {
  max_widget_cost: Int
}

"""
Type used to perform aggregation computations on `WidgetCurrencyNestedFields` fields.
"""
type WidgetCurrencyNestedFieldsAggregatedValues {
  """
  Computed aggregate values for the `max_widget_cost` field.
  """
  max_widget_cost: IntAggregatedValues
}

"""
Input type used to specify filters on `WidgetCurrencyNestedFields` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetCurrencyNestedFieldsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetCurrencyNestedFieldsFilterInput` input because
  of collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetCurrencyNestedFieldsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetCurrencyNestedFieldsFilterInput!]

  """
  Used to filter on the `max_widget_cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  max_widget_cost: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetCurrencyNestedFieldsFilterInput
}

"""
Type used to specify the `WidgetCurrencyNestedFields` fields to group by for aggregations.
"""
type WidgetCurrencyNestedFieldsGroupedBy {
  """
  The `max_widget_cost` field value for this group.
  """
  max_widget_cost: Int
}

"""
Enumerates the ways `WidgetCurrency`s can be sorted.
"""
enum WidgetCurrencySortOrderInput {
  """
  Sorts ascending by the `details.symbol` field.
  """
  details_symbol_ASC

  """
  Sorts descending by the `details.symbol` field.
  """
  details_symbol_DESC

  """
  Sorts ascending by the `details.unit` field.
  """
  details_unit_ASC

  """
  Sorts descending by the `details.unit` field.
  """
  details_unit_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `introduced_on` field.
  """
  introduced_on_ASC

  """
  Sorts descending by the `introduced_on` field.
  """
  introduced_on_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `nested_fields.max_widget_cost` field.
  """
  nested_fields_max_widget_cost_ASC

  """
  Sorts descending by the `nested_fields.max_widget_cost` field.
  """
  nested_fields_max_widget_cost_DESC

  """
  Sorts ascending by the `oldest_widget_created_at` field.
  """
  oldest_widget_created_at_ASC

  """
  Sorts descending by the `oldest_widget_created_at` field.
  """
  oldest_widget_created_at_DESC

  """
  Sorts ascending by the `primary_continent` field.
  """
  primary_continent_ASC

  """
  Sorts descending by the `primary_continent` field.
  """
  primary_continent_DESC
}

"""
Represents a specific `Widget` in the context of a `WidgetConnection`,
providing access to both the `Widget` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetEdge {
  """
  The `Cursor` of this `Widget`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Widget`.
  """
  cursor: Cursor

  """
  The `Widget` of this edge.
  """
  node: Widget
}

"""
Input type used to specify filters on `Widget` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetFilterInput!]

  """
  Used to filter on the `amount_cents` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents: IntFilterInput

  """
  Used to filter on the `amount_cents2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents2: IntFilterInput

  """
  Used to filter on the `amounts` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amounts: IntListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetFilterInput!]

  """
  Used to filter on the `cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost: MoneyFilterInput

  """
  Used to filter on the `cost_currency_introduced_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_introduced_on: DateFilterInput

  """
  Used to filter on the `cost_currency_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_name: StringFilterInput

  """
  Used to filter on the `cost_currency_primary_continent` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_primary_continent: StringFilterInput

  """
  Used to filter on the `cost_currency_symbol` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_symbol: StringFilterInput

  """
  Used to filter on the `cost_currency_unit` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_unit: StringFilterInput

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `created_at2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at2: DateTimeFilterInput

  """
  Used to filter on the `created_at_time_of_day` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at_time_of_day: LocalTimeFilterInput

  """
  Used to filter on the `created_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_on: DateFilterInput

  """
  Used to filter on the `fees` field.

  When `null` or an empty object is passed, matches all documents.
  """
  fees: MoneyFieldsListFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  inventor: InventorFilterInput

  """
  Used to filter on the `metadata` field.

  When `null` or an empty object is passed, matches all documents.
  """
  metadata: UntypedFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `name_text` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name_text: TextFilterInput

  """
  Used to filter on the `named_inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  named_inventor: NamedInventorFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetFilterInput

  """
  Used to filter on the `options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  options: WidgetOptionsFilterInput

  """
  Used to filter on the `release_dates` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_dates: DateListFilterInput

  """
  Used to filter on the `release_timestamps` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_timestamps: DateTimeListFilterInput

  """
  Used to filter on the `size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  size: SizeFilterInput

  """
  Used to filter on the `tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  tags: StringListFilterInput

  """
  Used to filter on the `the_options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  the_options: WidgetOptionsFilterInput

  """
  Used to filter on the `weight_in_ng` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng: JsonSafeLongFilterInput

  """
  Used to filter on the `weight_in_ng_str` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng_str: LongStringFilterInput

  """
  Used to filter on the `workspace_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_id: IDFilterInput

  """
  Used to filter on the `workspace_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_name: StringFilterInput
}

"""
Type used to specify the `Widget` fields to group by for aggregations.
"""
type WidgetGroupedBy {
  """
  The `amount_cents` field value for this group.
  """
  amount_cents: Int

  """
  The `amount_cents2` field value for this group.
  """
  amount_cents2: Int

  """
  The `cost` field value for this group.
  """
  cost: MoneyGroupedBy

  """
  Offers the different grouping options for the `cost_currency_introduced_on` value within this group.
  """
  cost_currency_introduced_on: DateGroupedBy

  """
  The `cost_currency_name` field value for this group.
  """
  cost_currency_name: String

  """
  The `cost_currency_primary_continent` field value for this group.
  """
  cost_currency_primary_continent: String

  """
  The `cost_currency_symbol` field value for this group.
  """
  cost_currency_symbol: String

  """
  The `cost_currency_unit` field value for this group.
  """
  cost_currency_unit: String

  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  Offers the different grouping options for the `created_at2` value within this group.
  """
  created_at2: DateTimeGroupedBy

  """
  The `created_at_time_of_day` field value for this group.
  """
  created_at_time_of_day: LocalTime

  """
  Offers the different grouping options for the `created_on` value within this group.
  """
  created_on: DateGroupedBy

  """
  The `fees` field value for this group.

  Note: `fees` is a collection field, but selecting this field will group on
  individual values of the selected subfields of `fees`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `fees`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `fees` multiple times for a single document, that document will only be included in the group
  once.
  """
  fees: MoneyGroupedBy

  """
  The `inventor` field value for this group.
  """
  inventor: InventorGroupedBy

  """
  The `metadata` field value for this group.
  """
  metadata: Untyped

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `named_inventor` field value for this group.
  """
  named_inventor: NamedInventorGroupedBy

  """
  The `options` field value for this group.
  """
  options: WidgetOptionsGroupedBy

  """
  The individual value from `release_dates` for this group.

  Note: `release_dates` is a collection field, but selecting this field will group on individual values of `release_dates`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_dates`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_dates` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_date: DateGroupedBy

  """
  The individual value from `release_timestamps` for this group.

  Note: `release_timestamps` is a collection field, but selecting this field
  will group on individual values of `release_timestamps`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_timestamps`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_timestamps` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_timestamp: DateTimeGroupedBy

  """
  The `size` field value for this group.
  """
  size: Size

  """
  The individual value from `tags` for this group.

  Note: `tags` is a collection field, but selecting this field will group on individual values of `tags`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `tags`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `tags` multiple times for a single document, that document will only be included in the group
  once.
  """
  tag: String

  """
  The `the_options` field value for this group.
  """
  the_options: WidgetOptionsGroupedBy

  """
  The `weight_in_ng` field value for this group.
  """
  weight_in_ng: JsonSafeLong

  """
  The `weight_in_ng_str` field value for this group.
  """
  weight_in_ng_str: LongString

  """
  The `workspace_id` field value for this group.
  """
  workspace_id: ID

  """
  The `workspace_name` field value for this group.
  """
  workspace_name: String
}

type WidgetOptionSets {
  colors: [Color!]!
  sizes: [Size!]!
}

"""
Type used to perform aggregation computations on `WidgetOptionSets` fields.
"""
type WidgetOptionSetsAggregatedValues {
  """
  Computed aggregate values for the `colors` field.
  """
  colors: NonNumericAggregatedValues

  """
  Computed aggregate values for the `sizes` field.
  """
  sizes: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `WidgetOptionSets` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetOptionSetsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetOptionSetsFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetOptionSetsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetOptionSetsFilterInput!]

  """
  Used to filter on the `colors` field.

  When `null` or an empty object is passed, matches all documents.
  """
  colors: ColorListFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetOptionSetsFilterInput

  """
  Used to filter on the `sizes` field.

  When `null` or an empty object is passed, matches all documents.
  """
  sizes: SizeListFilterInput
}

type WidgetOptions {
  color: Color
  is_draft: Boolean
  size: Size
  the_size: Size
}

"""
Type used to perform aggregation computations on `WidgetOptions` fields.
"""
type WidgetOptionsAggregatedValues {
  """
  Computed aggregate values for the `color` field.
  """
  color: NonNumericAggregatedValues

  """
  Computed aggregate values for the `is_draft` field.
  """
  is_draft: NonNumericAggregatedValues

  """
  Computed aggregate values for the `size` field.
  """
  size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `the_size` field.
  """
  the_size: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `WidgetOptions` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetOptionsFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetOptionsFilterInput` input because of collisions
  between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetOptionsFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetOptionsFilterInput!]

  """
  Used to filter on the `color` field.

  When `null` or an empty object is passed, matches all documents.
  """
  color: ColorFilterInput

  """
  Used to filter on the `is_draft` field.

  When `null` or an empty object is passed, matches all documents.
  """
  is_draft: BooleanFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetOptionsFilterInput

  """
  Used to filter on the `size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  size: SizeFilterInput

  """
  Used to filter on the `the_size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  the_size: SizeFilterInput
}

"""
Type used to specify the `WidgetOptions` fields to group by for aggregations.
"""
type WidgetOptionsGroupedBy {
  """
  The `color` field value for this group.
  """
  color: Color

  """
  The `is_draft` field value for this group.
  """
  is_draft: Boolean

  """
  The `size` field value for this group.
  """
  size: Size

  """
  The `the_size` field value for this group.
  """
  the_size: Size
}

union WidgetOrAddress = Address | Widget

"""
Type used to perform aggregation computations on `WidgetOrAddress` fields.
"""
type WidgetOrAddressAggregatedValues {
  """
  Computed aggregate values for the `amount_cents` field.
  """
  amount_cents: IntAggregatedValues

  """
  Computed aggregate values for the `amount_cents2` field.
  """
  amount_cents2: IntAggregatedValues

  """
  Computed aggregate values for the `amounts` field.
  """
  amounts: IntAggregatedValues

  """
  Computed aggregate values for the `cost` field.
  """
  cost: MoneyAggregatedValues

  """
  Computed aggregate values for the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on: DateAggregatedValues

  """
  Computed aggregate values for the `cost_currency_name` field.
  """
  cost_currency_name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_symbol` field.
  """
  cost_currency_symbol: NonNumericAggregatedValues

  """
  Computed aggregate values for the `cost_currency_unit` field.
  """
  cost_currency_unit: NonNumericAggregatedValues

  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at2` field.
  """
  created_at2: DateTimeAggregatedValues

  """
  Computed aggregate values for the `created_at_time_of_day` field.
  """
  created_at_time_of_day: LocalTimeAggregatedValues

  """
  Computed aggregate values for the `created_on` field.
  """
  created_on: DateAggregatedValues

  """
  Computed aggregate values for the `fees` field.
  """
  fees: MoneyAggregatedValues

  """
  Computed aggregate values for the `full_address` field.
  """
  full_address: NonNumericAggregatedValues

  """
  Computed aggregate values for the `geo_location` field.
  """
  geo_location: NonNumericAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `inventor` field.
  """
  inventor: InventorAggregatedValues

  """
  Computed aggregate values for the `metadata` field.
  """
  metadata: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `named_inventor` field.
  """
  named_inventor: NamedInventorAggregatedValues

  """
  Computed aggregate values for the `options` field.
  """
  options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `release_dates` field.
  """
  release_dates: DateAggregatedValues

  """
  Computed aggregate values for the `release_timestamps` field.
  """
  release_timestamps: DateTimeAggregatedValues

  """
  Computed aggregate values for the `shapes` field.
  """
  shapes: NonNumericAggregatedValues

  """
  Computed aggregate values for the `size` field.
  """
  size: NonNumericAggregatedValues

  """
  Computed aggregate values for the `tags` field.
  """
  tags: NonNumericAggregatedValues

  """
  Computed aggregate values for the `the_options` field.
  """
  the_options: WidgetOptionsAggregatedValues

  """
  Computed aggregate values for the `timestamps` field.
  """
  timestamps: AddressTimestampsAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng` field.
  """
  weight_in_ng: JsonSafeLongAggregatedValues

  """
  Computed aggregate values for the `weight_in_ng_str` field.
  """
  weight_in_ng_str: LongStringAggregatedValues

  """
  Computed aggregate values for the `workspace_id` field.
  """
  workspace_id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `workspace_name` field.
  """
  workspace_name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `WidgetOrAddress` documents for an aggregations query.
"""
type WidgetOrAddressAggregation {
  """
  Provides computed aggregated values over all `WidgetOrAddress` documents in an aggregation bucket.
  """
  aggregated_values: WidgetOrAddressAggregatedValues

  """
  The count of `WidgetOrAddress` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `WidgetOrAddress` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: WidgetOrAddressGroupedBy
}

"""
Represents a paginated collection of `WidgetOrAddressAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetOrAddressAggregationConnection {
  """
  Wraps a specific `WidgetOrAddressAggregation` to pair it with its pagination cursor.
  """
  edges: [WidgetOrAddressAggregationEdge!]!

  """
  The list of `WidgetOrAddressAggregation` results.
  """
  nodes: [WidgetOrAddressAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `WidgetOrAddressAggregation` in the context of a `WidgetOrAddressAggregationConnection`,
providing access to both the `WidgetOrAddressAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetOrAddressAggregationEdge {
  """
  The `Cursor` of this `WidgetOrAddressAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetOrAddressAggregation`.
  """
  cursor: Cursor

  """
  The `WidgetOrAddressAggregation` of this edge.
  """
  node: WidgetOrAddressAggregation
}

"""
Represents a paginated collection of `WidgetOrAddress` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetOrAddressConnection {
  """
  Wraps a specific `WidgetOrAddress` to pair it with its pagination cursor.
  """
  edges: [WidgetOrAddressEdge!]!

  """
  The list of `WidgetOrAddress` results.
  """
  nodes: [WidgetOrAddress!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `WidgetOrAddress` in the context of a `WidgetOrAddressConnection`,
providing access to both the `WidgetOrAddress` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetOrAddressEdge {
  """
  The `Cursor` of this `WidgetOrAddress`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetOrAddress`.
  """
  cursor: Cursor

  """
  The `WidgetOrAddress` of this edge.
  """
  node: WidgetOrAddress
}

"""
Input type used to specify filters on `WidgetOrAddress` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetOrAddressFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetOrAddressFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetOrAddressFilterInput!]

  """
  Used to filter on the `amount_cents` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents: IntFilterInput

  """
  Used to filter on the `amount_cents2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amount_cents2: IntFilterInput

  """
  Used to filter on the `amounts` field.

  When `null` or an empty object is passed, matches all documents.
  """
  amounts: IntListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetOrAddressFilterInput!]

  """
  Used to filter on the `cost` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost: MoneyFilterInput

  """
  Used to filter on the `cost_currency_introduced_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_introduced_on: DateFilterInput

  """
  Used to filter on the `cost_currency_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_name: StringFilterInput

  """
  Used to filter on the `cost_currency_primary_continent` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_primary_continent: StringFilterInput

  """
  Used to filter on the `cost_currency_symbol` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_symbol: StringFilterInput

  """
  Used to filter on the `cost_currency_unit` field.

  When `null` or an empty object is passed, matches all documents.
  """
  cost_currency_unit: StringFilterInput

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `created_at2` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at2: DateTimeFilterInput

  """
  Used to filter on the `created_at_time_of_day` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at_time_of_day: LocalTimeFilterInput

  """
  Used to filter on the `created_on` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_on: DateFilterInput

  """
  Used to filter on the `fees` field.

  When `null` or an empty object is passed, matches all documents.
  """
  fees: MoneyFieldsListFilterInput

  """
  Used to filter on the `full_address` field.

  When `null` or an empty object is passed, matches all documents.
  """
  full_address: StringFilterInput

  """
  Used to filter on the `geo_location` field.

  When `null` or an empty object is passed, matches all documents.
  """
  geo_location: GeoLocationFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  inventor: InventorFilterInput

  """
  Used to filter on the `metadata` field.

  When `null` or an empty object is passed, matches all documents.
  """
  metadata: UntypedFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Used to filter on the `name_text` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name_text: TextFilterInput

  """
  Used to filter on the `named_inventor` field.

  When `null` or an empty object is passed, matches all documents.
  """
  named_inventor: NamedInventorFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetOrAddressFilterInput

  """
  Used to filter on the `options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  options: WidgetOptionsFilterInput

  """
  Used to filter on the `release_dates` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_dates: DateListFilterInput

  """
  Used to filter on the `release_timestamps` field.

  When `null` or an empty object is passed, matches all documents.
  """
  release_timestamps: DateTimeListFilterInput

  """
  Used to filter on the `size` field.

  When `null` or an empty object is passed, matches all documents.
  """
  size: SizeFilterInput

  """
  Used to filter on the `tags` field.

  When `null` or an empty object is passed, matches all documents.
  """
  tags: StringListFilterInput

  """
  Used to filter on the `the_options` field.

  When `null` or an empty object is passed, matches all documents.
  """
  the_options: WidgetOptionsFilterInput

  """
  Used to filter on the `timestamps` field.

  When `null` or an empty object is passed, matches all documents.
  """
  timestamps: AddressTimestampsFilterInput

  """
  Used to filter on the `weight_in_ng` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng: JsonSafeLongFilterInput

  """
  Used to filter on the `weight_in_ng_str` field.

  When `null` or an empty object is passed, matches all documents.
  """
  weight_in_ng_str: LongStringFilterInput

  """
  Used to filter on the `workspace_id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_id: IDFilterInput

  """
  Used to filter on the `workspace_name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  workspace_name: StringFilterInput
}

"""
Type used to specify the `WidgetOrAddress` fields to group by for aggregations.
"""
type WidgetOrAddressGroupedBy {
  """
  The `amount_cents` field value for this group.
  """
  amount_cents: Int

  """
  The `amount_cents2` field value for this group.
  """
  amount_cents2: Int

  """
  The `cost` field value for this group.
  """
  cost: MoneyGroupedBy

  """
  Offers the different grouping options for the `cost_currency_introduced_on` value within this group.
  """
  cost_currency_introduced_on: DateGroupedBy

  """
  The `cost_currency_name` field value for this group.
  """
  cost_currency_name: String

  """
  The `cost_currency_primary_continent` field value for this group.
  """
  cost_currency_primary_continent: String

  """
  The `cost_currency_symbol` field value for this group.
  """
  cost_currency_symbol: String

  """
  The `cost_currency_unit` field value for this group.
  """
  cost_currency_unit: String

  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  Offers the different grouping options for the `created_at2` value within this group.
  """
  created_at2: DateTimeGroupedBy

  """
  The `created_at_time_of_day` field value for this group.
  """
  created_at_time_of_day: LocalTime

  """
  Offers the different grouping options for the `created_on` value within this group.
  """
  created_on: DateGroupedBy

  """
  The `fees` field value for this group.

  Note: `fees` is a collection field, but selecting this field will group on
  individual values of the selected subfields of `fees`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `fees`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `fees` multiple times for a single document, that document will only be included in the group
  once.
  """
  fees: MoneyGroupedBy

  """
  The `full_address` field value for this group.
  """
  full_address: String

  """
  The `inventor` field value for this group.
  """
  inventor: InventorGroupedBy

  """
  The `metadata` field value for this group.
  """
  metadata: Untyped

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `named_inventor` field value for this group.
  """
  named_inventor: NamedInventorGroupedBy

  """
  The `options` field value for this group.
  """
  options: WidgetOptionsGroupedBy

  """
  The individual value from `release_dates` for this group.

  Note: `release_dates` is a collection field, but selecting this field will group on individual values of `release_dates`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_dates`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_dates` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_date: DateGroupedBy

  """
  The individual value from `release_timestamps` for this group.

  Note: `release_timestamps` is a collection field, but selecting this field
  will group on individual values of `release_timestamps`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `release_timestamps`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `release_timestamps` multiple times for a single document, that document will only be included in the group
  once.
  """
  release_timestamp: DateTimeGroupedBy

  """
  The `size` field value for this group.
  """
  size: Size

  """
  The individual value from `tags` for this group.

  Note: `tags` is a collection field, but selecting this field will group on individual values of `tags`.
  That means that a document may be grouped into multiple aggregation groupings (i.e. when its `tags`
  field has multiple values) leading to some data duplication in the response. However, if a value shows
  up in `tags` multiple times for a single document, that document will only be included in the group
  once.
  """
  tag: String

  """
  The `the_options` field value for this group.
  """
  the_options: WidgetOptionsGroupedBy

  """
  The `timestamps` field value for this group.
  """
  timestamps: AddressTimestampsGroupedBy

  """
  The `weight_in_ng` field value for this group.
  """
  weight_in_ng: JsonSafeLong

  """
  The `weight_in_ng_str` field value for this group.
  """
  weight_in_ng_str: LongString

  """
  The `workspace_id` field value for this group.
  """
  workspace_id: ID

  """
  The `workspace_name` field value for this group.
  """
  workspace_name: String
}

"""
Enumerates the ways `WidgetOrAddress`s can be sorted.
"""
enum WidgetOrAddressSortOrderInput {
  """
  Sorts ascending by the `amount_cents2` field.
  """
  amount_cents2_ASC

  """
  Sorts descending by the `amount_cents2` field.
  """
  amount_cents2_DESC

  """
  Sorts ascending by the `amount_cents` field.
  """
  amount_cents_ASC

  """
  Sorts descending by the `amount_cents` field.
  """
  amount_cents_DESC

  """
  Sorts ascending by the `cost.amount_cents` field.
  """
  cost_amount_cents_ASC

  """
  Sorts descending by the `cost.amount_cents` field.
  """
  cost_amount_cents_DESC

  """
  Sorts ascending by the `cost.currency` field.
  """
  cost_currency_ASC

  """
  Sorts descending by the `cost.currency` field.
  """
  cost_currency_DESC

  """
  Sorts ascending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_ASC

  """
  Sorts descending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_DESC

  """
  Sorts ascending by the `cost_currency_name` field.
  """
  cost_currency_name_ASC

  """
  Sorts descending by the `cost_currency_name` field.
  """
  cost_currency_name_DESC

  """
  Sorts ascending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_ASC

  """
  Sorts descending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_DESC

  """
  Sorts ascending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_ASC

  """
  Sorts descending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_DESC

  """
  Sorts ascending by the `cost_currency_unit` field.
  """
  cost_currency_unit_ASC

  """
  Sorts descending by the `cost_currency_unit` field.
  """
  cost_currency_unit_DESC

  """
  Sorts ascending by the `created_at2` field.
  """
  created_at2_ASC

  """
  Sorts descending by the `created_at2` field.
  """
  created_at2_DESC

  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_ASC

  """
  Sorts descending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_DESC

  """
  Sorts ascending by the `created_on` field.
  """
  created_on_ASC

  """
  Sorts descending by the `created_on` field.
  """
  created_on_DESC

  """
  Sorts ascending by the `full_address` field.
  """
  full_address_ASC

  """
  Sorts descending by the `full_address` field.
  """
  full_address_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `inventor.name` field.
  """
  inventor_name_ASC

  """
  Sorts descending by the `inventor.name` field.
  """
  inventor_name_DESC

  """
  Sorts ascending by the `inventor.nationality` field.
  """
  inventor_nationality_ASC

  """
  Sorts descending by the `inventor.nationality` field.
  """
  inventor_nationality_DESC

  """
  Sorts ascending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_ASC

  """
  Sorts descending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_DESC

  """
  Sorts ascending by the `metadata` field.
  """
  metadata_ASC

  """
  Sorts descending by the `metadata` field.
  """
  metadata_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `named_inventor.name` field.
  """
  named_inventor_name_ASC

  """
  Sorts descending by the `named_inventor.name` field.
  """
  named_inventor_name_DESC

  """
  Sorts ascending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_ASC

  """
  Sorts descending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_DESC

  """
  Sorts ascending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_ASC

  """
  Sorts descending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_DESC

  """
  Sorts ascending by the `options.color` field.
  """
  options_color_ASC

  """
  Sorts descending by the `options.color` field.
  """
  options_color_DESC

  """
  Sorts ascending by the `options.size` field.
  """
  options_size_ASC

  """
  Sorts descending by the `options.size` field.
  """
  options_size_DESC

  """
  Sorts ascending by the `options.the_size` field.
  """
  options_the_size_ASC

  """
  Sorts descending by the `options.the_size` field.
  """
  options_the_size_DESC

  """
  Sorts ascending by the `size` field.
  """
  size_ASC

  """
  Sorts descending by the `size` field.
  """
  size_DESC

  """
  Sorts ascending by the `the_options.color` field.
  """
  the_options_color_ASC

  """
  Sorts descending by the `the_options.color` field.
  """
  the_options_color_DESC

  """
  Sorts ascending by the `the_options.size` field.
  """
  the_options_size_ASC

  """
  Sorts descending by the `the_options.size` field.
  """
  the_options_size_DESC

  """
  Sorts ascending by the `the_options.the_size` field.
  """
  the_options_the_size_ASC

  """
  Sorts descending by the `the_options.the_size` field.
  """
  the_options_the_size_DESC

  """
  Sorts ascending by the `timestamps.created_at` field.
  """
  timestamps_created_at_ASC

  """
  Sorts descending by the `timestamps.created_at` field.
  """
  timestamps_created_at_DESC

  """
  Sorts ascending by the `weight_in_ng` field.
  """
  weight_in_ng_ASC

  """
  Sorts descending by the `weight_in_ng` field.
  """
  weight_in_ng_DESC

  """
  Sorts ascending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_ASC

  """
  Sorts descending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_DESC

  """
  Sorts ascending by the `workspace_id` field.
  """
  workspace_id_ASC

  """
  Sorts descending by the `workspace_id` field.
  """
  workspace_id_DESC

  """
  Sorts ascending by the `workspace_name` field.
  """
  workspace_name_ASC

  """
  Sorts descending by the `workspace_name` field.
  """
  workspace_name_DESC
}

"""
Enumerates the ways `Widget`s can be sorted.
"""
enum WidgetSortOrderInput {
  """
  Sorts ascending by the `amount_cents2` field.
  """
  amount_cents2_ASC

  """
  Sorts descending by the `amount_cents2` field.
  """
  amount_cents2_DESC

  """
  Sorts ascending by the `amount_cents` field.
  """
  amount_cents_ASC

  """
  Sorts descending by the `amount_cents` field.
  """
  amount_cents_DESC

  """
  Sorts ascending by the `cost.amount_cents` field.
  """
  cost_amount_cents_ASC

  """
  Sorts descending by the `cost.amount_cents` field.
  """
  cost_amount_cents_DESC

  """
  Sorts ascending by the `cost.currency` field.
  """
  cost_currency_ASC

  """
  Sorts descending by the `cost.currency` field.
  """
  cost_currency_DESC

  """
  Sorts ascending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_ASC

  """
  Sorts descending by the `cost_currency_introduced_on` field.
  """
  cost_currency_introduced_on_DESC

  """
  Sorts ascending by the `cost_currency_name` field.
  """
  cost_currency_name_ASC

  """
  Sorts descending by the `cost_currency_name` field.
  """
  cost_currency_name_DESC

  """
  Sorts ascending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_ASC

  """
  Sorts descending by the `cost_currency_primary_continent` field.
  """
  cost_currency_primary_continent_DESC

  """
  Sorts ascending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_ASC

  """
  Sorts descending by the `cost_currency_symbol` field.
  """
  cost_currency_symbol_DESC

  """
  Sorts ascending by the `cost_currency_unit` field.
  """
  cost_currency_unit_ASC

  """
  Sorts descending by the `cost_currency_unit` field.
  """
  cost_currency_unit_DESC

  """
  Sorts ascending by the `created_at2` field.
  """
  created_at2_ASC

  """
  Sorts descending by the `created_at2` field.
  """
  created_at2_DESC

  """
  Sorts ascending by the `created_at` field.
  """
  created_at_ASC

  """
  Sorts descending by the `created_at` field.
  """
  created_at_DESC

  """
  Sorts ascending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_ASC

  """
  Sorts descending by the `created_at_time_of_day` field.
  """
  created_at_time_of_day_DESC

  """
  Sorts ascending by the `created_on` field.
  """
  created_on_ASC

  """
  Sorts descending by the `created_on` field.
  """
  created_on_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `inventor.name` field.
  """
  inventor_name_ASC

  """
  Sorts descending by the `inventor.name` field.
  """
  inventor_name_DESC

  """
  Sorts ascending by the `inventor.nationality` field.
  """
  inventor_nationality_ASC

  """
  Sorts descending by the `inventor.nationality` field.
  """
  inventor_nationality_DESC

  """
  Sorts ascending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_ASC

  """
  Sorts descending by the `inventor.stock_ticker` field.
  """
  inventor_stock_ticker_DESC

  """
  Sorts ascending by the `metadata` field.
  """
  metadata_ASC

  """
  Sorts descending by the `metadata` field.
  """
  metadata_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `named_inventor.name` field.
  """
  named_inventor_name_ASC

  """
  Sorts descending by the `named_inventor.name` field.
  """
  named_inventor_name_DESC

  """
  Sorts ascending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_ASC

  """
  Sorts descending by the `named_inventor.nationality` field.
  """
  named_inventor_nationality_DESC

  """
  Sorts ascending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_ASC

  """
  Sorts descending by the `named_inventor.stock_ticker` field.
  """
  named_inventor_stock_ticker_DESC

  """
  Sorts ascending by the `options.color` field.
  """
  options_color_ASC

  """
  Sorts descending by the `options.color` field.
  """
  options_color_DESC

  """
  Sorts ascending by the `options.size` field.
  """
  options_size_ASC

  """
  Sorts descending by the `options.size` field.
  """
  options_size_DESC

  """
  Sorts ascending by the `options.the_size` field.
  """
  options_the_size_ASC

  """
  Sorts descending by the `options.the_size` field.
  """
  options_the_size_DESC

  """
  Sorts ascending by the `size` field.
  """
  size_ASC

  """
  Sorts descending by the `size` field.
  """
  size_DESC

  """
  Sorts ascending by the `the_options.color` field.
  """
  the_options_color_ASC

  """
  Sorts descending by the `the_options.color` field.
  """
  the_options_color_DESC

  """
  Sorts ascending by the `the_options.size` field.
  """
  the_options_size_ASC

  """
  Sorts descending by the `the_options.size` field.
  """
  the_options_size_DESC

  """
  Sorts ascending by the `the_options.the_size` field.
  """
  the_options_the_size_ASC

  """
  Sorts descending by the `the_options.the_size` field.
  """
  the_options_the_size_DESC

  """
  Sorts ascending by the `weight_in_ng` field.
  """
  weight_in_ng_ASC

  """
  Sorts descending by the `weight_in_ng` field.
  """
  weight_in_ng_DESC

  """
  Sorts ascending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_ASC

  """
  Sorts descending by the `weight_in_ng_str` field.
  """
  weight_in_ng_str_DESC

  """
  Sorts ascending by the `workspace_id` field.
  """
  workspace_id_ASC

  """
  Sorts descending by the `workspace_id` field.
  """
  workspace_id_DESC

  """
  Sorts ascending by the `workspace_name` field.
  """
  workspace_name_ASC

  """
  Sorts descending by the `workspace_name` field.
  """
  workspace_name_DESC
}

type WidgetWorkspace @key(fields: "id") {
  id: ID!
  name: String
  widget: WorkspaceWidget
}

"""
Type used to perform aggregation computations on `WidgetWorkspace` fields.
"""
type WidgetWorkspaceAggregatedValues {
  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `widget` field.
  """
  widget: WorkspaceWidgetAggregatedValues
}

"""
Return type representing a bucket of `WidgetWorkspace` documents for an aggregations query.
"""
type WidgetWorkspaceAggregation {
  """
  Provides computed aggregated values over all `WidgetWorkspace` documents in an aggregation bucket.
  """
  aggregated_values: WidgetWorkspaceAggregatedValues

  """
  The count of `WidgetWorkspace` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `WidgetWorkspace` fields to group by. The returned values identify each aggregation bucket.
  """
  grouped_by: WidgetWorkspaceGroupedBy
}

"""
Represents a paginated collection of `WidgetWorkspaceAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetWorkspaceAggregationConnection {
  """
  Wraps a specific `WidgetWorkspaceAggregation` to pair it with its pagination cursor.
  """
  edges: [WidgetWorkspaceAggregationEdge!]!

  """
  The list of `WidgetWorkspaceAggregation` results.
  """
  nodes: [WidgetWorkspaceAggregation!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!
}

"""
Represents a specific `WidgetWorkspaceAggregation` in the context of a `WidgetWorkspaceAggregationConnection`,
providing access to both the `WidgetWorkspaceAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetWorkspaceAggregationEdge {
  """
  The `Cursor` of this `WidgetWorkspaceAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetWorkspaceAggregation`.
  """
  cursor: Cursor

  """
  The `WidgetWorkspaceAggregation` of this edge.
  """
  node: WidgetWorkspaceAggregation
}

"""
Represents a paginated collection of `WidgetWorkspace` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type WidgetWorkspaceConnection {
  """
  Wraps a specific `WidgetWorkspace` to pair it with its pagination cursor.
  """
  edges: [WidgetWorkspaceEdge!]!

  """
  The list of `WidgetWorkspace` results.
  """
  nodes: [WidgetWorkspace!]!

  """
  Provides pagination-related information.
  """
  page_info: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  total_edge_count: JsonSafeLong!
}

"""
Represents a specific `WidgetWorkspace` in the context of a `WidgetWorkspaceConnection`,
providing access to both the `WidgetWorkspace` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type WidgetWorkspaceEdge {
  """
  The `Cursor` of this `WidgetWorkspace`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `WidgetWorkspace`.
  """
  cursor: Cursor

  """
  The `WidgetWorkspace` of this edge.
  """
  node: WidgetWorkspace
}

"""
Input type used to specify filters on `WidgetWorkspace` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WidgetWorkspaceFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WidgetWorkspaceFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WidgetWorkspaceFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WidgetWorkspaceFilterInput!]

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Used to filter on the `name` field.

  When `null` or an empty object is passed, matches all documents.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WidgetWorkspaceFilterInput

  """
  Used to filter on the `widget` field.

  When `null` or an empty object is passed, matches all documents.
  """
  widget: WorkspaceWidgetFilterInput
}

"""
Type used to specify the `WidgetWorkspace` fields to group by for aggregations.
"""
type WidgetWorkspaceGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String

  """
  The `widget` field value for this group.
  """
  widget: WorkspaceWidgetGroupedBy
}

"""
Enumerates the ways `WidgetWorkspace`s can be sorted.
"""
enum WidgetWorkspaceSortOrderInput {
  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC

  """
  Sorts ascending by the `widget.created_at` field.
  """
  widget_created_at_ASC

  """
  Sorts descending by the `widget.created_at` field.
  """
  widget_created_at_DESC

  """
  Sorts ascending by the `widget.id` field.
  """
  widget_id_ASC

  """
  Sorts descending by the `widget.id` field.
  """
  widget_id_DESC
}

type WorkspaceWidget {
  created_at: DateTime
  id: ID!
}

"""
Type used to perform aggregation computations on `WorkspaceWidget` fields.
"""
type WorkspaceWidgetAggregatedValues {
  """
  Computed aggregate values for the `created_at` field.
  """
  created_at: DateTimeAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `WorkspaceWidget` fields.

Will match all documents if passed as an empty object (or as `null`).
"""
input WorkspaceWidgetFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `WorkspaceWidgetFilterInput` input because of
  collisions between key names. For example, if you want to AND multiple
  OR'd sub-filters (the equivalent of (A OR B) AND (C OR D)), you could do all_of: [{any_of: [...]}, {any_of: [...]}].

  When `null` or an empty list is passed, matches all documents.
  """
  all_of: [WorkspaceWidgetFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  When `null` is passed, matches all documents.
  When an empty list is passed, this part of the filter matches no documents.
  """
  any_of: [WorkspaceWidgetFilterInput!]

  """
  Used to filter on the `created_at` field.

  When `null` or an empty object is passed, matches all documents.
  """
  created_at: DateTimeFilterInput

  """
  Used to filter on the `id` field.

  When `null` or an empty object is passed, matches all documents.
  """
  id: IDFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  When `null` or an empty object is passed, matches no documents.
  """
  not: WorkspaceWidgetFilterInput
}

"""
Type used to specify the `WorkspaceWidget` fields to group by for aggregations.
"""
type WorkspaceWidgetGroupedBy {
  """
  Offers the different grouping options for the `created_at` value within this group.
  """
  created_at: DateTimeGroupedBy

  """
  The `id` field value for this group.
  """
  id: ID
}

"""
A custom scalar type required by the [Apollo Federation subgraph
spec](https://www.apollographql.com/docs/federation/subgraph-spec/#scalar-_any):

> This scalar is the type used for entity **representations** that the graph router
> passes to the `Query._entities` field. An `_Any` scalar is validated by matching
> its `__typename` and `@key` fields against entities defined in the subgraph schema.
>
> An `_Any` is serialized as a JSON object, like so:
>
> ```
> {
>   "__typename": "Product",
>   "upc": "abc123"
> }
> ```

Not intended for use by clients other than Apollo.
"""
scalar _Any

"""
A union type required by the [Apollo Federation subgraph
spec](https://www.apollographql.com/docs/federation/subgraph-spec/#union-_entity):

> **⚠️ This union type is generated dynamically based on the input subgraph schema!**
>
> This union's possible types must include all entities that the subgraph defines.
> It's the return type of the `Query._entities` field, which the graph router uses
> to directly access a subgraph's entity fields.
>
> For details, see [Defining the `_Entity` union](https://www.apollographql.com/docs/federation/subgraph-spec/#defining-the-_entity-union).

In an ElasticGraph schema, this is a union of all indexed types.

Not intended for use by clients other than Apollo.
"""
union _Entity = Component | Country | ElectricalPart | Manufacturer | MechanicalPart | Sponsor | Team | Widget | WidgetCurrency | WidgetWorkspace

"""
An object type required by the [Apollo Federation subgraph
spec](https://www.apollographql.com/docs/federation/subgraph-spec/#type-_service):

> This object type must have an `sdl: String!` field, which returns the SDL of the subgraph schema as a string.
>
> - The returned schema string _must_ include all uses of federation-specific directives (`@key`, `@requires`, etc.).
> - **If supporting Federation 1,** the schema _must not_ include any
definitions from [Subgraph schema additions](https://www.apollographql.com/docs/federation/subgraph-spec/#subgraph-schema-additions).
>
> For details, see [Enhanced introspection with `Query._service`](https://www.apollographql.com/docs/federation/subgraph-spec/#enhanced-introspection-with-query_service).

Not intended for use by clients other than Apollo.
"""
type _Service {
  """
  A field required by the [Apollo Federation subgraph
  spec](https://www.apollographql.com/docs/federation/subgraph-spec/#required-resolvers-for-introspection):

  > The returned `sdl` string has the following requirements:
  >
  > - It must **include** all uses of all federation-specific directives, such as `@key`.
  >     - All of these directives are shown in [Subgraph schema additions](https://www.apollographql.com/docs/federation/subgraph-spec/#subgraph-schema-additions).
  > - **If supporting Federation 1,** `sdl` must **omit** all automatically added definitions from
  >   [Subgraph schema additions](https://www.apollographql.com/docs/federation/subgraph-spec/#subgraph-schema-additions),
  >   such as `Query._service` and `_Service.sdl`!
  >     - If your library is _only_ supporting Federation 2, `sdl` can include these definitions.

  Not intended for use by clients other than Apollo.
  """
  sdl: String
}

"""
Scalar type used by the `@policy` directive required for Apollo Federation V2.6+.
"""
scalar federation__Policy

"""
Scalar type used by the `@requiresScopes` directive required for Apollo Federation V2.5+.
"""
scalar federation__Scope

"""
Scalar type used by the `@link` directive required for Apollo Federation V2.
"""
scalar link__Import

"""
Enum type used by the `@link` directive required for Apollo Federation V2.
"""
enum link__Purpose {
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}