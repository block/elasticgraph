module ElasticGraph
  class GraphQL
    module Aggregation
      module Resolvers
        class SubAggregationsSupertype
          attr_reader schema_element_names: SchemaArtifacts::RuntimeMetadata::SchemaElementNames
          attr_reader sub_aggregations: ::Hash[::String, NestedSubAggregation]
          attr_reader parent_queries: ::Array[Query]
          attr_reader sub_aggs_by_agg_key: ::Hash[::String, ::Hash[::String, untyped]]
          attr_reader field_path: ::Array[PathSegment]

          def self.new: (
            schema_element_names: SchemaArtifacts::RuntimeMetadata::SchemaElementNames,
            sub_aggregations: ::Hash[::String, NestedSubAggregation],
            parent_queries: ::Array[Query],
            sub_aggs_by_agg_key: ::Hash[::String, ::Hash[::String, untyped]],
            field_path: ::Array[PathSegment]
          ) -> instance | (
            SchemaArtifacts::RuntimeMetadata::SchemaElementNames,
            ::Hash[::String, NestedSubAggregation],
            ::Array[Query],
            ::Hash[::String, ::Hash[::String, untyped]],
            ::Array[PathSegment]
          ) -> instance

          def with: (
            ?schema_element_names: SchemaArtifacts::RuntimeMetadata::SchemaElementNames,
            ?sub_aggregations: ::Hash[::String, NestedSubAggregation],
            ?parent_queries: ::Array[Query],
            ?sub_aggs_by_agg_key: ::Hash[::String, ::Hash[::String, untyped]],
            ?field_path: ::Array[PathSegment]
          ) -> instance
        end

        class SubAggregations < SubAggregationsSupertype
          include GraphQL::Resolvers::_Resolvable

          private

          def extract_buckets: (::String, ::Hash[::String, untyped]) -> ::Array[::Hash[::String, untyped]]

          BUCKET_ADAPTERS: ::Hash[::String, groupingAdapter]
        end
      end
    end
  end
end
