module ElasticGraph
  class GraphQL
    class ConfigSupertype
      extend Support::Config::ClassMethods[Config]

      attr_reader default_page_size: ::Integer
      attr_reader max_page_size: ::Integer
      attr_reader slow_query_latency_warning_threshold_in_ms: ::Integer
      attr_reader client_resolver: Client::_Resolver
      attr_reader extension_modules: ::Array[::Module]
      attr_reader extension_settings: parsedYamlSettings

      def initialize: (
        ?default_page_size: ::Integer,
        ?max_page_size: ::Integer,
        ?slow_query_latency_warning_threshold_in_ms: ::Integer,
        ?client_resolver: Client::_Resolver,
        ?extension_modules: ::Array[::Module],
        ?extension_settings: parsedYamlSettings
      ) -> void

      def with: (
        ?default_page_size: ::Integer,
        ?max_page_size: ::Integer,
        ?slow_query_latency_warning_threshold_in_ms: ::Integer,
        ?client_resolver: Client::_Resolver,
        ?extension_modules: ::Array[::Module],
        ?extension_settings: parsedYamlSettings
      ) -> Config

      def self.members: () -> ::Array[::Symbol]
    end

    class Config < ConfigSupertype
      ELASTICGRAPH_CONFIG_KEYS: ::Array[::String]

      private

      def convert_values: (
        client_resolver: untyped,
        extension_modules: untyped,
        **untyped
      ) -> ::Hash[::Symbol, untyped]

      def load_client_resolver: (::Hash[::String, untyped]) -> Client::_Resolver
      def load_extension_modules: (::Array[::Hash[::String, untyped]]) -> ::Array[::Module]
    end
  end
end
