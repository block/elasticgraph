module ElasticGraph
  class GraphQL
    module Filtering
      type queryClause = RangeQuery | BooleanQuery
      type stringOrSymbolHash = ::Hash[(::String | ::Symbol), untyped]
      type occurrence = :must | :must_not | :filter | :should

      class BooleanQuerySupertype
        attr_reader occurrence: occurrence
        attr_reader clauses: ::Array[stringOrSymbolHash]

        def initialize: (
          occurrence,
          ::Array[stringOrSymbolHash]
        ) -> void

        def with: (
          ?occurrence: occurrence,
          ?clauses: ::Array[stringOrSymbolHash]
        ) -> BooleanQuery
      end

      class BooleanQuery < BooleanQuerySupertype
        def self.must: (*stringOrSymbolHash) -> BooleanQuery
        def self.filter: (*stringOrSymbolHash) -> BooleanQuery
        def self.should: (*stringOrSymbolHash) -> BooleanQuery
        def merge_into: (stringOrSymbolHash) -> void

        MATCH_ALL: ::Hash[Symbol, untyped]
        MATCH_ALL_FILTER: BooleanQuery
        MATCH_ALL_FILTER_HASH: ::Hash[Symbol, untyped]
        MATCH_NONE: ::Hash[Symbol, untyped]
        MATCH_NONE_FILTER: BooleanQuery
        MATCH_NONE_FILTER_HASH: ::Hash[Symbol, untyped]
      end
    end
  end
end
