module ElasticGraph
  class GraphQL
    class QueryExecutor
      def initialize: (
        schema: Schema,
        monotonic_clock: Support::MonotonicClock,
        logger: ::Logger,
        slow_query_threshold_ms: ::Integer,
        datastore_search_router: DatastoreSearchRouter,
        config: Config
      ) -> void

      def execute: (
        ::String?,
        ?client: Client,
        ?variables: ::Hash[::String, untyped],
        ?timeout_in_ms: ::Integer?,
        ?operation_name: ::String?,
        ?context: ::Hash[::Symbol, untyped],
        ?start_time_in_ms: ::Integer
      ) -> ::GraphQL::Query::Result

      private

      attr_reader schema: Schema
      @monotonic_clock: Support::MonotonicClock
      @logger: ::Logger
      @slow_query_threshold_ms: ::Integer
      @datastore_search_router: DatastoreSearchRouter
      @config: Config

      def build_and_execute_query: (
        query_string: ::String?,
        variables: ::Hash[::String, untyped],
        operation_name: ::String?,
        context: ::Hash[::Symbol, untyped],
        client: Client
      ) -> [::GraphQL::Query, ::GraphQL::Query::Result]

      def execute_query: (::GraphQL::Query, client: Client) -> ::GraphQL::Query::Result
      def full_description_of: (::GraphQL::Query) -> ::String
      def fingerprint_for: (::GraphQL::Query) -> ::String
      def directives_from_query_operation: (::GraphQL::Query) -> ::Hash[::String, ::Hash[::String, untyped]]
      def slo_result_for: (::GraphQL::Query, ::Integer) -> ::String?
    end
  end
end
