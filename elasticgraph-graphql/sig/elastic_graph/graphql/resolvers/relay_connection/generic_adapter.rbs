module ElasticGraph
  class GraphQL
    module Resolvers
      module RelayConnection
        interface _NodeWithCursor
          def cursor: () -> DecodedCursor
          def ==: (untyped) -> bool
          def !=: (untyped) -> bool
        end

        interface _EdgeType[N < _NodeWithCursor]
          def new: (Schema, N) -> GenericAdapter::Edge[N]
        end

        type edgeType[N < _NodeWithCursor] = ::Class & _EdgeType[N]

        class GenericAdapter[N < _NodeWithCursor] < ResolvableValueClass
          include _RelayConnection[N]

          attr_reader schema: Schema
          attr_reader raw_nodes: ::Array[N]
          attr_reader paginator: DatastoreQuery::Paginator[N]
          attr_reader to_sort_value: ^(N, DecodedCursor) -> ::Array[DatastoreQuery::Paginator::SortValue]
          attr_reader get_total_edge_count: ^() -> ::Integer?
          attr_reader edge_class: edgeType[N]

          def initialize: (
            schema: Schema,
            raw_nodes: ::Array[N],
            paginator: DatastoreQuery::Paginator[N],
            to_sort_value: ^(N, DecodedCursor) -> ::Array[DatastoreQuery::Paginator::SortValue],
            get_total_edge_count: ^() -> ::Integer?,
            edge_class: edgeType[N]
          ) -> void

          def with: (
            ?schema: Schema,
            ?raw_nodes: ::Array[N],
            ?paginator: DatastoreQuery::Paginator[N],
            ?to_sort_value: ^(N, DecodedCursor) -> ::Array[DatastoreQuery::Paginator::SortValue],
            ?get_total_edge_count: ^() -> ::Integer?,
            ?edge_class: edgeType[N]
          ) -> GenericAdapter[N]

          private

          @page_info: PageInfo[N]?
          @edges: ::Array[_RelayEdge[N]]?
          @nodes: ::Array[N]?

          @before_truncation_nodes: ::Array[N]?
          def before_truncation_nodes: () -> ::Array[N]

          class Edge[N < _NodeWithCursor] < ResolvableValueClass
            include _RelayEdge[N]
            def initialize: (Schema, N) -> void
          end
        end
      end
    end
  end
end
