module ElasticGraph
  class GraphQL
    module Resolvers
      module RelayConnection
        class SearchResponseAdapterBuilder
          def self.build_from: (
            query: DatastoreQuery,
            search_response: DatastoreResponse::SearchResponse,
            schema: Schema
          ) -> GraphQL::Resolvers::RelayConnection::GenericAdapter[DatastoreResponse::Document]
        end

        class DocumentEdge < GenericAdapter::Edge[DatastoreResponse::Document]
          @all_highlights: ::Array[SearchHighlight]?
          def all_highlights: () -> ::Array[SearchHighlight]

          type highlightsHash = ::Hash[::String, highlightsHash | ::Array[::String]]

          @highlights: highlightsHash?
          def highlights: () -> highlightsHash

          private

          def path_from: (::String, Schema::Type) -> ::Array[::String]?
        end

        class SearchHighlight < ResolvableValueClass
          attr_reader path: ::Array[::String]
          attr_reader snippets: ::Array[::String]

          def initialize: (
            Schema,
            ::Array[::String],
            ::Array[::String]
          ) -> void
        end
      end
    end
  end
end
