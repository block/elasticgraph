module ElasticGraph
  class GraphQL
    # Note: this is a partial signature definition (`schema.rb` is ignored in `Steepfile`)
    class Schema
      attr_reader graphql_schema: ::GraphQL::Schema
      attr_reader element_names: SchemaArtifacts::RuntimeMetadata::SchemaElementNames
      attr_reader logger: Logger

      def initialize: (
        graphql_schema_string: ::String,
        config: Config,
        logger: Logger,
        runtime_metadata: SchemaArtifacts::RuntimeMetadata::Schema,
        datastore_search_router: DatastoreSearchRouter,
        index_definitions_by_graphql_type: ::Hash[::String, ::Array[DatastoreCore::_IndexDefinition]],
        graphql_gem_plugins: ::Hash[::Class, ::Hash[::Symbol, untyped]],
        graphql_adapter: Resolvers::graphQLAdapter
      ) -> void

      def new_graphql_query: (
        ::String?,
        ?operation_name: ::String?,
        ?variables: ::Hash[::String, untyped],
        ?context: ::Hash[::Symbol, untyped],
        ?document: ::GraphQL::Language::Nodes::Document?,
        ?validate: bool
      ) -> ::GraphQL::Query

      def graphql_query_context: () -> ::GraphQL::Query::Context
      def type_from: (::GraphQL::Schema::_Type) -> Type
      def type_named: (::String) -> Type
      def document_type_stored_in: (::String) -> Type
      def field_named: (::String, ::String) -> Field
      def indexed_document_types: () -> ::Array[Type]
      def log_hidden_types: (Logger) -> void
    end
  end
end
