module ElasticGraph
  module HealthCheck
    type dataRecencyCheckHash = ::Hash[::String, untyped]

    class ConfigSupertype
      extend Support::Config::ClassMethods[Config]

      attr_reader clusters_to_consider: ::Array[::String]
      attr_reader data_recency_checks: ::Hash[::String, Config::DataRecencyCheck]

      def self.new: (
        ::Array[::String],
        ::Hash[::String, dataRecencyCheckHash]
      ) -> Config | (
        ?clusters_to_consider: ::Array[::String],
        ?data_recency_checks: ::Hash[::String, dataRecencyCheckHash]
      ) -> Config

      def with: (
        ?clusters_to_consider: ::Array[::String],
        ?data_recency_checks: ::Hash[::String, Config::DataRecencyCheck]) -> Config
    end

    class Config < ConfigSupertype
      private

      def convert_values: (clusters_to_consider: untyped, data_recency_checks: untyped) -> untyped

      class DataRecencyCheck
        attr_reader expected_max_recency_seconds: ::Integer
        attr_reader timestamp_field: ::String

        def initialize: (
          expected_max_recency_seconds: ::Integer,
          timestamp_field: ::String) -> DataRecencyCheck

        def with: (
          ?expected_max_recency_seconds: ::Integer,
          ?timestamp_field: ::String) -> DataRecencyCheck
      end
    end
  end
end
