module ElasticGraph
  class Indexer
    class DatastoreIndexingRouter
      MAPPING_CACHE_MAX_AGE_IN_MS_RANGE: ::Range[::Integer]

      def initialize: (
        datastore_clients_by_name: ::Hash[::String, DatastoreCore::_Client],
        mappings_by_index_def_name: ::Hash[::String, untyped],
        monotonic_clock: Support::MonotonicClock,
        logger: ::Logger,
        ?skip_mapping_completeness_validation: bool
      ) -> void

      def bulk: (::Array[_Operation], ?refresh: bool) -> BulkResult
      def source_event_versions_in_index: (::Array[_Operation]) -> ::Hash[_Operation, ::Hash[::String, ::Array[::Integer]]]
      def validate_mapping_completeness_of!: (
        ::Symbol,
        *DatastoreCore::indexDefinition
      ) -> void

      private

      @datastore_clients_by_name: ::Hash[::String, DatastoreCore::_Client]
      @mappings_by_index_def_name: ::Hash[::String, untyped]
      @logger: ::Logger
      @monotonic_clock: Support::MonotonicClock
      @cached_mappings: ::Hash[
        [DatastoreCore::_Client, DatastoreCore::indexDefinition],
        CachedMapping
      ]
      @skip_mapping_completeness_validation: bool

      def mapping_diffs_for: (
        DatastoreCore::indexDefinition,
        ::Symbol
      ) -> ::Hash[[::String, ::String], ::String]

      def cached_mappings_for: (
        DatastoreCore::indexDefinition,
        DatastoreCore::_Client
      ) -> ::Hash[DatastoreCore::indexDefinition, ::Hash[::String, untyped]]

      def fetch_mappings_from_datastore: (
        DatastoreCore::indexDefinition,
        DatastoreCore::_Client
      ) -> ::Hash[DatastoreCore::indexDefinition, ::Hash[::String, untyped]]

      def new_cached_mapping: (
        ::Hash[DatastoreCore::indexDefinition, ::Hash[::String, untyped]]
      ) -> CachedMapping

      def datastore_client_named: (::String) -> DatastoreCore::_Client

      class BulkResultSupertype
        attr_reader ops_and_results_by_cluster: ::Hash[::String, ::Array[[_Operation, Operation::Result]]]
        attr_reader noop_results: ::Array[Operation::Result]
        attr_reader failure_results: ::Array[Operation::Result]

        def initialize: (
          ops_and_results_by_cluster: ::Hash[::String, ::Array[[_Operation, Operation::Result]]],
          noop_results: ::Array[Operation::Result],
          failure_results: ::Array[Operation::Result]
        ) -> void

        def with: (
          ?ops_and_results_by_cluster: ::Hash[::String, ::Array[[_Operation, Operation::Result]]]
        ) -> BulkResult
      end

      class BulkResult < BulkResultSupertype
        def self.new: (
          ::Hash[::String, ::Array[[_Operation, Operation::Result]]]
        ) -> BulkResult

        def initialize: (
          ops_and_results_by_cluster: ::Hash[::String, ::Array[[_Operation, Operation::Result]]]
        ) -> void

        def successful_operations_by_cluster_name: (
          ?check_failures: bool
        ) -> ::Hash[::String, ::Array[_Operation]]

        def successful_operations: (
          ?check_failures: bool
        ) -> ::Array[_Operation]
      end

      class CachedMapping
        attr_reader mappings: ::Hash[DatastoreCore::indexDefinition, ::Hash[::String, untyped]]
        attr_reader expires_at: ::Integer

        def initialize: (
          ::Hash[DatastoreCore::indexDefinition, ::Hash[::String, untyped]],
          ::Integer
        ) -> void
      end
    end
  end
end
