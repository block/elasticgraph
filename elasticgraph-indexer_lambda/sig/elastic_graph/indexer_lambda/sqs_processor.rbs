module ElasticGraph
  module IndexerLambda
    class SqsProcessor
      def initialize: (
        Indexer::Processor,
        logger: ::Logger,
        ignore_sqs_latency_timestamps_from_arns: ::Set[::String],
        ?s3_client: Aws::S3::Client?,
      ) -> void

      def process: (::Hash[::String, untyped], ?refresh_indices: bool) -> void

      private

      @indexer_processor: Indexer::Processor
      @logger: ::Logger
      @s3_client: Aws::S3::Client?

      attr_reader ignore_sqs_latency_timestamps_from_arns: ::Set[::String]

      def events_from: (::Hash[::String, untyped]) -> ::Array[::Hash[::String, untyped]]
      S3_OFFLOADING_INDICATOR: String
      def extract_sqs_metadata: (::Hash[String, untyped]) -> ::Hash[::String, untyped]
      def millis_to_iso8601: (::String) -> ::String?
      def parse_jsonl: (::String) -> ::Array[::Hash[::String, untyped]]
      def get_payload_from_s3: (::String) -> ::String
      def s3_client: () -> Aws::S3::Client
      def format_response: (
        ::Array[Indexer::FailedEventError]
      ) -> {"batchItemFailures" => ::Array[{"itemIdentifier" => ::String}]}
    end
  end
end
