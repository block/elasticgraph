module ElasticGraph
  module QueryInterceptor
    type interceptorClass = Class & _InterceptorFactory

    class ConfigSupertype
      extend ::ElasticGraph::Config::ClassMethods[Config]

      attr_reader interceptors: ::Array[Config::InterceptorData]

      def initialize: (?interceptors: ::Array[::Hash[::String, untyped]]) -> void
      def with: (?interceptors: ::Array[Config::InterceptorData]) -> Config
    end

    class Config < ConfigSupertype
      def with_runtime_metadata_configs: (::Array[::Hash[::String, untyped]]) -> Config

      private

      def convert_values: (interceptors: untyped) -> untyped

      def load_interceptors: (::Array[::Hash[::String, untyped]]) -> ::Array[InterceptorData]

      class InterceptorData
        attr_reader klass: interceptorClass
        attr_reader config: ::Hash[::String, untyped]

        def initialize: (
          klass: interceptorClass,
          config: ::Hash[::String, untyped]
        ) -> void
      end

      class InterceptorInterface
        include _Interceptor
      end
    end

    interface _InterceptorFactory
      def new: (elasticgraph_graphql: ElasticGraph::GraphQL, config: ::Hash[::String, untyped]) -> _Interceptor
    end

    interface _Interceptor
      def initialize: (elasticgraph_graphql: ElasticGraph::GraphQL, config: ::Hash[::String, untyped]) -> void

      def intercept: (
        GraphQL::DatastoreQuery,
        field: GraphQL::Schema::Field,
        args: ::Hash[::String, untyped],
        http_request: GraphQL::HTTPRequest,
        context: ::GraphQL::Query::Context
      ) -> GraphQL::DatastoreQuery
    end
  end
end
