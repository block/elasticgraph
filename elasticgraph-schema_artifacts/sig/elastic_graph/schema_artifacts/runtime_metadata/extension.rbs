module ElasticGraph
  module SchemaArtifacts
    module RuntimeMetadata
      type extensionClass = ::Module | ::Class

      class ExtensionSupertype
        attr_reader extension_class: extensionClass
        attr_reader require_path: ::String
        attr_reader extension_config: ::Hash[::Symbol, untyped]
        attr_reader extension_name: ::String

        def initialize: (
          extension_class: extensionClass,
          require_path: ::String,
          extension_config: ::Hash[::Symbol, untyped],
          extension_name: ::String
        ) -> void

        def with: (
          ?extension_class: extensionClass,
          ?require_path: ::String,
          ?extension_config: ::Hash[::Symbol, untyped],
          ?extension_name: ::String
        ) -> Extension
      end

      class Extension < ExtensionSupertype
        def initialize: (
          extension_class: extensionClass,
          require_path: ::String,
          extension_config: ::Hash[::Symbol, untyped],
          ?extension_name: ::String
        ) -> void

        def self.new:
          (extension_class: extensionClass, require_path: ::String, extension_config: ::Hash[::Symbol, untyped], ?extension_name: ::String) -> Extension
          | (extensionClass, ::String, ::Hash[::Symbol, untyped], ?::String) -> Extension

        def self.load_from_hash: (::Hash[::String, untyped], via: ExtensionLoader) -> Extension
        def to_dumpable_hash: () -> ::Hash[::String, untyped]

        def verify_against: (extensionClass) -> void
      end
    end
  end
end
