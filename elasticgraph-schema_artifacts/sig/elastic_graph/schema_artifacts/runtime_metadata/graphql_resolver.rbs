module ElasticGraph
  module SchemaArtifacts
    module RuntimeMetadata
      class GraphQLResolverSupertype
        attr_reader needs_lookahead: bool
        attr_reader resolver_ref: ::Hash[::String, ::String]

        def initialize: (
          needs_lookahead: bool,
          resolver_ref: ::Hash[::String, ::String]
        ) -> void

        def with: (
          ?needs_lookahead: bool,
          ?resolver_ref: ::Hash[::String, ::String]
        ) -> instance

        def self.new:
          (needs_lookahead: bool, resolver_ref: ::Hash[::String, ::String]) -> instance
          | (bool, ::Hash[::String, ::String]) -> instance
      end

      class GraphQLResolver < GraphQLResolverSupertype
        self.@with_lookahead_loader: ExtensionLoader?
        def self.with_lookahead_loader: () -> ExtensionLoader

        self.@without_lookahead_loader: ExtensionLoader?
        def self.without_lookahead_loader: () -> ExtensionLoader

        NEEDS_LOOKAHEAD: "needs_lookahead"
        RESOLVER_REF: "resolver_ref"

        def load_resolver: () -> Extension
        def self.from_hash: (::Hash[::String, untyped]) -> GraphQLResolver
        def to_dumpable_hash: () -> ::Hash[::String, untyped]

        class InterfaceWithLookahead
          include _GraphQLResolverWithLookahead
        end

        class InterfaceWithoutLookahead
          include _GraphQLResolverWithoutLookahead
        end
      end
    end
  end

  interface _GraphQLResolvableWithLookahead
    def resolve: (
      field: ElasticGraph::GraphQL::Schema::Field,
      object: untyped,
      context: ::GraphQL::Query::Context,
      args: ::Hash[::String, untyped],
      lookahead: ::GraphQL::Execution::Lookahead
    ) { () -> ElasticGraph::GraphQL::DatastoreQuery } -> untyped
  end

  interface _GraphQLResolvableWithoutLookahead
    def resolve: (
      field: ElasticGraph::GraphQL::Schema::Field,
      object: untyped,
      context: ::GraphQL::Query::Context,
      args: ::Hash[::String, untyped]
    ) -> untyped
  end

  interface _GraphQLResolverWithLookahead
    def initialize: (
      elasticgraph_graphql: GraphQL,
      config: ::Hash[::String, untyped]
    ) -> void

    include _GraphQLResolvableWithLookahead
  end

  interface _GraphQLResolverWithoutLookahead
    def initialize: (
      elasticgraph_graphql: GraphQL,
      config: ::Hash[::String, untyped]
    ) -> void

    include _GraphQLResolvableWithoutLookahead
  end
end
