module ElasticGraph
  module SchemaArtifacts
    type context = :admin | :graphql | :indexer | :indexer_autoscaler_lambda

    module RuntimeMetadata
      class SchemaSupertype
        attr_reader object_types_by_name: ::Hash[::String, ObjectType]
        attr_reader scalar_types_by_name: ::Hash[::String, ScalarType]
        attr_reader enum_types_by_name: ::Hash[::String, Enum::Type]
        attr_reader index_definitions_by_name: ::Hash[::String, IndexDefinition]
        attr_reader schema_element_names: SchemaElementNames
        attr_reader graphql_extension_modules: ::Array[Extension]
        attr_reader graphql_resolvers_by_name: ::Hash[::Symbol, Extension]
        attr_reader static_script_ids_by_scoped_name: ::Hash[::String, ::String]

        def initialize: (
          object_types_by_name: ::Hash[::String, ObjectType],
          scalar_types_by_name: ::Hash[::String, ScalarType],
          enum_types_by_name: ::Hash[::String, Enum::Type],
          index_definitions_by_name: ::Hash[::String, IndexDefinition],
          schema_element_names: SchemaElementNames,
          graphql_extension_modules: ::Array[Extension],
          graphql_resolvers_by_name: ::Hash[::Symbol, Extension],
          static_script_ids_by_scoped_name: ::Hash[::String, ::String]) -> void

        def with: (
          ?object_types_by_name: ::Hash[::String, ObjectType],
          ?scalar_types_by_name: ::Hash[::String, ScalarType],
          ?enum_types_by_name: ::Hash[::String, Enum::Type],
          ?index_definitions_by_name: ::Hash[::String, IndexDefinition],
          ?schema_element_names: SchemaElementNames,
          ?graphql_extension_modules: ::Array[Extension],
          ?graphql_resolvers_by_name: ::Hash[::Symbol, Extension],
          ?static_script_ids_by_scoped_name: ::Hash[::String, ::String]) -> Schema
      end

      class Schema < SchemaSupertype
        OBJECT_TYPES_BY_NAME: "object_types_by_name"
        SCALAR_TYPES_BY_NAME: "scalar_types_by_name"
        ENUM_TYPES_BY_NAME: "enum_types_by_name"
        INDEX_DEFINITIONS_BY_NAME: "index_definitions_by_name"
        SCHEMA_ELEMENT_NAMES: "schema_element_names"
        GRAPHQL_EXTENSION_MODULES: "graphql_extension_modules"
        GRAPHQL_RESOLVERS_BY_NAME: "graphql_resolvers_by_name"
        STATIC_SCRIPT_IDS_BY_NAME: "static_script_ids_by_scoped_name"

        def self.from_hash: (::Hash[::String, untyped], for_context: context) -> Schema
        def to_dumpable_hash: () -> ::Hash[::String, untyped]
      end
    end
  end
end
