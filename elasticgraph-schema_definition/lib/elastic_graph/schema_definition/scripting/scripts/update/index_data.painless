Map source = ctx._source;
String sourceId = params.sourceId;
String relationship = params.relationship;

// Numbers in JSON appear to be parsed as doubles, but we want the version stored as a long, so we need to cast it here.
long eventVersion = (long) params.version;

if (source.__sources == null) {
  source.__sources = [];
}

if (source.__versions == null) {
  source.__versions = [:];
}

if (source.__versions[relationship] == null) {
  source.__versions[relationship] = [:];
}

Map relationshipVersionsMap = source.__versions.get(relationship);
List previousSourceIdsForRelationship = relationshipVersionsMap.keySet().stream().filter(id -> id != sourceId).collect(Collectors.toList());

if (previousSourceIdsForRelationship.size() > 0) {
  String previousIdDescription = previousSourceIdsForRelationship.size() == 1 ? previousSourceIdsForRelationship.get(0) : previousSourceIdsForRelationship.toString();
  throw new IllegalArgumentException(
    "Cannot update document " + params.id + " " +
    "with data from related " + relationship + " " + sourceId + " " +
    "because the related " + relationship + " has apparently changed (was: " + previousSourceIdsForRelationship + "), " +
    "but mutations of relationships used with `sourced_from` are not supported because " +
    "allowing it could break ElasticGraph's out-of-order processing guarantees."
 );
}

Number maybeDocVersion = source.__versions.get(params.relationship)?.get(params.sourceId);

// Our JSON schema requires event versions to be non-negative, so we can safely use Long.MIN_VALUE as a stand-in when the value is null.
long docVersion = maybeDocVersion == null ? Long.MIN_VALUE : maybeDocVersion.longValue();

if (docVersion >= eventVersion) {
  throw new IllegalArgumentException("ElasticGraph update was a no-op: [" +
    params.id + "]: version conflict, current version [" +
    docVersion + "] is higher or equal to the one provided [" +
    eventVersion + "]");
} else {
  source.putAll(params.data);
  Map __counts = params.__counts;

  if (__counts != null) {
    if (source.__counts == null) {
      source.__counts = [:];
    }

    source.__counts.putAll(__counts);
  }

  source.id = params.id;
  source.__versions[relationship][sourceId] = eventVersion;

  // Record the relationship in `__sources` if it's not already there. We maintain it as an append-only set using a sorted list.
  // This ensures deterministic ordering of its elements regardless of event ingestion order, and lets us check membership in O(log N) time.
  //
  // As per https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html#binarySearch(java.util.List,java.lang.Object):
  //
  // > Returns the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1).
  // > The insertion point is defined as the point at which the key would be inserted into the list: the index
  // > of the first element greater than the key, or list.size() if all elements in the list are less than the
  // > specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found.
  int sourceBinarySearchResult = Collections.binarySearch(source.__sources, relationship);
  if (sourceBinarySearchResult < 0) {
    source.__sources.add(-sourceBinarySearchResult - 1, relationship);
  }
}
