module ElasticGraph
  module SchemaDefinition
    module Mixins
      module HasIndices
        attr_reader indices: ::Array[Indexing::Index]
        attr_reader runtime_metadata_overrides: ::Hash[::Symbol, untyped]
        attr_reader default_graphql_resolver: SchemaArtifacts::RuntimeMetadata::ConfiguredGraphQLResolver?
        def index: (::String, ::Hash[::Symbol, ::String | ::Integer]) ?{ (Indexing::Index) -> void } -> ::Array[Indexing::Index]
        def resolve_fields_with: (::Symbol?) -> void
        def indexed?: () -> bool
        def override_runtime_metadata: (**untyped) -> void
        def runtime_metadata: (::Array[SchemaArtifacts::RuntimeMetadata::UpdateTarget]) -> SchemaArtifacts::RuntimeMetadata::ObjectType
        def derived_indexed_types: () -> ::Array[Indexing::DerivedIndexedType]
        def derive_indexed_type_fields: (
          ::String,
          from_id: ::String,
          ?route_with: ::String,
          ?rollover_with: ::String
        ) ?{ ( Indexing::DerivedIndexedType) -> void } -> Indexing::DerivedIndexedType
        def root_query_fields: (plural: ::String, ?singular: ::String?) ?{ (SchemaElements::Field) -> void } -> void
        def plural_root_query_field_name: () -> ::String
        def singular_root_query_field_name: () -> ::String
        def root_query_fields_customizations: () -> (^(SchemaElements::Field) -> void)?
        def fields_with_sources: () -> ::Array[SchemaElements::Field]
        def indexing_fields_by_name_in_index: () -> ::Hash[::String, SchemaElements::Field]
      end
    end
  end
end
