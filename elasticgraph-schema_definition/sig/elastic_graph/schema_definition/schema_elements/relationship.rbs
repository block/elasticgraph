module ElasticGraph
  module SchemaDefinition
    module SchemaElements
      class RelationshipSupertype < Field
        def initialize: (Field) -> void
      end

      class Relationship < RelationshipSupertype
        type cardinality = :one | :many
        attr_reader related_type: TypeReference
        attr_accessor hide_relationship_runtime_metadata: bool

        @cardinality: cardinality
        @related_type: TypeReference
        @foreign_key: ::String
        @direction: foreignKeyDirection
        @equivalent_field_paths_by_local_path: ::Hash[::String, ::String]
        @additional_filter: ::Hash[::String, untyped]

        def initialize: (
          Field,
          cardinality: cardinality,
          related_type: TypeReference,
          foreign_key: ::String,
          direction: foreignKeyDirection
        ) -> void

        def additional_filter: (::Hash[::String, untyped]) -> void
        def equivalent_field: (::String, ?locally_named: ::String) -> void
        def routing_value_source_for_index: [T] (Indexing::Index) { (::String) -> bot } -> ::String?
        def rollover_timestamp_value_source_for_index: [T] (Indexing::Index) { (::String) -> bot } -> ::String?
        def validate_equivalent_fields: (SchemaElements::FieldPath::Resolver) -> ::Array[::String]
        def many?: () -> bool
        def runtime_metadata: () -> SchemaArtifacts::RuntimeMetadata::Relation?

        private

        def resolve_and_validate_field_path: (
          indexableType,
          ::String,
          SchemaElements::FieldPath::Resolver
        ) { (::String) -> void } -> SchemaElements::FieldPath?
      end
    end
  end
end
