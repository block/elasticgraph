project_root = File.expand_path(__dir__)

require "elastic_graph/local/rake_tasks"
require "elastic_graph/query_registry/rake_tasks"
require "rspec/core/rake_task"
require "standard/rake"
require_relative "lib/<%= ElasticGraph.setup_env.app_name %>/fake_data_batch_generator"

settings_file = "#{project_root}/config/settings/local.yaml"

ElasticGraph::Local::RakeTasks.new(
  local_config_yaml: settings_file,
  path_to_schema: "#{project_root}/config/schema.rb"
) do |tasks|
  # Set this to true once you're beyond the prototyping stage.
  tasks.enforce_json_schema_version = false

  # Determines casing of field names. Can be either `:camelCase` or `:snake_case`.
  tasks.schema_element_name_form = :camelCase

  # Customizes the names of fields generated by ElasticGraph.
  tasks.schema_element_name_overrides = {
    # Example: force inequality operators to be spelled out.
    # gt: "greaterThan",
    # gte: "greaterThanOrEqualTo",
    # lt: "lessThan",
    # lte: "lessThanOrEqualTo"
  }

  # Customizes the naming format used by derived types.
  tasks.derived_type_name_formats = {
    # Example: change suffix used for filter inputs from `FilterInput` to just `Filter`.
    # FilterInput: "%{base}Filter",
  }

  # Use this to override type names generated by ElasticGraph. We generally recommend sticking
  # with the defaults, but to align with conventions in your organization you may need to override
  # some type names.
  tasks.type_name_overrides = {
    # Example: this would make your ElasticGraph schema use `IDFilter` in place of the standard `IDFilterInput`.
    # IDFilterInput: "IDFilter"
  }

  tasks.define_fake_data_batch_for :artists do
    <%= ElasticGraph.setup_env.app_module %>::FakeDataBatchGenerator.generate(artists: 100, venues: 10)
  end
end

ElasticGraph::QueryRegistry::RakeTasks.from_yaml_file(
  settings_file,
  "config/queries",
  require_eg_latency_slo_directive: false
)

::RSpec::Core::RakeTask.new

standard_checks = ["standard", "query_registry:validate_queries", "spec"]

desc "Rebuild everything. Intended to be run locally as you iterate on the schema"
task build: ["schema_artifacts:dump", *standard_checks]

desc "Check everything. Intended to be run on CI to check your project."
task check: ["schema_artifacts:check", *standard_checks]
