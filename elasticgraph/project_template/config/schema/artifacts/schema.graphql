# Generated by `rake schema_artifacts:dump`.
# DO NOT EDIT BY HAND. Any edits will be lost the next time the rake task is run.

"""
Indicates an upper bound on how quickly a query must respond to meet the service-level objective.
ElasticGraph will log a "good event" message if the query latency is less than or equal to this value,
and a "bad event" message if the query latency is greater than this value. These messages can be used
to drive an SLO dashboard.

Note that the latency compared against this only contains processing time within ElasticGraph itself.
Any time spent on sending the request or response over the network is not included in the comparison.
"""
directive @egLatencySlo(ms: Int!) on QUERY

"""
Provides detail about an aggregation `count`.
"""
type AggregationCountDetail {
  """
  The (approximate) count of documents in this aggregation bucket.

  When documents in an aggregation bucket are sourced from multiple shards, the count may be only
  approximate. The `upperBound` indicates the maximum value of the true count, but usually
  the true count is much closer to this approximate value (which also provides a lower bound on the
  true count).

  When this approximation is known to be exact, the same value will be available from `exactValue`
  and `upperBound`.
  """
  approximateValue: JsonSafeLong!

  """
  The exact count of documents in this aggregation bucket, if an exact value can be determined.

  When documents in an aggregation bucket are sourced from multiple shards, it may not be possible to
  efficiently determine an exact value. When no exact value can be determined, this field will be `null`.
  The `approximateValue` field--which will never be `null`--can be used to get an approximation
  for the count.
  """
  exactValue: JsonSafeLong

  """
  An upper bound on how large the true count of documents in this aggregation bucket could be.

  When documents in an aggregation bucket are sourced from multiple shards, it may not be possible to
  efficiently determine an exact value. The `approximateValue` field provides an approximation,
  and this field puts an upper bound on the true count.
  """
  upperBound: JsonSafeLong!
}

type Album {
  name: String
  releasedOn: Date
  soldUnits: Int
  tracks: [AlbumTrack!]!
}

"""
Type used to perform aggregation computations on `Album` fields.
"""
type AlbumAggregatedValues {
  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `releasedOn` field.
  """
  releasedOn: DateAggregatedValues

  """
  Computed aggregate values for the `soldUnits` field.
  """
  soldUnits: IntAggregatedValues
}

"""
Input type used to specify filters on `Album` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input AlbumFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [AlbumFilterInput!]

  """
  Used to filter on the `name` field.

  Will be ignored if `null` or an empty object is passed.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: AlbumFilterInput

  """
  Used to filter on the `releasedOn` field.

  Will be ignored if `null` or an empty object is passed.
  """
  releasedOn: DateFilterInput

  """
  Used to filter on the `soldUnits` field.

  Will be ignored if `null` or an empty object is passed.
  """
  soldUnits: IntFilterInput

  """
  Used to filter on the `tracks` field.

  Will be ignored if `null` or an empty object is passed.
  """
  tracks: AlbumTrackListFilterInput
}

"""
Type used to specify the `Album` fields to group by for aggregations.
"""
type AlbumGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String

  """
  Offers the different grouping options for the `releasedOn` value within this group.
  """
  releasedOn: DateGroupedBy

  """
  The `soldUnits` field value for this group.
  """
  soldUnits: Int
}

"""
Input type used to specify filters on `[Album]` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input AlbumListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AlbumListFilterInput` input because of collisions
  between key names. For example, if you want to provide
  multiple `anySatisfy: ...` filters, you could do `allOf: [{anySatisfy: ...}, {anySatisfy: ...}]`.

  Will be ignored when `null` or an empty list is passed.
  """
  allOf: [AlbumListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [AlbumListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  Will be ignored when `null` or an empty object is passed.
  """
  anySatisfy: AlbumFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  Will be ignored when `null` or an empty object is passed.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: AlbumListFilterInput
}

type AlbumTrack {
  lengthInSeconds: Int
  name: String
  trackNumber: Int
}

"""
Type used to perform aggregation computations on `AlbumTrack` fields.
"""
type AlbumTrackAggregatedValues {
  """
  Computed aggregate values for the `lengthInSeconds` field.
  """
  lengthInSeconds: IntAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues

  """
  Computed aggregate values for the `trackNumber` field.
  """
  trackNumber: IntAggregatedValues
}

"""
Input type used to specify filters on `AlbumTrack` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input AlbumTrackFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [AlbumTrackFilterInput!]

  """
  Used to filter on the `lengthInSeconds` field.

  Will be ignored if `null` or an empty object is passed.
  """
  lengthInSeconds: IntFilterInput

  """
  Used to filter on the `name` field.

  Will be ignored if `null` or an empty object is passed.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: AlbumTrackFilterInput

  """
  Used to filter on the `trackNumber` field.

  Will be ignored if `null` or an empty object is passed.
  """
  trackNumber: IntFilterInput
}

"""
Type used to specify the `AlbumTrack` fields to group by for aggregations.
"""
type AlbumTrackGroupedBy {
  """
  The `lengthInSeconds` field value for this group.
  """
  lengthInSeconds: Int

  """
  The `name` field value for this group.
  """
  name: String

  """
  The `trackNumber` field value for this group.
  """
  trackNumber: Int
}

"""
Input type used to specify filters on `[AlbumTrack]` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input AlbumTrackListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `AlbumTrackListFilterInput` input because of
  collisions between key names. For example, if you want to provide
  multiple `anySatisfy: ...` filters, you could do `allOf: [{anySatisfy: ...}, {anySatisfy: ...}]`.

  Will be ignored when `null` or an empty list is passed.
  """
  allOf: [AlbumTrackListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [AlbumTrackListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  Will be ignored when `null` or an empty object is passed.
  """
  anySatisfy: AlbumTrackFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  Will be ignored when `null` or an empty object is passed.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: AlbumTrackListFilterInput
}

type Artist {
  albums: [Album!]!
  bio: ArtistBio
  id: ID
  lifetimeSales: Int
  name: String
  tours: [Tour!]!
}

"""
Type used to perform aggregation computations on `Artist` fields.
"""
type ArtistAggregatedValues {
  """
  Computed aggregate values for the `bio` field.
  """
  bio: ArtistBioAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `lifetimeSales` field.
  """
  lifetimeSales: IntAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Artist` documents for an aggregations query.
"""
type ArtistAggregation {
  """
  Provides computed aggregated values over all `Artist` documents in an aggregation bucket.
  """
  aggregatedValues: ArtistAggregatedValues

  """
  The count of `Artist` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Artist` fields to group by. The returned values identify each aggregation bucket.
  """
  groupedBy: ArtistGroupedBy

  """
  Used to perform sub-aggregations of `ArtistAggregation` data.
  """
  subAggregations: ArtistAggregationSubAggregations
}

"""
Represents a paginated collection of `ArtistAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ArtistAggregationConnection {
  """
  Wraps a specific `ArtistAggregation` to pair it with its pagination cursor.
  """
  edges: [ArtistAggregationEdge!]!

  """
  The list of `ArtistAggregation` results.
  """
  nodes: [ArtistAggregation!]!

  """
  Provides pagination-related information.
  """
  pageInfo: PageInfo!
}

"""
Represents a specific `ArtistAggregation` in the context of a `ArtistAggregationConnection`,
providing access to both the `ArtistAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ArtistAggregationEdge {
  """
  The `Cursor` of this `ArtistAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `ArtistAggregation`.
  """
  cursor: Cursor

  """
  The `ArtistAggregation` of this edge.
  """
  node: ArtistAggregation
}

"""
Provides access to the `subAggregations` within each `ArtistAggregation`.
"""
type ArtistAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `albums`.
  """
  albums(
    """
    Used to filter the `Album` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: AlbumFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): ArtistAlbumSubAggregationConnection

  """
  Used to perform a sub-aggregation of `tours`.
  """
  tours(
    """
    Used to filter the `Tour` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: TourFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): ArtistTourSubAggregationConnection
}

"""
Return type representing a bucket of `AlbumTrack` objects for a sub-aggregation within each `ArtistAlbumSubAggregation`.
"""
type ArtistAlbumAlbumTrackSubAggregation {
  """
  Provides computed aggregated values over all `AlbumTrack` documents in a sub-aggregation bucket.
  """
  aggregatedValues: AlbumTrackAggregatedValues

  """
  Details of the count of `AlbumTrack` documents in a sub-aggregation bucket.
  """
  countDetail: AggregationCountDetail

  """
  Used to specify the `AlbumTrack` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  groupedBy: AlbumTrackGroupedBy
}

"""
Represents a collection of `ArtistAlbumAlbumTrackSubAggregation` results.
"""
type ArtistAlbumAlbumTrackSubAggregationConnection {
  """
  The list of `ArtistAlbumAlbumTrackSubAggregation` results.
  """
  nodes: [ArtistAlbumAlbumTrackSubAggregation!]!
}

"""
Return type representing a bucket of `Album` objects for a sub-aggregation within each `ArtistAggregation`.
"""
type ArtistAlbumSubAggregation {
  """
  Provides computed aggregated values over all `Album` documents in a sub-aggregation bucket.
  """
  aggregatedValues: AlbumAggregatedValues

  """
  Details of the count of `Album` documents in a sub-aggregation bucket.
  """
  countDetail: AggregationCountDetail

  """
  Used to specify the `Album` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  groupedBy: AlbumGroupedBy

  """
  Used to perform sub-aggregations of `ArtistAlbumSubAggregation` data.
  """
  subAggregations: ArtistAlbumSubAggregationSubAggregations
}

"""
Represents a collection of `ArtistAlbumSubAggregation` results.
"""
type ArtistAlbumSubAggregationConnection {
  """
  The list of `ArtistAlbumSubAggregation` results.
  """
  nodes: [ArtistAlbumSubAggregation!]!
}

"""
Provides access to the `subAggregations` within each `ArtistAlbumSubAggregation`.
"""
type ArtistAlbumSubAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `tracks`.
  """
  tracks(
    """
    Used to filter the `AlbumTrack` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: AlbumTrackFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): ArtistAlbumAlbumTrackSubAggregationConnection
}

type ArtistBio {
  description: String
  homeCountry: String
  yearFormed: Int
}

"""
Type used to perform aggregation computations on `ArtistBio` fields.
"""
type ArtistBioAggregatedValues {
  """
  Computed aggregate values for the `homeCountry` field.
  """
  homeCountry: NonNumericAggregatedValues

  """
  Computed aggregate values for the `yearFormed` field.
  """
  yearFormed: IntAggregatedValues
}

"""
Input type used to specify filters on `ArtistBio` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input ArtistBioFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [ArtistBioFilterInput!]

  """
  Used to filter on the `description` field.

  Will be ignored if `null` or an empty object is passed.
  """
  description: TextFilterInput

  """
  Used to filter on the `homeCountry` field.

  Will be ignored if `null` or an empty object is passed.
  """
  homeCountry: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: ArtistBioFilterInput

  """
  Used to filter on the `yearFormed` field.

  Will be ignored if `null` or an empty object is passed.
  """
  yearFormed: IntFilterInput
}

"""
Type used to specify the `ArtistBio` fields to group by for aggregations.
"""
type ArtistBioGroupedBy {
  """
  The `homeCountry` field value for this group.
  """
  homeCountry: String

  """
  The `yearFormed` field value for this group.
  """
  yearFormed: Int
}

"""
Represents a paginated collection of `Artist` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type ArtistConnection {
  """
  Wraps a specific `Artist` to pair it with its pagination cursor.
  """
  edges: [ArtistEdge!]!

  """
  The list of `Artist` results.
  """
  nodes: [Artist!]!

  """
  Provides pagination-related information.
  """
  pageInfo: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  totalEdgeCount: JsonSafeLong!
}

"""
Represents a specific `Artist` in the context of a `ArtistConnection`,
providing access to both the `Artist` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type ArtistEdge {
  """
  The `Cursor` of this `Artist`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Artist`.
  """
  cursor: Cursor

  """
  The `Artist` of this edge.
  """
  node: Artist
}

"""
Input type used to specify filters on `Artist` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input ArtistFilterInput {
  """
  Used to filter on the `albums` field.

  Will be ignored if `null` or an empty object is passed.
  """
  albums: AlbumListFilterInput

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [ArtistFilterInput!]

  """
  Used to filter on the `bio` field.

  Will be ignored if `null` or an empty object is passed.
  """
  bio: ArtistBioFilterInput

  """
  Used to filter on the `id` field.

  Will be ignored if `null` or an empty object is passed.
  """
  id: IDFilterInput

  """
  Used to filter on the `lifetimeSales` field.

  Will be ignored if `null` or an empty object is passed.
  """
  lifetimeSales: IntFilterInput

  """
  Used to filter on the `name` field.

  Will be ignored if `null` or an empty object is passed.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: ArtistFilterInput

  """
  Used to filter on the `tours` field.

  Will be ignored if `null` or an empty object is passed.
  """
  tours: TourListFilterInput
}

"""
Type used to specify the `Artist` fields to group by for aggregations.
"""
type ArtistGroupedBy {
  """
  The `bio` field value for this group.
  """
  bio: ArtistBioGroupedBy

  """
  The `lifetimeSales` field value for this group.
  """
  lifetimeSales: Int

  """
  The `name` field value for this group.
  """
  name: String
}

"""
Enumerates the ways `Artist`s can be sorted.
"""
enum ArtistSortOrderInput {
  """
  Sorts ascending by the `bio.homeCountry` field.
  """
  bio_homeCountry_ASC

  """
  Sorts descending by the `bio.homeCountry` field.
  """
  bio_homeCountry_DESC

  """
  Sorts ascending by the `bio.yearFormed` field.
  """
  bio_yearFormed_ASC

  """
  Sorts descending by the `bio.yearFormed` field.
  """
  bio_yearFormed_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `lifetimeSales` field.
  """
  lifetimeSales_ASC

  """
  Sorts descending by the `lifetimeSales` field.
  """
  lifetimeSales_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC
}

"""
Return type representing a bucket of `Show` objects for a sub-aggregation within each `ArtistTourSubAggregation`.
"""
type ArtistTourShowSubAggregation {
  """
  Provides computed aggregated values over all `Show` documents in a sub-aggregation bucket.
  """
  aggregatedValues: ShowAggregatedValues

  """
  Details of the count of `Show` documents in a sub-aggregation bucket.
  """
  countDetail: AggregationCountDetail

  """
  Used to specify the `Show` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  groupedBy: ShowGroupedBy
}

"""
Represents a collection of `ArtistTourShowSubAggregation` results.
"""
type ArtistTourShowSubAggregationConnection {
  """
  The list of `ArtistTourShowSubAggregation` results.
  """
  nodes: [ArtistTourShowSubAggregation!]!
}

"""
Return type representing a bucket of `Tour` objects for a sub-aggregation within each `ArtistAggregation`.
"""
type ArtistTourSubAggregation {
  """
  Provides computed aggregated values over all `Tour` documents in a sub-aggregation bucket.
  """
  aggregatedValues: TourAggregatedValues

  """
  Details of the count of `Tour` documents in a sub-aggregation bucket.
  """
  countDetail: AggregationCountDetail

  """
  Used to specify the `Tour` fields to group by. The returned values identify each sub-aggregation bucket.
  """
  groupedBy: TourGroupedBy

  """
  Used to perform sub-aggregations of `ArtistTourSubAggregation` data.
  """
  subAggregations: ArtistTourSubAggregationSubAggregations
}

"""
Represents a collection of `ArtistTourSubAggregation` results.
"""
type ArtistTourSubAggregationConnection {
  """
  The list of `ArtistTourSubAggregation` results.
  """
  nodes: [ArtistTourSubAggregation!]!
}

"""
Provides access to the `subAggregations` within each `ArtistTourSubAggregation`.
"""
type ArtistTourSubAggregationSubAggregations {
  """
  Used to perform a sub-aggregation of `shows`.
  """
  shows(
    """
    Used to filter the `Show` documents included in this sub-aggregation based on the provided criteria.
    """
    filter: ShowFilterInput

    """
    Determines how many sub-aggregation buckets should be returned.
    """
    first: Int
  ): ArtistTourShowSubAggregationConnection
}

"""
An opaque string value representing a specific location in a paginated connection type.
Returned cursors can be passed back in the next query via the `before` or `after`
arguments to continue paginating from that point.
"""
scalar Cursor

"""
A date, represented as an [ISO 8601 date string](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
A return type used from aggregations to provided aggregated values over `Date` fields.
"""
type DateAggregatedValues {
  """
  The average (mean) of the field values within this grouping.
  The returned value will be rounded to the nearest `Date` value.
  """
  approximateAvg: Date

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximateDistinctValueCount: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMax: Date

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMin: Date
}

"""
Input type used to specify filters on `Date` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input DateFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [DateFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [Date]

  """
  Matches records where the field value is greater than (>) the provided value.

  Will be ignored when `null` is passed.
  """
  gt: Date

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  Will be ignored when `null` is passed.
  """
  gte: Date

  """
  Matches records where the field value is less than (<) the provided value.

  Will be ignored when `null` is passed.
  """
  lt: Date

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  Will be ignored when `null` is passed.
  """
  lte: Date

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: DateFilterInput
}

"""
Allows for grouping `Date` values based on the desired return type.
"""
type DateGroupedBy {
  """
  Used when grouping on the full `Date` value.
  """
  asDate(
    """
    Amount of offset (positive or negative) to shift the `Date` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateGroupingOffsetInput

    """
    Determines the grouping truncation unit for this field.
    """
    truncationUnit: DateGroupingTruncationUnitInput!
  ): Date

  """
  An alternative to `asDate` for when grouping on the day-of-week is desired.
  """
  asDayOfWeek(
    """
    Amount of offset (positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

    For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
    when they fall between midnight and 2 AM.
    """
    offset: DayOfWeekGroupingOffsetInput
  ): DayOfWeek
}

"""
Input type offered when grouping on `Date` fields, representing the amount of offset
(positive or negative) to shift the `Date` boundaries of each grouping bucket.

For example, when grouping by `WEEK`, you can shift by 1 day to change
what day-of-week weeks are considered to start on.
"""
input DateGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `Date` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `Date` groupings.
  """
  unit: DateUnitInput!
}

"""
Enumerates the supported truncation units of a `Date`.
"""
enum DateGroupingTruncationUnitInput {
  """
  The exact day of a `Date`.
  """
  DAY

  """
  The month a `Date` falls in.
  """
  MONTH

  """
  The quarter a `Date` falls in.
  """
  QUARTER

  """
  The week, beginning on Monday, a `Date` falls in.
  """
  WEEK

  """
  The year a `Date` falls in.
  """
  YEAR
}

"""
A timestamp, represented as an [ISO 8601 time string](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
A return type used from aggregations to provided aggregated values over `DateTime` fields.
"""
type DateTimeAggregatedValues {
  """
  The average (mean) of the field values within this grouping.
  The returned value will be rounded to the nearest `DateTime` value.
  """
  approximateAvg: DateTime

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximateDistinctValueCount: JsonSafeLong

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMax: DateTime

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMin: DateTime
}

"""
Input type used to specify filters on `DateTime` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input DateTimeFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [DateTimeFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [DateTime]

  """
  Matches records where the field value is greater than (>) the provided value.

  Will be ignored when `null` is passed.
  """
  gt: DateTime

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  Will be ignored when `null` is passed.
  """
  gte: DateTime

  """
  Matches records where the field value is less than (<) the provided value.

  Will be ignored when `null` is passed.
  """
  lt: DateTime

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  Will be ignored when `null` is passed.
  """
  lte: DateTime

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: DateTimeFilterInput

  """
  Matches records based on the time-of-day of the `DateTime` values.

  Will be ignored when `null` or an empty list is passed.
  """
  timeOfDay: DateTimeTimeOfDayFilterInput
}

"""
Allows for grouping `DateTime` values based on the desired return type.
"""
type DateTimeGroupedBy {
  """
  An alternative to `asDateTime` for when grouping on just the date is desired.
  """
  asDate(
    """
    Amount of offset (positive or negative) to shift the `Date` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `Date` value falls in.
    """
    timeZone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncationUnit: DateGroupingTruncationUnitInput!
  ): Date

  """
  Used when grouping on the full `DateTime` value.
  """
  asDateTime(
    """
    Amount of offset (positive or negative) to shift the `DateTime` boundaries of each grouping bucket.

    For example, when grouping by `WEEK`, you can shift by 1 day to change what
    day-of-week weeks are considered to start on.
    """
    offset: DateTimeGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `DateTime` value falls in.
    """
    timeZone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncationUnit: DateTimeGroupingTruncationUnitInput!
  ): DateTime

  """
  An alternative to `asDateTime` for when grouping on the day-of-week is desired.
  """
  asDayOfWeek(
    """
    Amount of offset (positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

    For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
    when they fall between midnight and 2 AM.
    """
    offset: DayOfWeekGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `DayOfWeek` value falls in.
    """
    timeZone: TimeZone! = "UTC"
  ): DayOfWeek

  """
  An alternative to `asDateTime` for when grouping on just the time-of-day is desired.
  """
  asTimeOfDay(
    """
    Amount of offset (positive or negative) to shift the `LocalTime` boundaries of each grouping bucket.

    For example, when grouping by `HOUR`, you can apply an offset of -5 minutes to shift `LocalTime`
    values to the prior hour when they fall between the the top of an hour and 5 after.
    """
    offset: LocalTimeGroupingOffsetInput

    """
    The time zone to use when determining which grouping a `LocalTime` value falls in.
    """
    timeZone: TimeZone! = "UTC"

    """
    Determines the grouping truncation unit for this field.
    """
    truncationUnit: LocalTimeGroupingTruncationUnitInput!
  ): LocalTime
}

"""
Input type offered when grouping on `DateTime` fields, representing the amount of offset
(positive or negative) to shift the `DateTime` boundaries of each grouping bucket.

For example, when grouping by `WEEK`, you can shift by 1 day to change
what day-of-week weeks are considered to start on.
"""
input DateTimeGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `DateTime` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `DateTime` groupings.
  """
  unit: DateTimeUnitInput!
}

"""
Enumerates the supported truncation units of a `DateTime`.
"""
enum DateTimeGroupingTruncationUnitInput {
  """
  The day a `DateTime` falls in.
  """
  DAY

  """
  The hour a `DateTime` falls in.
  """
  HOUR

  """
  The minute a `DateTime` falls in.
  """
  MINUTE

  """
  The month a `DateTime` falls in.
  """
  MONTH

  """
  The quarter a `DateTime` falls in.
  """
  QUARTER

  """
  The second a `DateTime` falls in.
  """
  SECOND

  """
  The week, beginning on Monday, a `DateTime` falls in.
  """
  WEEK

  """
  The year a `DateTime` falls in.
  """
  YEAR
}

"""
Input type used to specify filters on the time-of-day of `DateTime` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input DateTimeTimeOfDayFilterInput {
  """
  Matches records where the time of day of the `DateTime` field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [LocalTime!]

  """
  Matches records where the time of day of the `DateTime` field value is greater than (>) the provided value.

  Will be ignored when `null` is passed.
  """
  gt: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is greater than or equal to (>=) the provided value.

  Will be ignored when `null` is passed.
  """
  gte: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is less than (<) the provided value.

  Will be ignored when `null` is passed.
  """
  lt: LocalTime

  """
  Matches records where the time of day of the `DateTime` field value is less than or equal to (<=) the provided value.

  Will be ignored when `null` is passed.
  """
  lte: LocalTime

  """
  TimeZone to use when comparing the `DateTime` values against the provided `LocalTime` values.
  """
  timeZone: TimeZone! = "UTC"
}

"""
Enumeration of `DateTime` units.
"""
enum DateTimeUnitInput {
  """
  The time period of a full rotation of the Earth with respect to the Sun.
  """
  DAY

  """
  1/24th of a day.
  """
  HOUR

  """
  1/1000th of a second.
  """
  MILLISECOND

  """
  1/60th of an hour.
  """
  MINUTE

  """
  1/60th of a minute.
  """
  SECOND
}

"""
Enumeration of `Date` units.
"""
enum DateUnitInput {
  """
  The time period of a full rotation of the Earth with respect to the Sun.
  """
  DAY
}

"""
Indicates the specific day of the week.
"""
enum DayOfWeek {
  """
  Friday.
  """
  FRIDAY

  """
  Monday.
  """
  MONDAY

  """
  Saturday.
  """
  SATURDAY

  """
  Sunday.
  """
  SUNDAY

  """
  Thursday.
  """
  THURSDAY

  """
  Tuesday.
  """
  TUESDAY

  """
  Wednesday.
  """
  WEDNESDAY
}

"""
Input type offered when grouping on `DayOfWeek` fields, representing the amount of offset
(positive or negative) to shift the `DayOfWeek` boundaries of each grouping bucket.

For example, you can apply an offset of -2 hours to shift `DateTime` values to the prior `DayOfWeek`
when they fall between midnight and 2 AM.
"""
input DayOfWeekGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `DayOfWeek` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `DayOfWeek` groupings.
  """
  unit: DateTimeUnitInput!
}

"""
Enumerates the supported distance units.
"""
enum DistanceUnitInput {
  """
  A metric system unit equal to 1/100th of a meter.
  """
  CENTIMETER

  """
  A United States customary unit of 12 inches.
  """
  FOOT

  """
  A United States customary unit equal to 1/12th of a foot.
  """
  INCH

  """
  A metric system unit equal to 1,000 meters.
  """
  KILOMETER

  """
  The base unit of length in the metric system.
  """
  METER

  """
  A United States customary unit of 5,280 feet.
  """
  MILE

  """
  A metric system unit equal to 1/1,000th of a meter.
  """
  MILLIMETER

  """
  An international unit of length used for air, marine, and space navigation. Equivalent to 1,852 meters.
  """
  NAUTICAL_MILE

  """
  A United States customary unit of 3 feet.
  """
  YARD
}

"""
Geographic coordinates representing a location on the Earth's surface.
"""
type GeoLocation {
  """
  Angular distance north or south of the Earth's equator, measured in degrees from -90 to +90.
  """
  latitude: Float

  """
  Angular distance east or west of the Prime Meridian at Greenwich, UK, measured in degrees from -180 to +180.
  """
  longitude: Float
}

"""
Input type used to specify distance filtering parameters on `GeoLocation` fields.
"""
input GeoLocationDistanceFilterInput {
  """
  Angular distance north or south of the Earth's equator, measured in degrees from -90 to +90.
  """
  latitude: Float!

  """
  Angular distance east or west of the Prime Meridian at Greenwich, UK, measured in degrees from -180 to +180.
  """
  longitude: Float!

  """
  Maximum distance (of the provided `unit`) to consider "near" the location identified
  by `latitude` and `longitude`.
  """
  maxDistance: Float!

  """
  Determines the unit of the specified `maxDistance`.
  """
  unit: DistanceUnitInput!
}

"""
Input type used to specify filters on `GeoLocation` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input GeoLocationFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [GeoLocationFilterInput!]

  """
  Matches records where the field's geographic location is within a specified distance from the
  location identified by `latitude` and `longitude`.

  Will be ignored when `null` or an empty object is passed.
  """
  near: GeoLocationDistanceFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: GeoLocationFilterInput
}

"""
Input type used to specify filters on `ID` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input IDFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [IDFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [ID]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: IDFilterInput
}

"""
A return type used from aggregations to provided aggregated values over `Int` fields.
"""
type IntAggregatedValues {
  """
  The average (mean) of the field values within this grouping.

  Note that the returned value is approximate. Imprecision can be introduced by the computation if
  any intermediary values fall outside the `JsonSafeLong` range (-9,007,199,254,740,991
  to 9,007,199,254,740,991).
  """
  approximateAvg: Float

  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximateDistinctValueCount: JsonSafeLong

  """
  The (approximate) sum of the field values within this grouping.

  Sums of large `Int` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong` return value. This field, as a double-precision `Float`, can
  represent larger sums, but the value may only be approximate.
  """
  approximateSum: Float!

  """
  The maximum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMax: Int

  """
  The minimum of the field values within this grouping.

  So long as the grouping contains at least one non-null value for the
  underlying indexed field, this will return an exact non-null value.
  """
  exactMin: Int

  """
  The exact sum of the field values within this grouping, if it fits in a `JsonSafeLong`.

  Sums of large `Int` values can result in overflow, where the exact sum cannot
  fit in a `JsonSafeLong`. In that case, `null` will be returned, and `approximateSum`
  can be used to get an approximate value.
  """
  exactSum: JsonSafeLong
}

"""
Input type used to specify filters on `Int` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input IntFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [IntFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [Int]

  """
  Matches records where the field value is greater than (>) the provided value.

  Will be ignored when `null` is passed.
  """
  gt: Int

  """
  Matches records where the field value is greater than or equal to (>=) the provided value.

  Will be ignored when `null` is passed.
  """
  gte: Int

  """
  Matches records where the field value is less than (<) the provided value.

  Will be ignored when `null` is passed.
  """
  lt: Int

  """
  Matches records where the field value is less than or equal to (<=) the provided value.

  Will be ignored when `null` is passed.
  """
  lte: Int

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: IntFilterInput
}

"""
A numeric type for large integer values that can serialize safely as JSON.

While JSON itself has no hard limit on the size of integers, the RFC-7159 spec
mentions that values outside of the range -9,007,199,254,740,991 (-(2^53) + 1)
to 9,007,199,254,740,991 (2^53 - 1) may not be interopable with all JSON
implementations. As it turns out, the number implementation used by JavaScript
has this issue. When you parse a JSON string that contains a numeric value like
`4693522397653681111`, the parsed result will contain a rounded value like
`4693522397653681000`.

While this is entirely a client-side problem, we want to preserve maximum compatibility
with common client languages. Given the ubiquity of GraphiQL as a GraphQL client,
we want to avoid this problem.

Our solution is to support two separate types:

- This type (`JsonSafeLong`) is serialized as a number, but limits values to the safely
  serializable range.
- The `LongString` type supports long values that use all 64 bits, but serializes as a
  string rather than a number, avoiding the JavaScript compatibility problems.

For more background, see the [JavaScript `Number.MAX_SAFE_INTEGER`
docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER).
"""
scalar JsonSafeLong

"""
A local time such as `"23:59:33"` or `"07:20:47.454"` without a time zone or offset, formatted based on the
[partial-time portion of RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
"""
scalar LocalTime

"""
Input type offered when grouping on `LocalTime` fields, representing the amount of offset
(positive or negative) to shift the `LocalTime` boundaries of each grouping bucket.

For example, when grouping by `HOUR`, you can shift by 30 minutes to change
what minute-of-hour hours are considered to start on.
"""
input LocalTimeGroupingOffsetInput {
  """
  Number (positive or negative) of the given `unit` to offset the boundaries of the `LocalTime` groupings.
  """
  amount: Int!

  """
  Unit of offsetting to apply to the boundaries of the `LocalTime` groupings.
  """
  unit: LocalTimeUnitInput!
}

"""
Enumerates the supported truncation units of a `LocalTime`.
"""
enum LocalTimeGroupingTruncationUnitInput {
  """
  The hour a `LocalTime` falls in.
  """
  HOUR

  """
  The minute a `LocalTime` falls in.
  """
  MINUTE

  """
  The second a `LocalTime` falls in.
  """
  SECOND
}

"""
Enumeration of `LocalTime` units.
"""
enum LocalTimeUnitInput {
  """
  1/24th of a day.
  """
  HOUR

  """
  1/1000th of a second.
  """
  MILLISECOND

  """
  1/60th of an hour.
  """
  MINUTE

  """
  1/60th of a minute.
  """
  SECOND
}

"""
Input type used to specify parameters for the `matchesPhrase` filtering operator.

Will be ignored if passed as `null`.
"""
input MatchesPhraseFilterInput {
  """
  The input phrase to search for.
  """
  phrase: String!
}

"""
Enumeration of allowed values for the `matchesQuery: {allowedEditsPerTerm: ...}` filter option.
"""
enum MatchesQueryAllowedEditsPerTermInput {
  """
  Allowed edits per term is dynamically chosen based on the length of the term.
  """
  DYNAMIC

  """
  No allowed edits per term.
  """
  NONE

  """
  One allowed edit per term.
  """
  ONE

  """
  Two allowed edits per term.
  """
  TWO
}

"""
Input type used to specify parameters for the `matchesQuery` filtering operator.

Will be ignored if passed as `null`.
"""
input MatchesQueryFilterInput {
  """
  Number of allowed modifications per term to arrive at a match. For example, if set to 'ONE', the input
  term 'glue' would match 'blue' but not 'clued', since the latter requires two modifications.
  """
  allowedEditsPerTerm: MatchesQueryAllowedEditsPerTermInput! = DYNAMIC

  """
  The input query to search for.
  """
  query: String!

  """
  Set to `true` to match only if all terms in `query` are found, or
  `false` to only require one term to be found.
  """
  requireAllTerms: Boolean! = false
}

"""
A return type used from aggregations to provided aggregated values over non-numeric fields.
"""
type NonNumericAggregatedValues {
  """
  An approximation of the number of unique values for this field within this grouping.

  The approximation uses the HyperLogLog++ algorithm from the [HyperLogLog in
  Practice](https://research.google.com/pubs/archive/40671.pdf)
  paper. The accuracy of the returned value varies based on the specific dataset, but
  it usually differs from the true distinct value count by less than 7%.
  """
  approximateDistinctValueCount: JsonSafeLong
}

"""
Provides information about the specific fetched page. This implements the `PageInfo`
specification from the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
"""
type PageInfo {
  """
  The `Cursor` of the last edge of the current page. This can be passed in the next query as
  a `after` argument to paginate forwards.
  """
  endCursor: Cursor

  """
  Indicates if there is another page of results available after the current one.
  """
  hasNextPage: Boolean!

  """
  Indicates if there is another page of results available before the current one.
  """
  hasPreviousPage: Boolean!

  """
  The `Cursor` of the first edge of the current page. This can be passed in the next query as
  a `before` argument to paginate backwards.
  """
  startCursor: Cursor
}

"""
The query entry point for the entire schema.
"""
type Query {
  """
  Aggregations over the `artists` data:

  > Fetches `Artist`s based on the provided arguments.
  """
  artistAggregations(
    """
    Used to forward-paginate through the `artistAggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `artistAggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Artist` documents that get aggregated over based on the provided criteria.
    """
    filter: ArtistFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `artistAggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `artistAggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `artistAggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `artistAggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ArtistAggregationConnection

  """
  Fetches `Artist`s based on the provided arguments.
  """
  artists(
    """
    Used to forward-paginate through the `artists`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `artists`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `artists` based on the provided criteria.
    """
    filter: ArtistFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `artists`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `artists`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `artists`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `artists`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `artists` should be sorted.
    """
    orderBy: [ArtistSortOrderInput!]
  ): ArtistConnection

  """
  Aggregations over the `venues` data:

  > Fetches `Venue`s based on the provided arguments.
  """
  venueAggregations(
    """
    Used to forward-paginate through the `venueAggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `venueAggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Venue` documents that get aggregated over based on the provided criteria.
    """
    filter: VenueFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `venueAggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `venueAggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `venueAggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `venueAggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): VenueAggregationConnection

  """
  Fetches `Venue`s based on the provided arguments.
  """
  venues(
    """
    Used to forward-paginate through the `venues`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `venues`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `venues` based on the provided criteria.
    """
    filter: VenueFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `venues`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `venues`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `venues`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `venues`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `venues` should be sorted.
    """
    orderBy: [VenueSortOrderInput!]
  ): VenueConnection
}

type Show {
  attendance: Int
  startedAt: DateTime
  venue: Venue
}

"""
Type used to perform aggregation computations on `Show` fields.
"""
type ShowAggregatedValues {
  """
  Computed aggregate values for the `attendance` field.
  """
  attendance: IntAggregatedValues

  """
  Computed aggregate values for the `startedAt` field.
  """
  startedAt: DateTimeAggregatedValues
}

"""
Input type used to specify filters on `Show` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input ShowFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [ShowFilterInput!]

  """
  Used to filter on the `attendance` field.

  Will be ignored if `null` or an empty object is passed.
  """
  attendance: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: ShowFilterInput

  """
  Used to filter on the `startedAt` field.

  Will be ignored if `null` or an empty object is passed.
  """
  startedAt: DateTimeFilterInput
}

"""
Type used to specify the `Show` fields to group by for aggregations.
"""
type ShowGroupedBy {
  """
  The `attendance` field value for this group.
  """
  attendance: Int

  """
  Offers the different grouping options for the `startedAt` value within this group.
  """
  startedAt: DateTimeGroupedBy
}

"""
Input type used to specify filters on `[Show]` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input ShowListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `ShowListFilterInput` input because of collisions
  between key names. For example, if you want to provide
  multiple `anySatisfy: ...` filters, you could do `allOf: [{anySatisfy: ...}, {anySatisfy: ...}]`.

  Will be ignored when `null` or an empty list is passed.
  """
  allOf: [ShowListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [ShowListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  Will be ignored when `null` or an empty object is passed.
  """
  anySatisfy: ShowFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  Will be ignored when `null` or an empty object is passed.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: ShowListFilterInput
}

"""
Input type used to specify filters on `String` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input StringFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [StringFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [String]

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: StringFilterInput
}

"""
Input type used to specify filters on `String` fields that have been indexed for full text search.

Will be ignored if passed as an empty object (or as `null`).
"""
input TextFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [TextFilterInput!]

  """
  Matches records where the field value is equal to any of the provided values.
  This works just like an IN operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents. When `null` is passed in the list, will
  match records where the field value is `null`.
  """
  equalToAnyOf: [String]

  """
  Matches records where the field value matches the provided value using full text search.

  Will be ignored when `null` is passed.
  """
  matches: String @deprecated(reason: "Use `matchesQuery` instead.")

  """
  Matches records where the field value has a phrase matching the provided phrase using
  full text search. This is stricter than `matchesQuery`: all terms must match
  and be in the same order as the provided phrase.

  Will be ignored when `null` is passed.
  """
  matchesPhrase: MatchesPhraseFilterInput

  """
  Matches records where the field value matches the provided query using full text search.
  This is more lenient than `matchesPhrase`: the order of terms is ignored, and,
  by default, only one search term is required to be in the field value.

  Will be ignored when `null` is passed.
  """
  matchesQuery: MatchesQueryFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: TextFilterInput
}

"""
An [IANA time zone identifier](https://www.iana.org/time-zones), such as `America/Los_Angeles` or `UTC`.

For a full list of valid identifiers, see the [wikipedia
article](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
"""
scalar TimeZone

type Tour {
  name: String
  shows: [Show!]!
}

"""
Type used to perform aggregation computations on `Tour` fields.
"""
type TourAggregatedValues {
  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Input type used to specify filters on `Tour` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input TourFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [TourFilterInput!]

  """
  Used to filter on the `name` field.

  Will be ignored if `null` or an empty object is passed.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: TourFilterInput

  """
  Used to filter on the `shows` field.

  Will be ignored if `null` or an empty object is passed.
  """
  shows: ShowListFilterInput
}

"""
Type used to specify the `Tour` fields to group by for aggregations.
"""
type TourGroupedBy {
  """
  The `name` field value for this group.
  """
  name: String
}

"""
Input type used to specify filters on `[Tour]` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input TourListFilterInput {
  """
  Matches records where all of the provided sub-filters evaluate to true. This works just like an AND operator in SQL.

  Note: multiple filters are automatically ANDed together. This is only needed when you have multiple filters that can't
  be provided on a single `TourListFilterInput` input because of collisions
  between key names. For example, if you want to provide
  multiple `anySatisfy: ...` filters, you could do `allOf: [{anySatisfy: ...}, {anySatisfy: ...}]`.

  Will be ignored when `null` or an empty list is passed.
  """
  allOf: [TourListFilterInput!]

  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [TourListFilterInput!]

  """
  Matches records where any of the list elements match the provided sub-filter.

  Will be ignored when `null` or an empty object is passed.
  """
  anySatisfy: TourFilterInput

  """
  Used to filter on the number of non-null elements in this list field.

  Will be ignored when `null` or an empty object is passed.
  """
  count: IntFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: TourListFilterInput
}

type Venue {
  capacity: Int

  """
  Aggregations over the `featuredArtists` data.
  """
  featuredArtistAggregations(
    """
    Used to forward-paginate through the `featuredArtistAggregations`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `featuredArtistAggregations`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the `Artist` documents that get aggregated over based on the provided criteria.
    """
    filter: ArtistFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `featuredArtistAggregations`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `featuredArtistAggregations`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `featuredArtistAggregations`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `featuredArtistAggregations`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int
  ): ArtistAggregationConnection
  featuredArtists(
    """
    Used to forward-paginate through the `featuredArtists`. When provided, the next page after the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    after: Cursor

    """
    Used to backward-paginate through the `featuredArtists`. When provided, the previous page before the
    provided cursor will be returned.

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    before: Cursor

    """
    Used to filter the returned `featuredArtists` based on the provided criteria.
    """
    filter: ArtistFilterInput

    """
    Used in conjunction with the `after` argument to forward-paginate through the `featuredArtists`.
    When provided, limits the number of returned results to the first `n` after the provided
    `after` cursor (or from the start of the `featuredArtists`, if no `after` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    first: Int

    """
    Used in conjunction with the `before` argument to backward-paginate through the `featuredArtists`.
    When provided, limits the number of returned results to the last `n` before the provided
    `before` cursor (or from the end of the `featuredArtists`, if no `before` cursor is provided).

    See the [Relay GraphQL Cursor Connections
    Specification](https://relay.dev/graphql/connections.htm#sec-Arguments) for more info.
    """
    last: Int

    """
    Used to specify how the returned `featuredArtists` should be sorted.
    """
    orderBy: [ArtistSortOrderInput!]
  ): ArtistConnection
  id: ID
  location: GeoLocation
  name: String
}

"""
Type used to perform aggregation computations on `Venue` fields.
"""
type VenueAggregatedValues {
  """
  Computed aggregate values for the `capacity` field.
  """
  capacity: IntAggregatedValues

  """
  Computed aggregate values for the `id` field.
  """
  id: NonNumericAggregatedValues

  """
  Computed aggregate values for the `location` field.
  """
  location: NonNumericAggregatedValues

  """
  Computed aggregate values for the `name` field.
  """
  name: NonNumericAggregatedValues
}

"""
Return type representing a bucket of `Venue` documents for an aggregations query.
"""
type VenueAggregation {
  """
  Provides computed aggregated values over all `Venue` documents in an aggregation bucket.
  """
  aggregatedValues: VenueAggregatedValues

  """
  The count of `Venue` documents in an aggregation bucket.
  """
  count: JsonSafeLong!

  """
  Used to specify the `Venue` fields to group by. The returned values identify each aggregation bucket.
  """
  groupedBy: VenueGroupedBy
}

"""
Represents a paginated collection of `VenueAggregation` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type VenueAggregationConnection {
  """
  Wraps a specific `VenueAggregation` to pair it with its pagination cursor.
  """
  edges: [VenueAggregationEdge!]!

  """
  The list of `VenueAggregation` results.
  """
  nodes: [VenueAggregation!]!

  """
  Provides pagination-related information.
  """
  pageInfo: PageInfo!
}

"""
Represents a specific `VenueAggregation` in the context of a `VenueAggregationConnection`,
providing access to both the `VenueAggregation` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type VenueAggregationEdge {
  """
  The `Cursor` of this `VenueAggregation`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `VenueAggregation`.
  """
  cursor: Cursor

  """
  The `VenueAggregation` of this edge.
  """
  node: VenueAggregation
}

"""
Represents a paginated collection of `Venue` results.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Connection-Types) for more info.
"""
type VenueConnection {
  """
  Wraps a specific `Venue` to pair it with its pagination cursor.
  """
  edges: [VenueEdge!]!

  """
  The list of `Venue` results.
  """
  nodes: [Venue!]!

  """
  Provides pagination-related information.
  """
  pageInfo: PageInfo!

  """
  The total number of edges available in this connection to paginate over.
  """
  totalEdgeCount: JsonSafeLong!
}

"""
Represents a specific `Venue` in the context of a `VenueConnection`,
providing access to both the `Venue` and a pagination `Cursor`.

See the [Relay GraphQL Cursor Connections
Specification](https://relay.dev/graphql/connections.htm#sec-Edge-Types) for more info.
"""
type VenueEdge {
  """
  The `Cursor` of this `Venue`. This can be passed in the next query as
  a `before` or `after` argument to continue paginating from this `Venue`.
  """
  cursor: Cursor

  """
  The `Venue` of this edge.
  """
  node: Venue
}

"""
Input type used to specify filters on `Venue` fields.

Will be ignored if passed as an empty object (or as `null`).
"""
input VenueFilterInput {
  """
  Matches records where any of the provided sub-filters evaluate to true.
  This works just like an OR operator in SQL.

  Will be ignored when `null` is passed. When an empty list is passed, will cause this
  part of the filter to match no documents.
  """
  anyOf: [VenueFilterInput!]

  """
  Used to filter on the `capacity` field.

  Will be ignored if `null` or an empty object is passed.
  """
  capacity: IntFilterInput

  """
  Used to filter on the `id` field.

  Will be ignored if `null` or an empty object is passed.
  """
  id: IDFilterInput

  """
  Used to filter on the `location` field.

  Will be ignored if `null` or an empty object is passed.
  """
  location: GeoLocationFilterInput

  """
  Used to filter on the `name` field.

  Will be ignored if `null` or an empty object is passed.
  """
  name: StringFilterInput

  """
  Matches records where the provided sub-filter evaluates to false.
  This works just like a NOT operator in SQL.

  Will be ignored when `null` or an empty object is passed.
  """
  not: VenueFilterInput
}

"""
Type used to specify the `Venue` fields to group by for aggregations.
"""
type VenueGroupedBy {
  """
  The `capacity` field value for this group.
  """
  capacity: Int

  """
  The `name` field value for this group.
  """
  name: String
}

"""
Enumerates the ways `Venue`s can be sorted.
"""
enum VenueSortOrderInput {
  """
  Sorts ascending by the `capacity` field.
  """
  capacity_ASC

  """
  Sorts descending by the `capacity` field.
  """
  capacity_DESC

  """
  Sorts ascending by the `id` field.
  """
  id_ASC

  """
  Sorts descending by the `id` field.
  """
  id_DESC

  """
  Sorts ascending by the `name` field.
  """
  name_ASC

  """
  Sorts descending by the `name` field.
  """
  name_DESC
}