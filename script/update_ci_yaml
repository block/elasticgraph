#!/usr/bin/env ruby

require "pathname"
require "rubygems"
require "yaml"

module ElasticGraph
  class CIYamlUpdater
    PROJECT_ROOT = ::Pathname.new(::File.expand_path("..", __dir__))
    CI_YAML_PATH = PROJECT_ROOT / ".github" / "workflows" / "ci.yaml"

    def initialize
      @content = CI_YAML_PATH.read
      @versions_data = load_versions_data
    end

    def update
      write_yaml(updated_content)
    end

    def verify
      if @content == updated_content
        puts "✅ #{CI_YAML_PATH} is up-to-date."
        true
      else
        show_diff
        false
      end
    end

    private

    def updated_content
      content = @content.dup
      content = update_datastore_matrix(content)
      content = update_primary_datastore(content)
      update_opensearch_version(content)
    end

    def show_diff
      tmp_path = PROJECT_ROOT / "tmp" / "ci.yaml"
      FileUtils.mkdir_p(tmp_path.dirname)
      tmp_path.write(updated_content)

      diff = `git diff --no-index #{CI_YAML_PATH} #{tmp_path} #{" --color" unless ENV["CI"]}`

      puts "❌ #{CI_YAML_PATH} is out-of-date. Run `#{__FILE__}` to update it. Diff:"
      puts
      puts diff
    end

    def load_versions_data
      versions_file = PROJECT_ROOT / "config" / "tested_datastore_versions.yaml"
      YAML.safe_load_file(versions_file)
    end

    def datastore_versions
      @datastore_versions ||= @versions_data.flat_map do |backend, versions|
        versions.map { |version| "#{backend}:#{version}" }
      end
    end

    def primary_datastore_version
      @primary_datastore_version ||= begin
        primary_version = @versions_data.fetch("elasticsearch").max_by do |version|
          Gem::Version.new(version)
        end
        "elasticsearch:#{primary_version}"
      end
    end

    def latest_opensearch_version
      @latest_opensearch_version ||= @versions_data.fetch("opensearch").max_by do |version|
        Gem::Version.new(version)
      end
    end

    def update_datastore_matrix(content)
      # Find the datastore matrix section and preserve its exact indentation
      matrix_pattern = /(        datastore:\n)([^\n]*\n)*?        include:/m
      match = content.match(matrix_pattern)
      return content unless match

      matrix_start = match[1]
      new_versions = datastore_versions.map { |v| '          - "' + v + "\"\n" }.join
      content.sub(matrix_pattern, "#{matrix_start}#{new_versions}        include:")
    end

    def update_primary_datastore(content)
      # Update each primary datastore version in the includes section
      content.gsub(
        /(?<=datastore: ")[^"]+(?="\n)/,
        primary_datastore_version
      )
    end

    def update_opensearch_version(content)
      # Update the OpenSearch version in the docker-demo job
      content.sub(
        /(?<=OPENSEARCH_VERSION: ")[^"]+(?="\n)/,
        latest_opensearch_version
      )
    end

    def write_yaml(content)
      CI_YAML_PATH.write(content)
      puts "#{CI_YAML_PATH} updated."
    end
  end
end

updater = ElasticGraph::CIYamlUpdater.new

case ARGV.first
when "--verify"
  exit(1) unless updater.verify
when nil
  updater.update
else
  raise "Unknown argument: #{ARGV.first}. Expected `--verify` or nothing."
end
