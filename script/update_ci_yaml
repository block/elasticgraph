#!/usr/bin/env ruby

require "erb"
require "pathname"
require "rubygems"
require "yaml"

module ElasticGraph
  class CIYamlRenderer
    PROJECT_ROOT = ::Pathname.new(::File.expand_path("..", __dir__))

    def initialize(template)
      @erb = ::ERB.new(template, trim_mode: "-")
    end

    def render
      @erb.result(binding)
    end

    private

    def datastore_versions
      datastore_versions_data.flat_map do |backend, versions|
        versions.map do |version|
          "#{backend}:#{version}"
        end
      end
    end

    def primary_datastore_version
      primary_version = datastore_versions_data.fetch("elasticsearch").max_by do |version|
        ::Gem::Version.new(version)
      end

      "elasticsearch:#{primary_version}"
    end

    def datastore_versions_data
      @datastore_versions_data ||= ::YAML.safe_load_file(datastore_versions_file)
    end

    def relative_this_script
      ::Pathname.new(::File.expand_path(__FILE__)).relative_path_from(PROJECT_ROOT)
    end

    def datastore_versions_file
      PROJECT_ROOT / "config" / "tested_datastore_versions.yaml"
    end

    def relative_datastore_versions_file
      datastore_versions_file.relative_path_from(PROJECT_ROOT)
    end
  end
end

renderer = ElasticGraph::CIYamlRenderer.new(DATA.read)
contents = renderer.render
file_path = ElasticGraph::CIYamlRenderer::PROJECT_ROOT / ".github" / "workflows" / "ci.yaml"

case ARGV.first
when "--verify"
  if file_path.read == contents
    puts "✅ #{file_path} is up-to-date."
  else
    tmp_path = ElasticGraph::CIYamlRenderer::PROJECT_ROOT / "tmp" / "ci.yaml"
    tmp_path.write(contents)

    diff = `git diff --no-index #{file_path} #{tmp_path} #{" --color" unless ENV["CI"]}`

    puts "❌ #{file_path} is out-of-date. Run `#{__FILE__}` to update it. Diff:"
    puts
    puts diff
    exit(1)
  end
when nil
  file_path.write(contents)
  puts "#{file_path} updated."
else
  raise "Unknown argument: #{ARGV.first}. Expected `--verify` or nothing."
end

__END__
# This file is generated by `<%= relative_this_script %>` based on input from `<%= relative_datastore_versions_file %>`.
# To edit it, make changes to the template at the bottom of `<%= relative_this_script %>` and run it.
name: ElasticGraph CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  # It's recommended to run ElasticGraph with this option to get better performance. We want to run
  # our CI builds with it to ensure that the option always works.
  RUBYOPT: "--enable-frozen-string-literal"
  # We use the VCR gem as a local "test accelerator" which caches datastore requests/responses for us.
  # But in our CI build we don't want to use it at all, so we disable it here.
  NO_VCR: "1"

jobs:
  ci-check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_part:
          - run_each_gem_spec
        ruby:
          - "3.2"
          - "3.3"
          - "3.4"
        datastore:
<% datastore_versions.each do |datastore_version| -%>
          - "<%= datastore_version %>"
<% end -%>
        include:
          # We have 4 build parts. The "primary" one is `run_each_gem_spec`, and we need that to be run on
          # every supported Ruby version and against every supported datastore. It's not necessary to run
          # these others against every combination of `ruby` and `datastore` so we just run each with one
          # configuration here.
          - build_part: "run_misc_checks"
            ruby: "3.4"
            datastore: "<%= primary_datastore_version %>"
          - build_part: "run_specs_with_vcr"
            ruby: "3.4"
            datastore: "<%= primary_datastore_version %>"
          - build_part: "run_specs_file_by_file"
            ruby: "3.4"
            datastore: "<%= primary_datastore_version %>"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: ruby/setup-ruby@277ba2a127aba66d45bad0fa2dc56f80dbfedffa # v1.222.0
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 2

      - uses: KengoTODA/actions-setup-docker-compose@0169fb81f56cb44a908f67a3ec212f3579e2e4fe # main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "action@github.com"
          git config --global init.defaultBranch main

      # Note: the `10` argument on the end is a number of seconds to sleep after booting the datastore.
      # We've found that there is a minor race condition where the shards aren't fully ready for the tests
      # to hit them if we don't wait a bit after booting.
      - run: script/ci_parts/${{ matrix.build_part }} ${{ matrix.datastore }} 10

  # An extra job that runs after all the others and provides a single summary status.
  # This is used by our branch protection rule to block merge until all CI checks passed,
  # without requiring us to individually list each CI check in the branch protection rule.
  #
  # https://github.com/orgs/community/discussions/26822#discussioncomment-3305794
  all-ci-checks-passed:
    if: ${{ always() }} # so it runs even if the workflow was cancelled
    runs-on: ubuntu-latest
    name: All CI Checks Passed
    needs: [ci-check]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - run: |
          result="${{ needs.ci-check.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
