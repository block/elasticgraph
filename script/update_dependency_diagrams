#!/usr/bin/env ruby

require "erb"
require "fileutils"
require_relative "list_eg_gems"

module ElasticGraph
  PROJECT_ROOT = File.expand_path("..", __dir__)
  STYLE_TARGET_GEM = "fill:#FADBD8,stroke:#EC7063,color:#000,stroke-width:2px" # Light Red/Pink fill, Moderate Red stroke, Black text
  STYLE_OTHER_EG_GEM = "fill:#A9DFBF,stroke:#2ECC71,color:#000"                # Clearer Green fill, Vibrant Green stroke, Black text
  STYLE_EXTERNAL_GEM = "fill:#E0EFFF,stroke:#70A1D7,color:#2980B9"             # Light Blue fill, Moderate Blue stroke, Blue link text

  class CodebaseOverviewRenderer
    def initialize(template, gem_specs)
      @erb = ::ERB.new(template, trim_mode: "-")
      @gem_specs = gem_specs
    end

    def render
      @erb.result(binding)
    end

    private

    def gem_categories
      @gem_categories ||= begin
        specs_by_category = @gem_specs.group_by do |spec|
          spec.metadata.fetch("gem_category") { raise "No category set for #{spec.name}." }.tap do |category|
            unless CategoryInfo::BY_NAME.key?(category)
              raise "Unrecognized gem category `#{category}` found on gem: #{spec.name}."
            end
          end
        end

        CategoryInfo::BY_NAME.map do |category, category_info|
          specs = specs_by_category.fetch(category, [])
          GemCategory.new(category, category_info, specs, @gem_specs)
        end
      end
    end
  end

  class IndividualGemReadmeProcessor
    attr_reader :readme_path

    # Regex to find the complete old diagram section for removal.
    # It looks for the heading, then a mermaid block, being flexible with spacing.
    # The `.*?` is non-greedy to match the closest ` ``` `.
    DIAGRAM_SECTION_REGEX = /^\s*## Dependency Diagram\n\s*```mermaid.*?\n\s*```\s*$/m

    def initialize(gem_spec, all_specs)
      @gem_spec = gem_spec
      @all_specs = all_specs
      @readme_path = File.join(PROJECT_ROOT, @gem_spec.name, "README.md")
    end

    def expected_content
      @expected_content ||= begin
        sections = [
          readme_intro_section,
          dependency_diagram_section,
          readme_rest
        ]

        sections
          .join("\n\n")
          .gsub(/\n{3,}/, "\n\n") # Ensure no more than 2 consecutive new lines.
          .strip + "\n" # Normalize end to just a single newline.
      end
    end

    def actual_content
      @actual_content ||= begin
        unless File.exist?(readme_path)
          abort "README for #{@gem_spec.name} at #{readme_path} is missing."
        end

        content = File.read(readme_path)

        if content.strip.empty?
          abort "README for #{@gem_spec.name} at #{readme_path} is empty."
        end

        unless content.lines.first.to_s.start_with?("# ")
          abort "README for #{@gem_spec.name} at #{readme_path} does not start with an H1 title."
        end

        content
      end
    end

    private

    def readme_intro_section
      @readme_intro_section ||=
        if DIAGRAM_SECTION_REGEX.match?(actual_content)
          actual_content.split(DIAGRAM_SECTION_REGEX)[0].to_s
        else
          # THe README does nto already have a diagram section. We consider all content before the first "## " line to be the intro.
          actual_content.lines.take_while { |line| !line.start_with?("## ") }.join
        end.strip
    end

    def readme_rest
      @readme_rest ||=
        if DIAGRAM_SECTION_REGEX.match?(actual_content)
          actual_content.split(DIAGRAM_SECTION_REGEX)[1].to_s
        else
          # THe README does nto already have a diagram section. We consider all content starting from the "## " line to be the rest.
          actual_content.lines.drop_while { |line| !line.start_with?("## ") }.join
        end.strip
    end

    def dependency_diagram_section
      <<~EOS
        ## Dependency Diagram

        #{generate_mermaid_diagram}
      EOS
    end

    def generate_mermaid_diagram
      current_gem_name = @gem_spec.name
      deps = @gem_spec.runtime_dependencies.map(&:name)
      dependents = @all_specs.filter_map do |other_spec|
        other_spec.name if other_spec.runtime_dependencies.any? { |dep| dep.name == current_gem_name }
      end.sort

      mermaid_lines = ["graph LR;"]
      mermaid_lines << "    classDef targetGemStyle #{STYLE_TARGET_GEM};"
      mermaid_lines << "    classDef otherEgGemStyle #{STYLE_OTHER_EG_GEM};"
      mermaid_lines << "    classDef externalGemStyle #{STYLE_EXTERNAL_GEM};"

      mermaid_lines << "    #{current_gem_name}[\"#{current_gem_name}\"];"
      mermaid_lines << "    class #{current_gem_name} targetGemStyle;"

      external_deps_for_links = Set.new

      unless deps.empty?
        deps.each do |dep_name|
          mermaid_lines << "    #{dep_name}[\"#{dep_name}\"];"
          mermaid_lines << "    #{current_gem_name} --> #{dep_name};"
          is_internal = @all_specs.any? { |s| s.name == dep_name }
          mermaid_lines << "    class #{dep_name} #{is_internal ? "otherEgGemStyle" : "externalGemStyle"};"
          external_deps_for_links.add(dep_name) unless is_internal
        end
      end

      unless dependents.empty?
        dependents.each do |dep_name|
          mermaid_lines << "    #{dep_name}[\"#{dep_name}\"];"
          mermaid_lines << "    #{dep_name} --> #{current_gem_name};"
          mermaid_lines << "    class #{dep_name} otherEgGemStyle;"
        end
      end

      external_deps_for_links.each do |ext_dep_name|
        mermaid_lines << "    click #{ext_dep_name} href \"https://rubygems.org/gems/#{ext_dep_name}\" \"Open on RubyGems.org\" _blank;"
      end

      "```mermaid\n#{mermaid_lines.join("\n")}\n```"
    end
  end

  class GemCategory < ::Data.define(:category_name, :info, :gem_specs, :all_eg_gem_specs)
    def mermaid_definition
      return "" if gem_specs.empty?
      class_defs = [
        "    classDef targetGemStyle #{STYLE_TARGET_GEM};",
        "    classDef otherEgGemStyle #{STYLE_OTHER_EG_GEM};",
        "    classDef externalGemCatStyle #{STYLE_EXTERNAL_GEM};"
      ]
      node_definitions = all_nodes_in_category_diagrams.map { |name| "    #{name}[\"#{name}\"];" }

      <<~MERMAID
        ```mermaid
        graph LR;
        #{class_defs.join("\n")}
        #{node_definitions.uniq.join("\n")}
        #{mermaid_deps.join("\n")}
        #{mermaid_node_classes.join("\n")}
        #{mermaid_clicks.join("\n")}
        ```
      MERMAID
    end

    private

    def mermaid_deps
      gem_specs.flat_map do |spec|
        next if spec.runtime_dependencies.nil? || spec.runtime_dependencies.empty?
        spec.runtime_dependencies.map do |dep|
          "    #{spec.name} --> #{dep.name};"
        end
      end.compact
    end

    def all_nodes_in_category_diagrams
      nodes = Set.new
      gem_specs.each do |spec|
        nodes.add(spec.name)
        spec.runtime_dependencies.each { |dep| nodes.add(dep.name) }
      end
      nodes.to_a.compact.uniq
    end

    def mermaid_node_classes
      all_nodes_in_category_diagrams.map do |node_name|
        class_name = if gem_specs.any? { |spec| spec.name == node_name }
          "targetGemStyle"
        elsif all_eg_gem_specs.any? { |spec| spec.name == node_name }
          "otherEgGemStyle"
        else
          "externalGemCatStyle"
        end
        "    class #{node_name} #{class_name};"
      end
    end

    def mermaid_clicks
      all_nodes_in_category_diagrams.filter_map do |gem_name|
        is_internal_in_category = gem_specs.any? { |spec| spec.name == gem_name }
        is_other_eg_gem = all_eg_gem_specs.any? { |spec| spec.name == gem_name }
        unless is_internal_in_category || is_other_eg_gem
          "    click #{gem_name} href \"https://rubygems.org/gems/#{gem_name}\" \"Open on RubyGems.org\" _blank;"
        end
      end
    end
  end

  class CategoryInfo < ::Data.define(:description, :discussion)
    BY_NAME = {
      "core" => new("Core Libraries", <<~EOS),
        These libraries form the core backbone of ElasticGraph that is designed to run in a production deployment. Every ElasticGraph deployment will need to use all of these.
      EOS

      "lambda" => new("AWS Lambda Integration Libraries", <<~EOS),
        These libraries wrap the the core ElasticGraph libraries so that they can be deployed using AWS Lambda.
      EOS

      "extension" => new("Extensions", <<~EOS),
        These libraries extend ElasticGraph to provide optional but commonly needed functionality.
      EOS

      "datastore_adapter" => new("Datastore Adapters", <<~EOS),
        These libraries adapt ElasticGraph to your choice of datastore (Elasticsearch or OpenSearch).
      EOS

      "local" => new("Local Development Libraries", <<~EOS)
        These libraries are used for local development of ElasticGraph applications, but are not intended to be deployed to production (except for `elasticgraph-rack`).
        `elasticgraph-rack` is used to boot ElasticGraph locally but can also be used to run ElasticGraph in any rack-compatible server (including a Rails application).
      EOS
    }
  end

  # New class to encapsulate script running logic
  class DependencyDiagramUpdater
    def initialize(mode_arg)
      @mode = mode_arg
      @renderer = CodebaseOverviewRenderer.new(DATA.read, gem_specs) # DATA is from the __END__ block
      @overview_readme_path = File.join(PROJECT_ROOT, "CODEBASE_OVERVIEW.md")
      @readme_errors = []
    end

    def run
      case @mode
      when "--verify"
        verify_overview_readme
        process_all_gem_readmes(verify_mode: true)
        report_verification_results
      when nil
        update_overview_readme
        process_all_gem_readmes(verify_mode: false)
        puts "\nDependency diagram processing complete."
        exit 0
      else
        warn "Unknown argument: #{@mode}. Expected `--verify` or nothing."
        exit 1
      end
    end

    private

    def gem_specs
      @gem_specs ||= ::ElasticGraphGems.list.map do |gem_name|
        gemspec_path = File.join(PROJECT_ROOT, gem_name, "#{gem_name}.gemspec")
        ::Gem::Specification.load(gemspec_path)
      end.compact
    end

    def verify_overview_readme
      puts "Verifying CODEBASE_OVERVIEW.md..."
      generated_contents = @renderer.render
      if File.exist?(@overview_readme_path) && File.read(@overview_readme_path) == generated_contents
        puts "✅ CODEBASE_OVERVIEW.md is up-to-date."
      else
        tmp_path = File.join(PROJECT_ROOT, "tmp", "CODEBASE_OVERVIEW.md")
        FileUtils.mkdir_p(File.dirname(tmp_path))
        File.write(tmp_path, generated_contents)
        diff_command = "git diff --no-index --exit-code #{@overview_readme_path} #{tmp_path}"
        diff_command += " --color" unless ENV["CI"]
        diff_output = `#{diff_command}`
        @readme_errors << ($?.success? ?
          "❌ CODEBASE_OVERVIEW.md content mismatch but git diff shows no changes. Please investigate." :
          "❌ CODEBASE_OVERVIEW.md is out-of-date. Diff:\n#{diff_output}"
                          )
      end
    end

    def update_overview_readme
      puts "Updating CODEBASE_OVERVIEW.md..."
      generated_contents = @renderer.render
      File.write(@overview_readme_path, generated_contents)
      puts "✅ CODEBASE_OVERVIEW.md updated."
    end

    def process_all_gem_readmes(verify_mode:)
      action_desc = verify_mode ? "Verifying" : "Updating"
      puts "\n#{action_desc} individual gem README dependency diagrams..."

      gem_specs.each do |spec|
        puts "Processing gem #{spec.name}..." unless verify_mode # Only log individual gems when updating
        processor = IndividualGemReadmeProcessor.new(spec, gem_specs)

        if processor.actual_content == processor.expected_content
          puts "#{verify_mode ? "✅" : "  ✅"} #{spec.name} README diagram is up-to-date."
        elsif verify_mode
          @readme_errors << "❌ #{spec.name} README diagram at #{processor.readme_path} is out-of-date or improperly formatted."
        else
          begin
            File.write(processor.readme_path, processor.expected_content)
            puts "  ✅ #{processor.readme_path} dependency diagram updated."
          rescue => e
            puts "  ❌ Failed to write #{processor.readme_path}: #{e.message}"
          end
        end
      end
    end

    def report_verification_results
      if @readme_errors.empty?
        puts "\n🎉 All dependency diagrams (CODEBASE_OVERVIEW.md and individual gems) are up-to-date."
        exit 0
      else
        puts "\n--- Verification Summary ---"
        @readme_errors.each { |err| puts err }
        puts "\nScript verification failed. Please review the errors above."
        exit 1
      end
    end
  end
end

# --- Main script execution ---
if __FILE__ == $PROGRAM_NAME
  updater = ElasticGraph::DependencyDiagramUpdater.new(ARGV.first)
  updater.run
end

__END__
# ElasticGraph Codebase Overview

ElasticGraph is designed to be modular, with a small core, and many built-in extensions that extend that core
for specific use cases. This minimizes exposure to vulnerabilities, reduces bloat, and makes ongoing upgrades
easier. The libraries that ship with ElasticGraph can be broken down into several categories.

<% gem_categories.each do |category| -%>
### <%= category.info.description %> (<%= category.gem_specs.size %> gems)

<%= category.info.discussion %>
<% category.gem_specs.each do |spec| -%>
* [<%= spec.name %>](<%= spec.name %>/README.md): <%= spec.summary %>
<% end -%>

#### Dependency Diagram

<%= category.mermaid_definition %>
<% end -%>
