---
# Copied from config/schema/artifacts/datastore_scripts.yaml#L196-L264 in ElasticGraph v0.8.0.0.
# TODO: Drop this when we no longer need to maintain backwards-compatibility.
update_index_data_9b97090d5c97c4adc82dc7f4c2b89bc5:
  context: update
  script:
    lang: painless
    source: |-
      Map source = ctx._source;

      // Numbers in JSON appear to be parsed as doubles, but we want the version stored as a long, so we need to cast it here.
      long eventVersion = (long) params.version;

      if (source.__versions == null) {
        source.__versions = [:];
      }

      if (source.__versions[params.relationship] == null) {
        source.__versions[params.relationship] = [:];
      }

      if (source.__sourceVersions == null) {
        source.__sourceVersions = [:];
      }

      if (source.__sourceVersions[params.sourceType] == null) {
        source.__sourceVersions[params.sourceType] = [:];
      }

      // While the version in `__versions` is going to be used for the doc version in the future, for now
      // we need to continue getting it from `__sourceVersions`. Both our old version and this versions of this
      // script keep the value in `__sourceVersions` up-to-date, whereas the old script only writes it to
      // `__sourceVersions`. Until we have completely migrated off of the old script for all ElasticGraph
      // clusters, we need to keep using it.
      //
      // Later, after the old script is no longer used by any clusters, we'll stop using `__sourceVersions`.
      // TODO: switch to `__versions` when we no longer need to maintain compatibility with the old version of the script.
      Number _versionForSourceType = source.__sourceVersions.get(params.sourceType)?.get(params.sourceId);
      Number _versionForRelationship = source.__versions.get(params.relationship)?.get(params.sourceId);

      // Our JSON schema requires event versions to be non-negative, so we can safely use Long.MIN_VALUE as a stand-in when the value is null.
      long versionForSourceType = _versionForSourceType == null ? Long.MIN_VALUE : _versionForSourceType.longValue();
      long versionForRelationship = _versionForRelationship == null ? Long.MIN_VALUE : _versionForRelationship.longValue();

      // Pick the larger of the two versions as our doc version. Note that `Math.max` didn't work for me here for
      // reasons I don't understand, but a simple ternary works fine.
      //
      // In theory, we could just use `versionForSourceType` as the `docVersion` (and not even check `__versions` at all)
      // since both the old version and this version maintain the doc version in `__sourceVersions`. However, that would
      // prevent this version of the script from being forward-compatible with the planned next version of this script.
      // In the next version, we plan to stop writing to `__sourceVersions`, and as we can't deploy that change atomically,
      // this version of the script will continue to run after that has begun to be used. So this version of the script
      // must consider which version is greater here, and not simply trust either version value.
      long docVersion = versionForSourceType > versionForRelationship ? versionForSourceType : versionForRelationship;

      if (docVersion >= eventVersion) {
        throw new IllegalArgumentException("ElasticGraph update was a no-op: [" +
          params.id + "]: version conflict, current version [" +
          docVersion + "] is higher or equal to the one provided [" +
          eventVersion + "]");
      } else {
        source.putAll(params.data);
        source.id = params.id;
        source.__versions[params.relationship][params.sourceId] = eventVersion;

        // To continue to be backwards compatible with the old version of this script, we need to write the version to
        // `__sourceVersions` since that's where it looks. In addition, we need to use `params.version` (which can be
        // double) rather than `eventVersion` (a long) to mirror how the old version of this script behaved (which didn't
        // do any casting).
        // TODO: drop this when we no longer need to maintain compatibility with the old version of the script.
        source.__sourceVersions[params.sourceType][params.sourceId] = params.version;
      }
